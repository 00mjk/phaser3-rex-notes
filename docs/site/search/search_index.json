{
    "docs": [
        {
            "location": "/index.html", 
            "text": "About me\n\n\nPlugin maker of Phaser 3 game engine.\n\n\n\n\nTODO\n on trello", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#about-me", 
            "text": "Plugin maker of Phaser 3 game engine.   TODO  on trello", 
            "title": "About me"
        }, 
        {
            "location": "/filter/index.html", 
            "text": "Introduction\n\n\nCreates a new array with all elements that pass the test function.\n\nAuthor: Built-in javascript function\n\n\nDependence\n\n\nNone\n\n\nSource code\n\n\nBuilt-in javascript function.\n\n\nUsage\n\n\nReference\n\n\nFilter elements\n\n\n// var elems = [...]\n\n\nvar\n \nresult\n \n=\n \nelems\n.\nfilter\n(\nfunction\n(\nel\n){\n\n    \nreturn\n \n(\nel\n.\nx\n \n \n400\n);\n\n\n});", 
            "title": "Filter"
        }, 
        {
            "location": "/filter/index.html#introduction", 
            "text": "Creates a new array with all elements that pass the test function. \nAuthor: Built-in javascript function", 
            "title": "Introduction"
        }, 
        {
            "location": "/filter/index.html#dependence", 
            "text": "None", 
            "title": "Dependence"
        }, 
        {
            "location": "/filter/index.html#source-code", 
            "text": "Built-in javascript function.", 
            "title": "Source code"
        }, 
        {
            "location": "/filter/index.html#usage", 
            "text": "Reference", 
            "title": "Usage"
        }, 
        {
            "location": "/filter/index.html#filter-elements", 
            "text": "// var elems = [...]  var   result   =   elems . filter ( function ( el ){ \n     return   ( el . x     400 );  });", 
            "title": "Filter elements"
        }, 
        {
            "location": "/date/index.html", 
            "text": "Introduction\n\n\nGet current date or unix-timestamp.\n\nAuthor: Built-in javascript function\n\n\nDependence\n\n\nNone\n\n\nSource code\n\n\nBuilt-in javascript function.\n\n\nUsage\n\n\nReference\n\n\nCreate instance\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n();\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n(\ntimestamp\n);\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n(\ndateString\n);\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n(\nyear\n,\n \nmonth\n,\n \nday\n,\n \nhours\n,\n \nminutes\n,\n \nseconds\n,\n \nmilliseconds\n);\n\n\n\n\n\nGet date\n\n\nvar\n \nyear\n \n=\n \nd\n.\ngetFullYear\n();\n    \n// returns the year\n\n\nvar\n \nmonth\n \n=\n \nd\n.\ngetMonth\n();\n      \n// returns the month (0-11)\n\n\nvar\n \ndate\n \n=\n \nd\n.\ngetDate\n();\n        \n// returns the day of the month (1-31)\n\n\nvar\n \nday\n \n=\n \nd\n.\ngetDay\n();\n          \n// returns the day of the week\n\n\nvar\n \nhour\n \n=\n \nd\n.\ngetHours\n();\n       \n// returns the hour (0-23)\n\n\nvar\n \nmin\n \n=\n \nd\n.\ngetMinutes\n();\n      \n// returns the minutes (0-59)\n\n\nvar\n \nsec\n \n=\n \nd\n.\ngetSeconds\n();\n      \n// returns the seconds (0-59)\n\n\nvar\n \nms\n \n=\n \nd\n.\ngetMilliseconds\n();\n  \n// returns the milliseconds (0-999)\n\n\n\n\n\nGet unix-timestamp\n\n\nvar\n \ntimestamp\n \n=\n \nd\n.\nnow\n();\n       \n// unix-timestamp in milliseconds\n\n\n\n\n\nTo string\n\n\nvar\n \ns\n \n=\n \nd\n.\ntoLocaleString\n();\n   \n// locale conventions\n\n\nvar\n \niso\n \n=\n \nd\n.\ntoISOString\n();\n    \n// ISO standard", 
            "title": "Date"
        }, 
        {
            "location": "/date/index.html#introduction", 
            "text": "Get current date or unix-timestamp. \nAuthor: Built-in javascript function", 
            "title": "Introduction"
        }, 
        {
            "location": "/date/index.html#dependence", 
            "text": "None", 
            "title": "Dependence"
        }, 
        {
            "location": "/date/index.html#source-code", 
            "text": "Built-in javascript function.", 
            "title": "Source code"
        }, 
        {
            "location": "/date/index.html#usage", 
            "text": "Reference", 
            "title": "Usage"
        }, 
        {
            "location": "/date/index.html#create-instance", 
            "text": "var   d   =   new   Date ();  var   d   =   new   Date ( timestamp );  var   d   =   new   Date ( dateString );  var   d   =   new   Date ( year ,   month ,   day ,   hours ,   minutes ,   seconds ,   milliseconds );", 
            "title": "Create instance"
        }, 
        {
            "location": "/date/index.html#get-date", 
            "text": "var   year   =   d . getFullYear ();      // returns the year  var   month   =   d . getMonth ();        // returns the month (0-11)  var   date   =   d . getDate ();          // returns the day of the month (1-31)  var   day   =   d . getDay ();            // returns the day of the week  var   hour   =   d . getHours ();         // returns the hour (0-23)  var   min   =   d . getMinutes ();        // returns the minutes (0-59)  var   sec   =   d . getSeconds ();        // returns the seconds (0-59)  var   ms   =   d . getMilliseconds ();    // returns the milliseconds (0-999)", 
            "title": "Get date"
        }, 
        {
            "location": "/date/index.html#get-unix-timestamp", 
            "text": "var   timestamp   =   d . now ();         // unix-timestamp in milliseconds", 
            "title": "Get unix-timestamp"
        }, 
        {
            "location": "/date/index.html#to-string", 
            "text": "var   s   =   d . toLocaleString ();     // locale conventions  var   iso   =   d . toISOString ();      // ISO standard", 
            "title": "To string"
        }, 
        {
            "location": "/gashaponplugin/index.html", 
            "text": "Introduction\n\n\nPick random item from box.\n\nAuthor: Rex\n\n\nDependence\n\n\nA plugin of scene.\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nCreate instance\n\n\nvar\n \ngashapon\n \n=\n \nnew\n \nGashaponPlugin\n(\nscene\n,\n \n{\n\n    \nmode\n:\n \nshuffle\n,\n  \n// 0|\nshuffle\n|1|\nrandom\n\n    \nitems\n:\n \n{\n  \n// name:count\n\n        \na\n:\n1\n,\n \n        \nb\n:\n2\n,\n \n        \nc\n:\n3\n \n    \n},\n\n    \nreload\n:\n \ntrue\n,\n     \n// true|false\n\n\n});\n\n\n\n\n\nProperties\n\n\n\n\nmode : \n\n\n'shuffle'\n, or \n0\n : pick item from box without put it back.\n\n\n'random'\n, or \n1\n : pick item from box then put it back.\n\n\n\n\n\n\nreload : set \ntrue\n to reload items when box is empty for \nshuffle\n mode.\n\n\nitems : initial items in box\n\n\n\n\nPick item\n\n\nPick a random item\n\n\nvar\n \nitem\n \n=\n \ngashapon\n.\nnext\n();\n\n\n\n\n\n\n\nreturn \nnull\n if pick nothing\n\n\n\n\nPick specific item\n\n\nvar\n \nitem\n \n=\n \ngashapon\n.\nnext\n(\na\n);\n\n\n\n\n\n\n\nreturn \nnull\n if pick nothing\n\n\n\n\nLast picked item\n\n\nvar\n \nitem\n \n=\n \ngashapon\n.\nresult\n;\n\n\n\n\n\nSet item\n\n\nSet item\n\n\ngashapon\n.\nsetItem\n(\na\n,\n \n1\n);\n\n\n// gashapon.setItem(\na\n, 1).setItem(\nb\n, 2).setItem(\nc\n, 3);\n\n\n\n\n\nAdd item\n\n\ngashapon\n.\naddItem\n(\na\n,\n1\n);\n\n\n\n\n\nRemove item\n\n\nRemove item\n\n\ngashapon\n.\nremoveItem\n(\na\n);\n\n\n// gashapon.removeItem(\nb\n).gashapon.removeItem(\nc\n);\n\n\n\n\n\nRemove all items\n\n\ngashapon\n.\nremoveAllItems\n();\n\n\n\n\n\nCurrent status\n\n\nGet current status\n\n\nvar\n \nstatus\n \n=\n \ngashapon\n.\ntoJSON\n();\n\n\n\n\n\nClone object\n\n\nvar\n \nstatus\n \n=\n \ngashapon\n.\ntoJSON\n();\n\n\nvar\n \ngashapon2\n \n=\n \nnew\n \nGashapon\n(\nstatus\n);\n\n\n\n\n\nOverwrite current status\n\n\nvar\n \nstatus\n \n=\n \ngashapon\n.\ntoJSON\n();\n\n\n// gashapon.next()...\n\n\ngashapon\n.\nresetFromJSON\n(\nstatus\n);\n\n\n\n\n\nGet items\n\n\nFor each item\n\n\ngashapon\n.\neachItem\n(\nfunction\n(\nname\n,\n \ncount\n){\n\n    \nconsole\n.\nlog\n(\nname\n \n+\n \n: \n \n+\n \ncount\n);\n\n\n});\n\n\n\n\n\nGet items\n\n\nvar\n \nitems\n \n=\n \ngashapon\n.\ngetItems\n();", 
            "title": "Gashapon"
        }, 
        {
            "location": "/gashaponplugin/index.html#introduction", 
            "text": "Pick random item from box. \nAuthor: Rex", 
            "title": "Introduction"
        }, 
        {
            "location": "/gashaponplugin/index.html#dependence", 
            "text": "A plugin of scene.", 
            "title": "Dependence"
        }, 
        {
            "location": "/gashaponplugin/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/gashaponplugin/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/gashaponplugin/index.html#create-instance", 
            "text": "var   gashapon   =   new   GashaponPlugin ( scene ,   { \n     mode :   shuffle ,    // 0| shuffle |1| random \n     items :   {    // name:count \n         a : 1 ,  \n         b : 2 ,  \n         c : 3  \n     }, \n     reload :   true ,       // true|false  });   Properties   mode :   'shuffle' , or  0  : pick item from box without put it back.  'random' , or  1  : pick item from box then put it back.    reload : set  true  to reload items when box is empty for  shuffle  mode.  items : initial items in box", 
            "title": "Create instance"
        }, 
        {
            "location": "/gashaponplugin/index.html#pick-item", 
            "text": "", 
            "title": "Pick item"
        }, 
        {
            "location": "/gashaponplugin/index.html#pick-a-random-item", 
            "text": "var   item   =   gashapon . next ();    return  null  if pick nothing", 
            "title": "Pick a random item"
        }, 
        {
            "location": "/gashaponplugin/index.html#pick-specific-item", 
            "text": "var   item   =   gashapon . next ( a );    return  null  if pick nothing", 
            "title": "Pick specific item"
        }, 
        {
            "location": "/gashaponplugin/index.html#last-picked-item", 
            "text": "var   item   =   gashapon . result ;", 
            "title": "Last picked item"
        }, 
        {
            "location": "/gashaponplugin/index.html#set-item", 
            "text": "", 
            "title": "Set item"
        }, 
        {
            "location": "/gashaponplugin/index.html#set-item_1", 
            "text": "gashapon . setItem ( a ,   1 );  // gashapon.setItem( a , 1).setItem( b , 2).setItem( c , 3);", 
            "title": "Set item"
        }, 
        {
            "location": "/gashaponplugin/index.html#add-item", 
            "text": "gashapon . addItem ( a , 1 );", 
            "title": "Add item"
        }, 
        {
            "location": "/gashaponplugin/index.html#remove-item", 
            "text": "", 
            "title": "Remove item"
        }, 
        {
            "location": "/gashaponplugin/index.html#remove-item_1", 
            "text": "gashapon . removeItem ( a );  // gashapon.removeItem( b ).gashapon.removeItem( c );", 
            "title": "Remove item"
        }, 
        {
            "location": "/gashaponplugin/index.html#remove-all-items", 
            "text": "gashapon . removeAllItems ();", 
            "title": "Remove all items"
        }, 
        {
            "location": "/gashaponplugin/index.html#current-status", 
            "text": "", 
            "title": "Current status"
        }, 
        {
            "location": "/gashaponplugin/index.html#get-current-status", 
            "text": "var   status   =   gashapon . toJSON ();", 
            "title": "Get current status"
        }, 
        {
            "location": "/gashaponplugin/index.html#clone-object", 
            "text": "var   status   =   gashapon . toJSON ();  var   gashapon2   =   new   Gashapon ( status );", 
            "title": "Clone object"
        }, 
        {
            "location": "/gashaponplugin/index.html#overwrite-current-status", 
            "text": "var   status   =   gashapon . toJSON ();  // gashapon.next()...  gashapon . resetFromJSON ( status );", 
            "title": "Overwrite current status"
        }, 
        {
            "location": "/gashaponplugin/index.html#get-items", 
            "text": "", 
            "title": "Get items"
        }, 
        {
            "location": "/gashaponplugin/index.html#for-each-item", 
            "text": "gashapon . eachItem ( function ( name ,   count ){ \n     console . log ( name   +   :    +   count );  });", 
            "title": "For each item"
        }, 
        {
            "location": "/gashaponplugin/index.html#get-items_1", 
            "text": "var   items   =   gashapon . getItems ();", 
            "title": "Get items"
        }, 
        {
            "location": "/dragplugin/index.html", 
            "text": "Introduction\n\n\nDrag game object.\n\nAuthor: Rex\n\n\nDependence\n\n\nA plugin of game object.\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nCreate instance\n\n\ngameobject\n.\ndrag\n \n=\n \nnew\n \nDragPlugin\n(\ngameobject\n,\n \n{\n\n    \n//enable: true,\n\n    \n//axis: 0,      //0|\nboth\n|\nh\nv\n|1|\nhorizontal\n|\nh\n|2|\nvertical\n|\nv\n\n    \n//rotation: Phaser.Math.DegToRad(45)  // axis rotation in rad\n\n\n});\n\n\n\n\n\nProperties\n\n\n\n\nenable: drag-able\n\n\naxis : \n\n\n'both'\n,\n'h\nv'\n, or \n0\n : dragging on all directions.\n\n\n'horizontal'\n,\n'h'\n, or \n1\n : dragging on horizontal axis.\n\n\n'vertical'\n,\n'v'\n, or \n2\n : dragging on vertical axis.\n\n\n\n\n\n\nrotation : axis rotation in rad, available in horizontal or vertical axis mode.\n\n\n\n\nDragging events\n\n\nBuilt-in dragging events\n\n\ngameobject\n.\non\n(\ndragstart\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n){\n \n/*...*/\n \n});\n\n\ngameobject\n.\non\n(\ndrag\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n){\n \n/*...*/\n \n});\n\n\ngameobject\n.\non\n(\ndragend\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n,\n \ndropped\n){\n \n/*...*/\n \n});\n\n\n\n\n\nGet dragging state\n\n\nvar\n \nisDragging\n \n=\n \ngameobject\n.\ndrag\n.\nisDragging\n;\n\n\n\n\n\nSet rotation of axis\n\n\ngameobject\n.\ndrag\n.\nsetAxisRotation\n(\nrad\n);\n\n\n\n\n\nSet axis mode\n\n\ngameobject\n.\ndrag\n.\nsetAxisMode\n(\nm\n);\n  \n//0|\nboth\n|\nh\nv\n|1|\nhorizontal\n|\nh\n|2|\nvertical\n|\nv\n\n\n\n\n\nTry drag\n\n\nGame object will be dragged if there is any point above it.\n\n\ngameobject\n.\ndrag\n.\ndrag\n();\n\n\n\n\n\nDrop\n\n\nGame object will be dropped(dragend) manually.\n\n\ngameobject\n.\ndrag\n.\ndragend\n();", 
            "title": "Drag"
        }, 
        {
            "location": "/dragplugin/index.html#introduction", 
            "text": "Drag game object. \nAuthor: Rex", 
            "title": "Introduction"
        }, 
        {
            "location": "/dragplugin/index.html#dependence", 
            "text": "A plugin of game object.", 
            "title": "Dependence"
        }, 
        {
            "location": "/dragplugin/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/dragplugin/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/dragplugin/index.html#create-instance", 
            "text": "gameobject . drag   =   new   DragPlugin ( gameobject ,   { \n     //enable: true, \n     //axis: 0,      //0| both | h v |1| horizontal | h |2| vertical | v \n     //rotation: Phaser.Math.DegToRad(45)  // axis rotation in rad  });   Properties   enable: drag-able  axis :   'both' , 'h v' , or  0  : dragging on all directions.  'horizontal' , 'h' , or  1  : dragging on horizontal axis.  'vertical' , 'v' , or  2  : dragging on vertical axis.    rotation : axis rotation in rad, available in horizontal or vertical axis mode.", 
            "title": "Create instance"
        }, 
        {
            "location": "/dragplugin/index.html#dragging-events", 
            "text": "Built-in dragging events  gameobject . on ( dragstart ,   function ( pointer ,   dragX ,   dragY ){   /*...*/   });  gameobject . on ( drag ,   function ( pointer ,   dragX ,   dragY ){   /*...*/   });  gameobject . on ( dragend ,   function ( pointer ,   dragX ,   dragY ,   dropped ){   /*...*/   });", 
            "title": "Dragging events"
        }, 
        {
            "location": "/dragplugin/index.html#get-dragging-state", 
            "text": "var   isDragging   =   gameobject . drag . isDragging ;", 
            "title": "Get dragging state"
        }, 
        {
            "location": "/dragplugin/index.html#set-rotation-of-axis", 
            "text": "gameobject . drag . setAxisRotation ( rad );", 
            "title": "Set rotation of axis"
        }, 
        {
            "location": "/dragplugin/index.html#set-axis-mode", 
            "text": "gameobject . drag . setAxisMode ( m );    //0| both | h v |1| horizontal | h |2| vertical | v", 
            "title": "Set axis mode"
        }, 
        {
            "location": "/dragplugin/index.html#try-drag", 
            "text": "Game object will be dragged if there is any point above it.  gameobject . drag . drag ();", 
            "title": "Try drag"
        }, 
        {
            "location": "/dragplugin/index.html#drop", 
            "text": "Game object will be dropped(dragend) manually.  gameobject . drag . dragend ();", 
            "title": "Drop"
        }, 
        {
            "location": "/dragcursorplugin/index.html", 
            "text": "Introduction\n\n\nSimulate curosr keys according dragging events.\n\nAuthor: Rex\n\n\nDependence\n\n\nA plugin of scene.\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nCreate instance\n\n\nvar\n \ndragCursor\n \n=\n \nnew\n \nDragCursorPlugin\n(\nscene\n,\n \n{\n\n    \ndir\n:\n \n8dir\n,\n    \n// 0|\nup\ndown\n|1|\nleft\nright|2|\n4dir\n|3|\n8dir\n\n    \ndistanceMin\n:\n \n30\n        \n\n});\n\n\n\n\n\nProperties\n\n\n\n\nmode : \n\n\n'up\ndown'\n, or \n0\n : simulate up or down cursor keys only.\n\n\n'left\nright'\n, or \n1\n : simulate left or right cursor keys only.\n\n\n'4dir'\n, or \n2\n : simulate up, down, left or right cursor keys.\n\n\n'8dir'\n, or \n3\n : simulate up, up-left, up-right, down, down-left, down-right, left, or right cursor keys.\n\n\n\n\n\n\ndistanceMin : cursor keys will be pressed when dragging distance is larger then this value.\n\n\n\n\nGet state of cursor keys\n\n\nvar\n \ncursorKeys\n \n=\n \ndragCursor\n.\ncreateCursorKeys\n();\n\n\n\nvar\n \nisLeftKeyDown\n \n=\n \ncursorKeys\n.\nleft\n.\nisDown\n;\n\n\nvar\n \nisRightKeyDown\n \n=\n \ncursorKeys\n.\nright\n.\nisDown\n;\n\n\nvar\n \nisUpKeyDown\n \n=\n \ncursorKeys\n.\nup\n.\nisDown\n;\n\n\nvar\n \nisDownKeyDown\n \n=\n \ncursorKeys\n.\ndown\n.\nisDown\n;\n\n\n\n\n\nGet dragging point\n\n\nvar\n \ndragStartX\n \n=\n \ndragCursor\n.\nstart\n.\nx\n;\n\n\nvar\n \ndragStartY\n \n=\n \ndragCursor\n.\nstart\n.\ny\n;\n\n\nvar\n \ndragEndX\n \n=\n \ndragCursor\n.\nend\n.\nx\n;\n\n\nvar\n \ndragEndY\n \n=\n \ndragCursor\n.\nend\n.\ny\n;\n\n\n\n\n\nAssign origin point\n\n\nOrigin point is the dragging start point, or assign origin point when creating instance.\n\n\nvar\n \ndragCursor\n \n=\n \nnew\n \nDragCursorPlugin\n(\nscene\n,\n \n{\n\n    \n// ...\n\n    \norigin\n:\n \n{\n       \n// assign origin point to (400,300)\n\n        \nx\n:\n \n400\n,\n\n        \ny\n:\n \n300\n\n    \n}\n\n\n});\n\n\n\n\n\nOr assign origin point by \nsetOrigin(x, y)\n function.\n\n\ndragCursor\n.\nsetOrigin\n(\n400\n,\n \n300\n);\n  \n// assign origin point to (400,300)", 
            "title": "Drag to CursorKeys"
        }, 
        {
            "location": "/dragcursorplugin/index.html#introduction", 
            "text": "Simulate curosr keys according dragging events. \nAuthor: Rex", 
            "title": "Introduction"
        }, 
        {
            "location": "/dragcursorplugin/index.html#dependence", 
            "text": "A plugin of scene.", 
            "title": "Dependence"
        }, 
        {
            "location": "/dragcursorplugin/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/dragcursorplugin/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/dragcursorplugin/index.html#create-instance", 
            "text": "var   dragCursor   =   new   DragCursorPlugin ( scene ,   { \n     dir :   8dir ,      // 0| up down |1| left right|2| 4dir |3| 8dir \n     distanceMin :   30          });   Properties   mode :   'up down' , or  0  : simulate up or down cursor keys only.  'left right' , or  1  : simulate left or right cursor keys only.  '4dir' , or  2  : simulate up, down, left or right cursor keys.  '8dir' , or  3  : simulate up, up-left, up-right, down, down-left, down-right, left, or right cursor keys.    distanceMin : cursor keys will be pressed when dragging distance is larger then this value.", 
            "title": "Create instance"
        }, 
        {
            "location": "/dragcursorplugin/index.html#get-state-of-cursor-keys", 
            "text": "var   cursorKeys   =   dragCursor . createCursorKeys ();  var   isLeftKeyDown   =   cursorKeys . left . isDown ;  var   isRightKeyDown   =   cursorKeys . right . isDown ;  var   isUpKeyDown   =   cursorKeys . up . isDown ;  var   isDownKeyDown   =   cursorKeys . down . isDown ;", 
            "title": "Get state of cursor keys"
        }, 
        {
            "location": "/dragcursorplugin/index.html#get-dragging-point", 
            "text": "var   dragStartX   =   dragCursor . start . x ;  var   dragStartY   =   dragCursor . start . y ;  var   dragEndX   =   dragCursor . end . x ;  var   dragEndY   =   dragCursor . end . y ;", 
            "title": "Get dragging point"
        }, 
        {
            "location": "/dragcursorplugin/index.html#assign-origin-point", 
            "text": "Origin point is the dragging start point, or assign origin point when creating instance.  var   dragCursor   =   new   DragCursorPlugin ( scene ,   { \n     // ... \n     origin :   {         // assign origin point to (400,300) \n         x :   400 , \n         y :   300 \n     }  });   Or assign origin point by  setOrigin(x, y)  function.  dragCursor . setOrigin ( 400 ,   300 );    // assign origin point to (400,300)", 
            "title": "Assign origin point"
        }
    ]
}