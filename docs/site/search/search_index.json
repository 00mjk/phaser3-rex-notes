{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Phaser 3 engine", 
            "title": "Home"
        }, 
        {
            "location": "/image/index.html", 
            "text": "Introduction\n\n\nDisplay of static images, built-in game object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nLoad texture\n\n\nscene\n.\nload\n.\nimage\n(\nkey\n,\n \npath\n/\nto\n/\nimage\n);\n\n\n\n\n\nAdd image object\n\n\nvar\n \nimage\n \n=\n \nscene\n.\nadd\n.\nimage\n(\nx\n,\n \ny\n,\n \nkey\n);\n\n\n\n\n\nAdd image from JSON\n\n\nvar\n \nimage\n \n=\n \nscene\n.\nmake\n.\nimage\n({\n\n    \nx\n:\n \n100\n,\n\n    \ny\n:\n \n100\n,\n\n    \nkey\n:\n \n\n\n});", 
            "title": "Image"
        }, 
        {
            "location": "/image/index.html#introduction", 
            "text": "Display of static images, built-in game object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/image/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/image/index.html#load-texture", 
            "text": "scene . load . image ( key ,   path / to / image );", 
            "title": "Load texture"
        }, 
        {
            "location": "/image/index.html#add-image-object", 
            "text": "var   image   =   scene . add . image ( x ,   y ,   key );", 
            "title": "Add image object"
        }, 
        {
            "location": "/image/index.html#add-image-from-json", 
            "text": "var   image   =   scene . make . image ({ \n     x :   100 , \n     y :   100 , \n     key :    });", 
            "title": "Add image from JSON"
        }, 
        {
            "location": "/text/index.html", 
            "text": "Introduction\n\n\nDrawing text on canvas, built-in game object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nAdd text object\n\n\nvar\n \ntext\n \n=\n \nscene\n.\nadd\n.\ntext\n(\nx\n,\n \ny\n,\n \ntext\n);\n\n\n// scene.add.text(x, y, text, { fontFamily: \nArial\n, fontSize: 64, color: \n#00ff00\n });\n\n\n\n\n\nDefault style\n\n\n{\n\n    \nfontFamily\n:\n \nCourier\n,\n\n    \nfontSize\n:\n \n16px\n,\n\n    \nfontStyle\n:\n \n,\n\n    \nbackgroundColor\n:\n \nnull\n,\n\n    \ncolor\n:\n \n#fff\n,\n\n    \nstroke\n:\n \n#fff\n,\n\n    \nstrokeThickness\n:\n \n0\n,\n\n    \nshadow\n:\n \n{\n\n        \noffsetX\n:\n \n0\n,\n\n        \noffsetY\n:\n \n0\n,\n\n        \ncolor\n:\n \n#000\n,\n\n        \nblur\n:\n \n0\n,\n\n        \nstroke\n:\n \nfalse\n,\n\n        \nfill\n:\n \nfalse\n\n    \n},\n\n    \nalign\n:\n \nleft\n,\n\n    \nmaxLines\n:\n \n0\n,\n\n    \nfixedWidth\n:\n \n0\n,\n\n    \nfixedHeight\n:\n \n0\n,\n\n    \nrtl\n:\n \nfalse\n,\n\n    \ntestString\n:\n \n|M\u00c9qgy\n,\n\n    \nwordWrap\n:\n \n{\n\n        \nwidth\n:\n \nnull\n,\n\n        \ncallback\n:\n \nnull\n,\n\n        \ncallbackScope\n:\n \nnull\n,\n\n        \nuseAdvancedWrap\n:\n \nfalse\n\n    \n}\n\n\n}\n\n\n\n\n\nAdd text from JSON\n\n\nvar\n \ntext\n \n=\n \nscene\n.\nmake\n.\ntext\n({\n\n    \nx\n:\n \n100\n,\n\n    \ny\n:\n \n100\n,\n\n    \ntext\n:\n \nText\\nGame Object\\nCreated from config\n,\n\n    \nstyle\n:\n \n{\n\n        \nfontSize\n:\n \n64px\n,\n\n        \nfontFamily\n:\n \nArial\n,\n\n        \ncolor\n:\n \n#ffffff\n,\n\n        \nalign\n:\n \ncenter\n,\n\n        \nbackgroundColor\n:\n \n#ff00ff\n\n    \n}\n\n\n});", 
            "title": "Text"
        }, 
        {
            "location": "/text/index.html#introduction", 
            "text": "Drawing text on canvas, built-in game object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/text/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/text/index.html#add-text-object", 
            "text": "var   text   =   scene . add . text ( x ,   y ,   text );  // scene.add.text(x, y, text, { fontFamily:  Arial , fontSize: 64, color:  #00ff00  });   Default style  { \n     fontFamily :   Courier , \n     fontSize :   16px , \n     fontStyle :   , \n     backgroundColor :   null , \n     color :   #fff , \n     stroke :   #fff , \n     strokeThickness :   0 , \n     shadow :   { \n         offsetX :   0 , \n         offsetY :   0 , \n         color :   #000 , \n         blur :   0 , \n         stroke :   false , \n         fill :   false \n     }, \n     align :   left , \n     maxLines :   0 , \n     fixedWidth :   0 , \n     fixedHeight :   0 , \n     rtl :   false , \n     testString :   |M\u00c9qgy , \n     wordWrap :   { \n         width :   null , \n         callback :   null , \n         callbackScope :   null , \n         useAdvancedWrap :   false \n     }  }", 
            "title": "Add text object"
        }, 
        {
            "location": "/text/index.html#add-text-from-json", 
            "text": "var   text   =   scene . make . text ({ \n     x :   100 , \n     y :   100 , \n     text :   Text\\nGame Object\\nCreated from config , \n     style :   { \n         fontSize :   64px , \n         fontFamily :   Arial , \n         color :   #ffffff , \n         align :   center , \n         backgroundColor :   #ff00ff \n     }  });", 
            "title": "Add text from JSON"
        }, 
        {
            "location": "/filter/index.html", 
            "text": "Introduction\n\n\nCreates a new array with all elements that pass the test function.\n\n\n\n\nAuthor: Built-in javascript function\n\n\n\n\nUsage\n\n\nReference\n\n\nFilter elements\n\n\n// var elems = [...]\n\n\nvar\n \nresult\n \n=\n \nelems\n.\nfilter\n(\nfunction\n(\nel\n){\n\n    \nreturn\n \n(\nel\n.\nx\n \n \n400\n);\n\n\n});", 
            "title": "Filter"
        }, 
        {
            "location": "/filter/index.html#introduction", 
            "text": "Creates a new array with all elements that pass the test function.   Author: Built-in javascript function", 
            "title": "Introduction"
        }, 
        {
            "location": "/filter/index.html#usage", 
            "text": "Reference", 
            "title": "Usage"
        }, 
        {
            "location": "/filter/index.html#filter-elements", 
            "text": "// var elems = [...]  var   result   =   elems . filter ( function ( el ){ \n     return   ( el . x     400 );  });", 
            "title": "Filter elements"
        }, 
        {
            "location": "/date/index.html", 
            "text": "Introduction\n\n\nGet current date or unix-timestamp.\n\n\n\n\nAuthor: Built-in javascript function\n\n\n\n\nUsage\n\n\nReference\n\n\nCreate instance\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n();\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n(\ntimestamp\n);\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n(\ndateString\n);\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n(\nyear\n,\n \nmonth\n,\n \nday\n,\n \nhours\n,\n \nminutes\n,\n \nseconds\n,\n \nmilliseconds\n);\n\n\n\n\n\nGet date\n\n\nvar\n \nyear\n \n=\n \nd\n.\ngetFullYear\n();\n    \n// returns the year\n\n\nvar\n \nmonth\n \n=\n \nd\n.\ngetMonth\n();\n      \n// returns the month (0-11)\n\n\nvar\n \ndate\n \n=\n \nd\n.\ngetDate\n();\n        \n// returns the day of the month (1-31)\n\n\nvar\n \nday\n \n=\n \nd\n.\ngetDay\n();\n          \n// returns the day of the week\n\n\nvar\n \nhour\n \n=\n \nd\n.\ngetHours\n();\n       \n// returns the hour (0-23)\n\n\nvar\n \nmin\n \n=\n \nd\n.\ngetMinutes\n();\n      \n// returns the minutes (0-59)\n\n\nvar\n \nsec\n \n=\n \nd\n.\ngetSeconds\n();\n      \n// returns the seconds (0-59)\n\n\nvar\n \nms\n \n=\n \nd\n.\ngetMilliseconds\n();\n  \n// returns the milliseconds (0-999)\n\n\n\n\n\nGet unix-timestamp\n\n\nvar\n \ntimestamp\n \n=\n \nd\n.\nnow\n();\n       \n// unix-timestamp in milliseconds\n\n\n\n\n\nTo string\n\n\nvar\n \ns\n \n=\n \nd\n.\ntoLocaleString\n();\n   \n// locale conventions\n\n\nvar\n \niso\n \n=\n \nd\n.\ntoISOString\n();\n    \n// ISO standard", 
            "title": "Date"
        }, 
        {
            "location": "/date/index.html#introduction", 
            "text": "Get current date or unix-timestamp.   Author: Built-in javascript function", 
            "title": "Introduction"
        }, 
        {
            "location": "/date/index.html#usage", 
            "text": "Reference", 
            "title": "Usage"
        }, 
        {
            "location": "/date/index.html#create-instance", 
            "text": "var   d   =   new   Date ();  var   d   =   new   Date ( timestamp );  var   d   =   new   Date ( dateString );  var   d   =   new   Date ( year ,   month ,   day ,   hours ,   minutes ,   seconds ,   milliseconds );", 
            "title": "Create instance"
        }, 
        {
            "location": "/date/index.html#get-date", 
            "text": "var   year   =   d . getFullYear ();      // returns the year  var   month   =   d . getMonth ();        // returns the month (0-11)  var   date   =   d . getDate ();          // returns the day of the month (1-31)  var   day   =   d . getDay ();            // returns the day of the week  var   hour   =   d . getHours ();         // returns the hour (0-23)  var   min   =   d . getMinutes ();        // returns the minutes (0-59)  var   sec   =   d . getSeconds ();        // returns the seconds (0-59)  var   ms   =   d . getMilliseconds ();    // returns the milliseconds (0-999)", 
            "title": "Get date"
        }, 
        {
            "location": "/date/index.html#get-unix-timestamp", 
            "text": "var   timestamp   =   d . now ();         // unix-timestamp in milliseconds", 
            "title": "Get unix-timestamp"
        }, 
        {
            "location": "/date/index.html#to-string", 
            "text": "var   s   =   d . toLocaleString ();     // locale conventions  var   iso   =   d . toISOString ();      // ISO standard", 
            "title": "To string"
        }, 
        {
            "location": "/gashaponplugin/index.html", 
            "text": "Introduction\n\n\nPick random item from box.\n\n\n\n\nAuthor: Rex\n\n\nA plugin of scene\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nCreate instance\n\n\nvar\n \ngashapon\n \n=\n \nnew\n \nGashaponPlugin\n(\nscene\n,\n \n{\n\n    \nmode\n:\n \nshuffle\n,\n  \n// 0|\nshuffle\n|1|\nrandom\n\n    \nitems\n:\n \n{\n  \n// name:count\n\n        \na\n:\n1\n,\n \n        \nb\n:\n2\n,\n \n        \nc\n:\n3\n \n    \n},\n\n    \nreload\n:\n \ntrue\n,\n     \n// true|false\n\n\n});\n\n\n\n\n\nProperties\n\n\n\n\nmode : \n\n\n'shuffle'\n, or \n0\n : pick item from box without put it back.\n\n\n'random'\n, or \n1\n : pick item from box then put it back.\n\n\n\n\n\n\nreload : set \ntrue\n to reload items when box is empty for \nshuffle\n mode.\n\n\nitems : initial items in box\n\n\n\n\nPick item\n\n\nPick a random item\n\n\nvar\n \nitem\n \n=\n \ngashapon\n.\nnext\n();\n\n\n\n\n\n\n\nreturn \nnull\n if pick nothing\n\n\n\n\nPick specific item\n\n\nvar\n \nitem\n \n=\n \ngashapon\n.\nnext\n(\na\n);\n\n\n\n\n\n\n\nreturn \nnull\n if pick nothing\n\n\n\n\nLast picked item\n\n\nvar\n \nitem\n \n=\n \ngashapon\n.\nresult\n;\n\n\n\n\n\nSet item\n\n\nSet item\n\n\ngashapon\n.\nsetItem\n(\na\n,\n \n1\n);\n\n\n// gashapon.setItem(\na\n, 1).setItem(\nb\n, 2).setItem(\nc\n, 3);\n\n\n\n\n\nAdd item\n\n\ngashapon\n.\naddItem\n(\na\n,\n1\n);\n\n\n\n\n\nRemove item\n\n\nRemove item\n\n\ngashapon\n.\nremoveItem\n(\na\n);\n\n\n// gashapon.removeItem(\nb\n).gashapon.removeItem(\nc\n);\n\n\n\n\n\nRemove all items\n\n\ngashapon\n.\nremoveAllItems\n();\n\n\n\n\n\nCurrent status\n\n\nGet current status\n\n\nvar\n \nstatus\n \n=\n \ngashapon\n.\ntoJSON\n();\n\n\n\n\n\nClone object\n\n\nvar\n \nstatus\n \n=\n \ngashapon\n.\ntoJSON\n();\n\n\nvar\n \ngashapon2\n \n=\n \nnew\n \nGashapon\n(\nstatus\n);\n\n\n\n\n\nOverwrite current status\n\n\nvar\n \nstatus\n \n=\n \ngashapon\n.\ntoJSON\n();\n\n\n// gashapon.next()...\n\n\ngashapon\n.\nresetFromJSON\n(\nstatus\n);\n\n\n\n\n\nGet items\n\n\nFor each item\n\n\ngashapon\n.\neachItem\n(\nfunction\n(\nname\n,\n \ncount\n){\n\n    \nconsole\n.\nlog\n(\nname\n \n+\n \n: \n \n+\n \ncount\n);\n\n\n});\n\n\n\n\n\nGet items\n\n\nvar\n \nitems\n \n=\n \ngashapon\n.\ngetItems\n();", 
            "title": "Gashapon"
        }, 
        {
            "location": "/gashaponplugin/index.html#introduction", 
            "text": "Pick random item from box.   Author: Rex  A plugin of scene", 
            "title": "Introduction"
        }, 
        {
            "location": "/gashaponplugin/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/gashaponplugin/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/gashaponplugin/index.html#create-instance", 
            "text": "var   gashapon   =   new   GashaponPlugin ( scene ,   { \n     mode :   shuffle ,    // 0| shuffle |1| random \n     items :   {    // name:count \n         a : 1 ,  \n         b : 2 ,  \n         c : 3  \n     }, \n     reload :   true ,       // true|false  });   Properties   mode :   'shuffle' , or  0  : pick item from box without put it back.  'random' , or  1  : pick item from box then put it back.    reload : set  true  to reload items when box is empty for  shuffle  mode.  items : initial items in box", 
            "title": "Create instance"
        }, 
        {
            "location": "/gashaponplugin/index.html#pick-item", 
            "text": "", 
            "title": "Pick item"
        }, 
        {
            "location": "/gashaponplugin/index.html#pick-a-random-item", 
            "text": "var   item   =   gashapon . next ();    return  null  if pick nothing", 
            "title": "Pick a random item"
        }, 
        {
            "location": "/gashaponplugin/index.html#pick-specific-item", 
            "text": "var   item   =   gashapon . next ( a );    return  null  if pick nothing", 
            "title": "Pick specific item"
        }, 
        {
            "location": "/gashaponplugin/index.html#last-picked-item", 
            "text": "var   item   =   gashapon . result ;", 
            "title": "Last picked item"
        }, 
        {
            "location": "/gashaponplugin/index.html#set-item", 
            "text": "", 
            "title": "Set item"
        }, 
        {
            "location": "/gashaponplugin/index.html#set-item_1", 
            "text": "gashapon . setItem ( a ,   1 );  // gashapon.setItem( a , 1).setItem( b , 2).setItem( c , 3);", 
            "title": "Set item"
        }, 
        {
            "location": "/gashaponplugin/index.html#add-item", 
            "text": "gashapon . addItem ( a , 1 );", 
            "title": "Add item"
        }, 
        {
            "location": "/gashaponplugin/index.html#remove-item", 
            "text": "", 
            "title": "Remove item"
        }, 
        {
            "location": "/gashaponplugin/index.html#remove-item_1", 
            "text": "gashapon . removeItem ( a );  // gashapon.removeItem( b ).gashapon.removeItem( c );", 
            "title": "Remove item"
        }, 
        {
            "location": "/gashaponplugin/index.html#remove-all-items", 
            "text": "gashapon . removeAllItems ();", 
            "title": "Remove all items"
        }, 
        {
            "location": "/gashaponplugin/index.html#current-status", 
            "text": "", 
            "title": "Current status"
        }, 
        {
            "location": "/gashaponplugin/index.html#get-current-status", 
            "text": "var   status   =   gashapon . toJSON ();", 
            "title": "Get current status"
        }, 
        {
            "location": "/gashaponplugin/index.html#clone-object", 
            "text": "var   status   =   gashapon . toJSON ();  var   gashapon2   =   new   Gashapon ( status );", 
            "title": "Clone object"
        }, 
        {
            "location": "/gashaponplugin/index.html#overwrite-current-status", 
            "text": "var   status   =   gashapon . toJSON ();  // gashapon.next()...  gashapon . resetFromJSON ( status );", 
            "title": "Overwrite current status"
        }, 
        {
            "location": "/gashaponplugin/index.html#get-items", 
            "text": "", 
            "title": "Get items"
        }, 
        {
            "location": "/gashaponplugin/index.html#for-each-item", 
            "text": "gashapon . eachItem ( function ( name ,   count ){ \n     console . log ( name   +   :    +   count );  });", 
            "title": "For each item"
        }, 
        {
            "location": "/gashaponplugin/index.html#get-items_1", 
            "text": "var   items   =   gashapon . getItems ();", 
            "title": "Get items"
        }, 
        {
            "location": "/touchevents/index.html", 
            "text": "Introduction\n\n\nBuilt-in touch/mouse events of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nMouse/touch events\n\n\nscene\n.\ninput\n.\non\n(\npointerdown\n,\n \nfunction\n(\npointer\n,\n \ncurrentlyOver\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\npointerup\n,\n \nfunction\n(\npointer\n,\n \ncurrentlyOver\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\npointermove\n,\n \nfunction\n(\npointer\n,\n \ncurrentlyOver\n){\n \n/* ... */\n \n});\n\n\n\nscene\n.\ninput\n.\non\n(\npointerover\n,\n \nfunction\n(\npointer\n,\n \njustOver\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\npointerout\n,\n \nfunction\n(\npointer\n,\n \njustOut\n){\n \n/* ... */\n \n});\n\n\n\n\n\nMouse/touch events of game object\n\n\n\n\nRegister game object\n\n\n\n\ngameObject\n.\nsetInteractive\n();\n       \n// enable\n\n\n// gameObject.setInteractive(false);  // disable\n\n\n\n\n\n\n\nMouse/touch events of a game object\n\n\n\n\ngameObject\n.\non\n(\npointerdown\n,\n \nfunction\n(\npointer\n,\n \nlocalX\n,\n \nlocalY\n,\n \ncamera\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\npointerup\n,\n \nfunction\n(\npointer\n,\n \nlocalX\n,\n \nlocalY\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\npointermove\n,\n \nfunction\n(\npointer\n,\n \nlocalX\n,\n \nlocalY\n){\n \n/* ... */\n \n});\n\n\n\ngameObject\n.\non\n(\npointerover\n,\n \nfunction\n(\npointer\n,\n \nlocalX\n,\n \nlocalY\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\npointerout\n,\n \nfunction\n(\npointer\n){\n \n/* ... */\n \n});\n\n\n\n\n\nscene\n.\ninput\n.\non\n(\ngameobjectdown\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ngameobjectup\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ngameobjectmove\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\n\nscene\n.\ninput\n.\non\n(\ngameobjectover\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ngameobjectout\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\n\n\n\nDrag events\n\n\n\n\nRegister game object and enable dragging\n\n\n\n\ngameObject\n.\nsetInteractive\n();\n           \n// enable touching interactive\n\n\nscene\n.\ninput\n.\nsetDraggable\n(\ngameObject\n);\n  \n// enable dragging\n\n\n// scene.input.dragDistanceThreshold = 16;\n\n\n// scene.input.dragTimeThreshold = 500;\n\n\n\n// gameObject.setInteractive(false);             // disable\n\n\n// scene.input.setDraggable(gameObject, false);  // disable dragging\n\n\n\n\n\ngameObject\n.\non\n(\ndragstart\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\ndrag\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\ndragend\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n,\n \ndropped\n{\n \n/* ... */\n \n});\n\n\n\n\n\nscene\n.\ninput\n.\non\n(\ndragstart\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ndrag\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ndragX\n,\n \ndragY\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ndragend\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ndropped\n){\n \n/* ... */\n \n});\n\n\n\n\n\nDrop events\n\n\ngameObject\n.\non\n(\ndrop\n,\n \nfunction\n(\npointer\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\n\ngameObject\n.\non\n(\ndragenter\n,\n \nfunction\n(\npointer\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\ndragover\n,\n \nfunction\n(\npointer\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\ndragleave\n,\n \nfunction\n(\npointer\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\n\n\n\nscene\n.\ninput\n.\non\n(\ndrop\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\n\nscene\n.\ninput\n.\non\n(\ndragenter\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ndragover\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ndragleave\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\n\n\n\nProperties of point\n\n\n\n\nPosition of current touching: \npointer.x\n , \npointer.y\n\n\nPosition of touching start: \npointer.downX\n, \npointer.downY\n\n\nPosition of touching end: \npointer.upX\n, \npointer.upY\n\n\nNo botton down: \npointer.noButtonDown()\n\n\nIs left botton down: \npointer.leftButtonDown()\n\n\nIs right botton down: \npointer.rightButtonDown()", 
            "title": "Touch events"
        }, 
        {
            "location": "/touchevents/index.html#introduction", 
            "text": "Built-in touch/mouse events of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/touchevents/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/touchevents/index.html#mousetouch-events", 
            "text": "scene . input . on ( pointerdown ,   function ( pointer ,   currentlyOver ){   /* ... */   });  scene . input . on ( pointerup ,   function ( pointer ,   currentlyOver ){   /* ... */   });  scene . input . on ( pointermove ,   function ( pointer ,   currentlyOver ){   /* ... */   });  scene . input . on ( pointerover ,   function ( pointer ,   justOver ){   /* ... */   });  scene . input . on ( pointerout ,   function ( pointer ,   justOut ){   /* ... */   });", 
            "title": "Mouse/touch events"
        }, 
        {
            "location": "/touchevents/index.html#mousetouch-events-of-game-object", 
            "text": "Register game object   gameObject . setInteractive ();         // enable  // gameObject.setInteractive(false);  // disable    Mouse/touch events of a game object   gameObject . on ( pointerdown ,   function ( pointer ,   localX ,   localY ,   camera ){   /* ... */   });  gameObject . on ( pointerup ,   function ( pointer ,   localX ,   localY ){   /* ... */   });  gameObject . on ( pointermove ,   function ( pointer ,   localX ,   localY ){   /* ... */   });  gameObject . on ( pointerover ,   function ( pointer ,   localX ,   localY ){   /* ... */   });  gameObject . on ( pointerout ,   function ( pointer ){   /* ... */   });   scene . input . on ( gameobjectdown ,   function ( pointer ,   gameObject ){   /* ... */   });  scene . input . on ( gameobjectup ,   function ( pointer ,   gameObject ){   /* ... */   });  scene . input . on ( gameobjectmove ,   function ( pointer ,   gameObject ){   /* ... */   });  scene . input . on ( gameobjectover ,   function ( pointer ,   gameObject ){   /* ... */   });  scene . input . on ( gameobjectout ,   function ( pointer ,   gameObject ){   /* ... */   });", 
            "title": "Mouse/touch events of game object"
        }, 
        {
            "location": "/touchevents/index.html#drag-events", 
            "text": "Register game object and enable dragging   gameObject . setInteractive ();             // enable touching interactive  scene . input . setDraggable ( gameObject );    // enable dragging  // scene.input.dragDistanceThreshold = 16;  // scene.input.dragTimeThreshold = 500;  // gameObject.setInteractive(false);             // disable  // scene.input.setDraggable(gameObject, false);  // disable dragging   gameObject . on ( dragstart ,   function ( pointer ,   dragX ,   dragY ){   /* ... */   });  gameObject . on ( drag ,   function ( pointer ,   dragX ,   dragY ){   /* ... */   });  gameObject . on ( dragend ,   function ( pointer ,   dragX ,   dragY ,   dropped {   /* ... */   });   scene . input . on ( dragstart ,   function ( pointer ,   gameObject ){   /* ... */   });  scene . input . on ( drag ,   function ( pointer ,   gameObject ,   dragX ,   dragY ){   /* ... */   });  scene . input . on ( dragend ,   function ( pointer ,   gameObject ,   dropped ){   /* ... */   });", 
            "title": "Drag events"
        }, 
        {
            "location": "/touchevents/index.html#drop-events", 
            "text": "gameObject . on ( drop ,   function ( pointer ,   target ){   /* ... */   });  gameObject . on ( dragenter ,   function ( pointer ,   target ){   /* ... */   });  gameObject . on ( dragover ,   function ( pointer ,   target ){   /* ... */   });  gameObject . on ( dragleave ,   function ( pointer ,   target ){   /* ... */   });   scene . input . on ( drop ,   function ( pointer ,   gameObject ,   target ){   /* ... */   });  scene . input . on ( dragenter ,   function ( pointer ,   gameObject ,   target ){   /* ... */   });  scene . input . on ( dragover ,   function ( pointer ,   gameObject ,   target ){   /* ... */   });  scene . input . on ( dragleave ,   function ( pointer ,   gameObject ,   target ){   /* ... */   });", 
            "title": "Drop events"
        }, 
        {
            "location": "/touchevents/index.html#properties-of-point", 
            "text": "Position of current touching:  pointer.x  ,  pointer.y  Position of touching start:  pointer.downX ,  pointer.downY  Position of touching end:  pointer.upX ,  pointer.upY  No botton down:  pointer.noButtonDown()  Is left botton down:  pointer.leftButtonDown()  Is right botton down:  pointer.rightButtonDown()", 
            "title": "Properties of point"
        }, 
        {
            "location": "/keyboardevents/index.html", 
            "text": "Introduction\n\n\nBuilt-in keyboard events of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nAny key down/up events\n\n\nscene\n.\ninput\n.\nkeyboard\n.\non\n(\nkeydown\n,\n \nfunction\n \n(\nevent\n)\n \n{\n \n/* ... */\n});\n\n\nscene\n.\ninput\n.\nkeyboard\n.\non\n(\nkeyup\n,\n \nfunction\n \n(\nevent\n)\n \n{\n \n/* ... */\n});\n\n\n\n\n\nSpecific key down/up events\n\n\nscene\n.\ninput\n.\nkeyboard\n.\non\n(\nkeydown_\n \n+\n \nA\n,\n \nfunction\n \n(\nevent\n)\n \n{\n \n/* ... */\n});\n\n\nscene\n.\ninput\n.\nkeyboard\n.\non\n(\nkeyup_\n \n+\n \nA\n,\n \nfunction\n \n(\nevent\n)\n \n{\n \n/* ... */\n});\n\n\n\n\n\nGet state of specific key\n\n\n\n\nGet key state object\n\n\n\n\nvar\n \nBKey\n \n=\n \nscene\n.\ninput\n.\nkeyboard\n.\naddKey\n(\nPhaser\n.\nInput\n.\nKeyboard\n.\nKeyCodes\n.\nB\n);\n\n\n\n\n\n\n\nGet key state\n\n\n\n\nvar\n \nisDown\n \n=\n \nBKey\n.\nisDown\n;\n\n\nvar\n \nisUp\n \n=\n \nBKey\n.\nisUp\n;\n\n\n\n\n\nGet state of cursorkeys\n\n\n\n\nGet key state object\n\n\n\n\nvar\n \ncursorKeys\n \n=\n \nscene\n.\ninput\n.\nkeyboard\n.\ncreateCursorKeys\n();\n\n\n\n\n\n\n\nGet key state\n\n\n\n\nvar\n \nisUpDown\n \n=\n \ncursorKeys\n.\nup\n.\nisDown\n;\n\n\nvar\n \nisDownDown\n \n=\n \ncursorKeys\n.\ndown\n.\nisDown\n;\n\n\nvar\n \nisLeftDown\n \n=\n \ncursorKeys\n.\nleft\n.\nisDown\n;\n\n\nvar\n \nisRightDown\n \n=\n \ncursorKeys\n.\nright\n.\nisDown\n;\n\n\nvar\n \nisSpaceDown\n \n=\n \ncursorKeys\n.\nspace\n.\nisDown\n;\n\n\nvar\n \nisShiftDown\n \n=\n \ncursorKeys\n.\nshift\n.\nisDown\n;\n\n\n\n\n\nKey map\n\n\n\n\nA\n ~ \nZ\n\n\nF1\n ~ \nF12\n\n\nBACKSPACE\n\n\nTAB\n\n\nENTER\n\n\nSHIFT\n\n\nCTRL\n. \nALT\n\n\nPAUSE\n\n\nCAPS_LOCK\n\n\nESC\n\n\nSPACE\n\n\nPAGE_UP\n, \nPAGE_DOWN\n\n\nEND\n, \nHOME\n\n\nLEFT\n, \nUP\n, \nRIGHT\n,\nDOWN\n\n\nPRINT_SCREEN\n\n\nINSERT\n, \nDELETE\n\n\nZERO\n, \nONE\n, \nTWO\n, \nTHREE\n, \nFOUR\n, \nFIVE\n, \nSIX\n, \nSEVEN\n, \nEIGHT\n, \nNINE\n\n\nOPEN_BRACKET\n, \nCLOSED_BRACKET", 
            "title": "Keyboard events"
        }, 
        {
            "location": "/keyboardevents/index.html#introduction", 
            "text": "Built-in keyboard events of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/keyboardevents/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/keyboardevents/index.html#any-key-downup-events", 
            "text": "scene . input . keyboard . on ( keydown ,   function   ( event )   {   /* ... */ });  scene . input . keyboard . on ( keyup ,   function   ( event )   {   /* ... */ });", 
            "title": "Any key down/up events"
        }, 
        {
            "location": "/keyboardevents/index.html#specific-key-downup-events", 
            "text": "scene . input . keyboard . on ( keydown_   +   A ,   function   ( event )   {   /* ... */ });  scene . input . keyboard . on ( keyup_   +   A ,   function   ( event )   {   /* ... */ });", 
            "title": "Specific key down/up events"
        }, 
        {
            "location": "/keyboardevents/index.html#get-state-of-specific-key", 
            "text": "Get key state object   var   BKey   =   scene . input . keyboard . addKey ( Phaser . Input . Keyboard . KeyCodes . B );    Get key state   var   isDown   =   BKey . isDown ;  var   isUp   =   BKey . isUp ;", 
            "title": "Get state of specific key"
        }, 
        {
            "location": "/keyboardevents/index.html#get-state-of-cursorkeys", 
            "text": "Get key state object   var   cursorKeys   =   scene . input . keyboard . createCursorKeys ();    Get key state   var   isUpDown   =   cursorKeys . up . isDown ;  var   isDownDown   =   cursorKeys . down . isDown ;  var   isLeftDown   =   cursorKeys . left . isDown ;  var   isRightDown   =   cursorKeys . right . isDown ;  var   isSpaceDown   =   cursorKeys . space . isDown ;  var   isShiftDown   =   cursorKeys . shift . isDown ;", 
            "title": "Get state of cursorkeys"
        }, 
        {
            "location": "/keyboardevents/index.html#key-map", 
            "text": "A  ~  Z  F1  ~  F12  BACKSPACE  TAB  ENTER  SHIFT  CTRL .  ALT  PAUSE  CAPS_LOCK  ESC  SPACE  PAGE_UP ,  PAGE_DOWN  END ,  HOME  LEFT ,  UP ,  RIGHT , DOWN  PRINT_SCREEN  INSERT ,  DELETE  ZERO ,  ONE ,  TWO ,  THREE ,  FOUR ,  FIVE ,  SIX ,  SEVEN ,  EIGHT ,  NINE  OPEN_BRACKET ,  CLOSED_BRACKET", 
            "title": "Key map"
        }, 
        {
            "location": "/dragplugin/index.html", 
            "text": "Introduction\n\n\nDrag game object.\n\n\n\n\nAuthor: Rex\n\n\nA plugin of game object\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nCreate instance\n\n\ngameobject\n.\ndrag\n \n=\n \nnew\n \nDragPlugin\n(\ngameobject\n,\n \n{\n\n    \n//enable: true,\n\n    \n//axis: 0,      //0|\nboth\n|\nh\nv\n|1|\nhorizontal\n|\nh\n|2|\nvertical\n|\nv\n\n    \n//rotation: Phaser.Math.DegToRad(45)  // axis rotation in rad\n\n\n});\n\n\n\n\n\nProperties\n\n\n\n\nenable: drag-able\n\n\naxis : \n\n\n'both'\n,\n'h\nv'\n, or \n0\n : dragging on all directions.\n\n\n'horizontal'\n,\n'h'\n, or \n1\n : dragging on horizontal axis.\n\n\n'vertical'\n,\n'v'\n, or \n2\n : dragging on vertical axis.\n\n\n\n\n\n\nrotation : axis rotation in rad, available in horizontal or vertical axis mode.\n\n\n\n\nDragging events\n\n\nBuilt-in dragging events\n\n\ngameobject\n.\non\n(\ndragstart\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n){\n \n/*...*/\n \n});\n\n\ngameobject\n.\non\n(\ndrag\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n){\n \n/*...*/\n \n});\n\n\ngameobject\n.\non\n(\ndragend\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n,\n \ndropped\n){\n \n/*...*/\n \n});\n\n\n\n\n\nGet dragging state\n\n\nvar\n \nisDragging\n \n=\n \ngameobject\n.\ndrag\n.\nisDragging\n;\n\n\n\n\n\nSet rotation of axis\n\n\ngameobject\n.\ndrag\n.\nsetAxisRotation\n(\nrad\n);\n\n\n\n\n\nSet axis mode\n\n\ngameobject\n.\ndrag\n.\nsetAxisMode\n(\nm\n);\n  \n//0|\nboth\n|\nh\nv\n|1|\nhorizontal\n|\nh\n|2|\nvertical\n|\nv\n\n\n\n\n\nTry drag\n\n\nGame object will be dragged if there is any point above it.\n\n\ngameobject\n.\ndrag\n.\ndrag\n();\n\n\n\n\n\nDrop\n\n\nGame object will be dropped(dragend) manually.\n\n\ngameobject\n.\ndrag\n.\ndragend\n();", 
            "title": "Drag"
        }, 
        {
            "location": "/dragplugin/index.html#introduction", 
            "text": "Drag game object.   Author: Rex  A plugin of game object", 
            "title": "Introduction"
        }, 
        {
            "location": "/dragplugin/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/dragplugin/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/dragplugin/index.html#create-instance", 
            "text": "gameobject . drag   =   new   DragPlugin ( gameobject ,   { \n     //enable: true, \n     //axis: 0,      //0| both | h v |1| horizontal | h |2| vertical | v \n     //rotation: Phaser.Math.DegToRad(45)  // axis rotation in rad  });   Properties   enable: drag-able  axis :   'both' , 'h v' , or  0  : dragging on all directions.  'horizontal' , 'h' , or  1  : dragging on horizontal axis.  'vertical' , 'v' , or  2  : dragging on vertical axis.    rotation : axis rotation in rad, available in horizontal or vertical axis mode.", 
            "title": "Create instance"
        }, 
        {
            "location": "/dragplugin/index.html#dragging-events", 
            "text": "Built-in dragging events  gameobject . on ( dragstart ,   function ( pointer ,   dragX ,   dragY ){   /*...*/   });  gameobject . on ( drag ,   function ( pointer ,   dragX ,   dragY ){   /*...*/   });  gameobject . on ( dragend ,   function ( pointer ,   dragX ,   dragY ,   dropped ){   /*...*/   });", 
            "title": "Dragging events"
        }, 
        {
            "location": "/dragplugin/index.html#get-dragging-state", 
            "text": "var   isDragging   =   gameobject . drag . isDragging ;", 
            "title": "Get dragging state"
        }, 
        {
            "location": "/dragplugin/index.html#set-rotation-of-axis", 
            "text": "gameobject . drag . setAxisRotation ( rad );", 
            "title": "Set rotation of axis"
        }, 
        {
            "location": "/dragplugin/index.html#set-axis-mode", 
            "text": "gameobject . drag . setAxisMode ( m );    //0| both | h v |1| horizontal | h |2| vertical | v", 
            "title": "Set axis mode"
        }, 
        {
            "location": "/dragplugin/index.html#try-drag", 
            "text": "Game object will be dragged if there is any point above it.  gameobject . drag . drag ();", 
            "title": "Try drag"
        }, 
        {
            "location": "/dragplugin/index.html#drop", 
            "text": "Game object will be dropped(dragend) manually.  gameobject . drag . dragend ();", 
            "title": "Drop"
        }, 
        {
            "location": "/dragcursorplugin/index.html", 
            "text": "Introduction\n\n\nSimulate curosr keys according dragging events.\n\n\n\n\nAuthor: Rex\n\n\nA plugin of scene\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nCreate instance\n\n\nvar\n \ndragCursor\n \n=\n \nnew\n \nDragCursorPlugin\n(\nscene\n,\n \n{\n\n    \ndir\n:\n \n8dir\n,\n    \n// 0|\nup\ndown\n|1|\nleft\nright|2|\n4dir\n|3|\n8dir\n\n    \ndistanceMin\n:\n \n30\n        \n\n});\n\n\n\n\n\nProperties\n\n\n\n\nmode : \n\n\n'up\ndown'\n, or \n0\n : simulate up or down cursor keys only.\n\n\n'left\nright'\n, or \n1\n : simulate left or right cursor keys only.\n\n\n'4dir'\n, or \n2\n : simulate up, down, left or right cursor keys.\n\n\n'8dir'\n, or \n3\n : simulate up, up-left, up-right, down, down-left, down-right, left, or right cursor keys.\n\n\n\n\n\n\ndistanceMin : cursor keys will be pressed when dragging distance is larger then this value.\n\n\n\n\nGet state of cursor keys\n\n\nvar\n \ncursorKeys\n \n=\n \ndragCursor\n.\ncreateCursorKeys\n();\n\n\n\nvar\n \nisLeftKeyDown\n \n=\n \ncursorKeys\n.\nleft\n.\nisDown\n;\n\n\nvar\n \nisRightKeyDown\n \n=\n \ncursorKeys\n.\nright\n.\nisDown\n;\n\n\nvar\n \nisUpKeyDown\n \n=\n \ncursorKeys\n.\nup\n.\nisDown\n;\n\n\nvar\n \nisDownKeyDown\n \n=\n \ncursorKeys\n.\ndown\n.\nisDown\n;\n\n\n\n\n\nGet dragging point\n\n\nvar\n \ndragStartX\n \n=\n \ndragCursor\n.\nstart\n.\nx\n;\n\n\nvar\n \ndragStartY\n \n=\n \ndragCursor\n.\nstart\n.\ny\n;\n\n\nvar\n \ndragEndX\n \n=\n \ndragCursor\n.\nend\n.\nx\n;\n\n\nvar\n \ndragEndY\n \n=\n \ndragCursor\n.\nend\n.\ny\n;\n\n\n\n\n\nAssign origin point\n\n\nOrigin point is the dragging start point, or assign origin point when creating instance.\n\n\nvar\n \ndragCursor\n \n=\n \nnew\n \nDragCursorPlugin\n(\nscene\n,\n \n{\n\n    \n// ...\n\n    \norigin\n:\n \n{\n       \n// assign origin point to (400,300)\n\n        \nx\n:\n \n400\n,\n\n        \ny\n:\n \n300\n\n    \n}\n\n\n});\n\n\n\n\n\nOr assign origin point by \nsetOrigin(x, y)\n function.\n\n\ndragCursor\n.\nsetOrigin\n(\n400\n,\n \n300\n);\n  \n// assign origin point to (400,300)", 
            "title": "Drag to CursorKeys"
        }, 
        {
            "location": "/dragcursorplugin/index.html#introduction", 
            "text": "Simulate curosr keys according dragging events.   Author: Rex  A plugin of scene", 
            "title": "Introduction"
        }, 
        {
            "location": "/dragcursorplugin/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/dragcursorplugin/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/dragcursorplugin/index.html#create-instance", 
            "text": "var   dragCursor   =   new   DragCursorPlugin ( scene ,   { \n     dir :   8dir ,      // 0| up down |1| left right|2| 4dir |3| 8dir \n     distanceMin :   30          });   Properties   mode :   'up down' , or  0  : simulate up or down cursor keys only.  'left right' , or  1  : simulate left or right cursor keys only.  '4dir' , or  2  : simulate up, down, left or right cursor keys.  '8dir' , or  3  : simulate up, up-left, up-right, down, down-left, down-right, left, or right cursor keys.    distanceMin : cursor keys will be pressed when dragging distance is larger then this value.", 
            "title": "Create instance"
        }, 
        {
            "location": "/dragcursorplugin/index.html#get-state-of-cursor-keys", 
            "text": "var   cursorKeys   =   dragCursor . createCursorKeys ();  var   isLeftKeyDown   =   cursorKeys . left . isDown ;  var   isRightKeyDown   =   cursorKeys . right . isDown ;  var   isUpKeyDown   =   cursorKeys . up . isDown ;  var   isDownKeyDown   =   cursorKeys . down . isDown ;", 
            "title": "Get state of cursor keys"
        }, 
        {
            "location": "/dragcursorplugin/index.html#get-dragging-point", 
            "text": "var   dragStartX   =   dragCursor . start . x ;  var   dragStartY   =   dragCursor . start . y ;  var   dragEndX   =   dragCursor . end . x ;  var   dragEndY   =   dragCursor . end . y ;", 
            "title": "Get dragging point"
        }, 
        {
            "location": "/dragcursorplugin/index.html#assign-origin-point", 
            "text": "Origin point is the dragging start point, or assign origin point when creating instance.  var   dragCursor   =   new   DragCursorPlugin ( scene ,   { \n     // ... \n     origin :   {         // assign origin point to (400,300) \n         x :   400 , \n         y :   300 \n     }  });   Or assign origin point by  setOrigin(x, y)  function.  dragCursor . setOrigin ( 400 ,   300 );    // assign origin point to (400,300)", 
            "title": "Assign origin point"
        }
    ]
}