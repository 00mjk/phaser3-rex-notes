{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Phaser\n\n\nPhaser\n is a fun, free and fast 2D game framework for making HTML5 games for desktop and mobile web browsers, supporting Canvas and WebGL rendering.\n\n\nList of my plugins\n\n\n\n\nBBCodeText\n: Drawing text with \nBBCode\n protocol.\n\n\nCanvas\n: Drawing on \ncanvas\n.\n\n\nClock\n: A clock to count elapsed time.\n\n\nCSV-scenario\n: Run script in csv format.\n\n\nCSV-to-hash-table\n: Hash table indexed by (col-key, row-key) from csv string.\n\n\nDrag\n: Drag game object.\n\n\nDrag-cursor\n: Simulate curosr keys according dragging events.\n\n\nFade-out-destroy\n: Fade out game object then destroy it.\n\n\nFade-volume\n: Fade-in/fade-out volume of sound.\n\n\nGashapon\n: Pick random item from box.\n\n\nGrid table\n: Viewer of grid table, to manipulate game object of each visible cell.\n\n\nLZ-string\n: Compress string using LZ-based compression algorithm.\n\n\nPage\n: Display text page by page on text object.\n\n\nRun-commands\n: Run commands in array.\n\n\nSequence\n: Run sequence commands in array.\n\n\nTagText\n: Displays text with multi-color, font face, or font size with tags.\n\n\nTCRP.Player\n: Run commands on time.\n\n\nTCRP.Recorder\n: Store commands with time.\n\n\nTyping\n: Typing text on text object.\n\n\nWebfont-loader\n: Load web font by google webfont loader in preload stage.\n\n\nXOR\n: Encrypt or decrypt string by XOR algorithm.", 
            "title": "Home"
        }, 
        {
            "location": "/index.html#phaser", 
            "text": "Phaser  is a fun, free and fast 2D game framework for making HTML5 games for desktop and mobile web browsers, supporting Canvas and WebGL rendering.", 
            "title": "Phaser"
        }, 
        {
            "location": "/index.html#list-of-my-plugins", 
            "text": "BBCodeText : Drawing text with  BBCode  protocol.  Canvas : Drawing on  canvas .  Clock : A clock to count elapsed time.  CSV-scenario : Run script in csv format.  CSV-to-hash-table : Hash table indexed by (col-key, row-key) from csv string.  Drag : Drag game object.  Drag-cursor : Simulate curosr keys according dragging events.  Fade-out-destroy : Fade out game object then destroy it.  Fade-volume : Fade-in/fade-out volume of sound.  Gashapon : Pick random item from box.  Grid table : Viewer of grid table, to manipulate game object of each visible cell.  LZ-string : Compress string using LZ-based compression algorithm.  Page : Display text page by page on text object.  Run-commands : Run commands in array.  Sequence : Run sequence commands in array.  TagText : Displays text with multi-color, font face, or font size with tags.  TCRP.Player : Run commands on time.  TCRP.Recorder : Store commands with time.  Typing : Typing text on text object.  Webfont-loader : Load web font by google webfont loader in preload stage.  XOR : Encrypt or decrypt string by XOR algorithm.", 
            "title": "List of my plugins"
        }, 
        {
            "location": "/game/index.html", 
            "text": "Boot\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nConfiguration\n\n\n{\n\n    \nwidth\n:\n \n1024\n,\n\n    \nheight\n:\n \n768\n,\n\n    \nzoom\n:\n \n1\n,\n\n    \nresolution\n:\n \n1\n,\n\n    \ntype\n:\n \nPhaser\n.\nAUTO\n,\n\n\n    \nparent\n:\n \nnull\n,\n\n    \ncanvas\n:\n \nnull\n,\n\n    \ncanvasStyle\n:\n \nnull\n,\n\n\n    \nscene\n:\n \nnull\n,\n\n\n    \ncallbacks\n:\n \n{\n\n        \npreBoot\n:\n \nNOOP\n,\n\n        \npostBoot\n:\n \nNOOP\n\n    \n},\n\n\n    \nseed\n:\n \n[\n \n(\nDate\n.\nnow\n()\n \n*\n \nMath\n.\nrandom\n()).\ntoString\n()\n \n],\n\n\n    \ntitle\n:\n \n,\n\n    \nurl\n:\n \nhttps://phaser.io\n,\n\n    \nversion\n:\n \n,\n\n\n    \ninput\n:\n \n{\n\n        \nkeyboard\n:\n \n{\n\n            \ntarget\n:\n \nwindow\n\n        \n},\n\n        \nmouse\n:\n \n{\n\n            \ntarget\n:\n \nnull\n,\n\n            \ncapture\n:\n \ntrue\n\n        \n},\n\n        \ntouch\n:\n \n{\n\n            \ntarget\n:\n \nnull\n,\n\n            \ncapture\n:\n \ntrue\n\n        \n}\n\n        \ngamepad\n:\n \nfalse\n\n    \n},\n\n\n    \nbackgroundColor\n:\n \n0\n,\n\n    \nrender\n:\n \n{\n\n        \nantialias\n:\n \ntrue\n,\n\n        \npixelArt\n:\n \nfalse\n,\n\n        \nautoResize\n:\n \nfalse\n,\n\n        \nroundPixels\n:\n \nfalse\n,\n\n        \ntransparent\n:\n \nfalse\n,\n\n        \nclearBeforeRender\n:\n \ntrue\n,\n\n        \npremultipliedAlpha\n:\n \ntrue\n,\n\n        \npreserveDrawingBuffer\n:\n \nfalse\n,\n\n        \nfailIfMajorPerformanceCaveat\n:\n \nfalse\n,\n\n        \npowerPreference\n:\n \ndefault\n\n    \n},\n\n\n    \nphysics\n:\n \n{\n\n        \ndefault\n:\n \nfalse\n  \n// no physics system enabled\n\n    \n},\n\n    \n//physics: {\n\n    \n//    system: \nimpact\n,\n\n    \n//    setBounds: true,\n\n    \n//    gravity: 0,\n\n    \n//    cellSize: 64\n\n    \n//},\n\n\n    \nloader\n:\n{\n\n        \nbaseURL\n:\n \n,\n\n        \npath\n:\n \n,\n\n        \nenableParallel\n:\n \ntrue\n,\n\n        \nmaxParallelDownloads\n:\n \n4\n,\n\n        \ncrossOrigin\n:\n \nundefined\n,\n\n        \nresponseType\n:\n \n,\n\n        \nasync\n:\n \ntrue\n,\n\n        \nuser\n:\n \n,\n\n        \npassword\n:\n \n,\n\n        \ntimeout\n:\n \n0\n\n    \n},\n\n\n    \nimages\n:\n \n{\n\n        \ndefault\n:\n \ndata:image/png;base64....\n,\n\n        \nmissing\n:\n \ndata:image/png;base64....\n\n    \n},\n\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[\n\n            \n//{key, plugin, start}\n\n        \n],\n\n        \nscene\n:\n \n[\n\n            \n// ...\n\n        \n]\n\n    \n},\n\n\n    \nfps\n:\n \n{\n\n        \nmin\n:\n \n10\n,\n\n        \ntarget\n:\n \n60\n,\n\n        \nforceSetTimeOut\n:\n \nfalse\n,\n\n        \ndeltaHistory\n:\n \n10\n\n    \n},\n\n\n    \ndisableContextMenu\n:\n \nfalse\n,\n\n    \nbanner\n:\n \n{\n\n        \nhidePhaser\n:\n \nfalse\n,\n\n        \ntext\n:\n \n#ffffff\n,\n\n        \nbackground\n:\n \n[\n\n            \n#ff0000\n,\n\n            \n#ffff00\n,\n\n            \n#00ff00\n,\n\n            \n#00ffff\n,\n\n            \n#000000\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\nResize\n\n\ngame\n.\ndestroy\n(\nwidth\n,\n \nheight\n);\n\n\n\n\n\nAlso fires game.events \nresize\n event.\n\n\nDestroy\n\n\ngame\n.\ndestroy\n();\n\n\n\n\n\nAlso fires game.events \ndestroy\n event.\n\n\nMain loop\n\n\n\n\ngame.events \nprestep\n event\n\n\ntrigger \ngame.input.update()\n\n\ntrigger \ngame.sound.update()\n\n\n\n\n\n\ngame.events \nstep\n event\n\n\nSceneManager.update, for each active scene\n\n\nscene.sys.events \npreupdate\n event\n\n\nTweenManager.preUpdate() to arrange active targets\n\n\nUpdateList.preUpdate(), to arrange game objects in UpdateList\n\n\n\n\n\n\nscene.sys.events \nupdate\n event\n\n\nTweenManager.update(), to run active tweens\n\n\nUpdateList.update \n gameObject.preUpdate\n\n\n\n\n\n\nscene.update\n\n\nscene.sys.events \npostupdate\n event\n\n\n\n\n\n\ngame.events \npoststep\n event\n\n\ngame.renderer.preRender()\n\n\ngame.events \nprerender\n event\n\n\nSceneManager.render()\n\n\ngame.renderer.postRender()\n\n\ngame.events \npostrender\n event\n\n\n\n\n\n\nNote\n\n\nEach scene is a standalone system.\n\n\n\n\nPause / Resume events\n\n\n\n\nPause (window is invisible) : game.events \npause\n event\n\n\nResume (window is visible) : game.events \nresume\n event\n\n\n\n\nGlobal data\n\n\nInsatance of \ndata manager\n in \ngame.registry\n, or \nscene.registry\n in each scene.", 
            "title": "Game"
        }, 
        {
            "location": "/game/index.html#boot", 
            "text": "var   game   =   new   Phaser . Game ( config );", 
            "title": "Boot"
        }, 
        {
            "location": "/game/index.html#configuration", 
            "text": "{ \n     width :   1024 , \n     height :   768 , \n     zoom :   1 , \n     resolution :   1 , \n     type :   Phaser . AUTO , \n\n     parent :   null , \n     canvas :   null , \n     canvasStyle :   null , \n\n     scene :   null , \n\n     callbacks :   { \n         preBoot :   NOOP , \n         postBoot :   NOOP \n     }, \n\n     seed :   [   ( Date . now ()   *   Math . random ()). toString ()   ], \n\n     title :   , \n     url :   https://phaser.io , \n     version :   , \n\n     input :   { \n         keyboard :   { \n             target :   window \n         }, \n         mouse :   { \n             target :   null , \n             capture :   true \n         }, \n         touch :   { \n             target :   null , \n             capture :   true \n         } \n         gamepad :   false \n     }, \n\n     backgroundColor :   0 , \n     render :   { \n         antialias :   true , \n         pixelArt :   false , \n         autoResize :   false , \n         roundPixels :   false , \n         transparent :   false , \n         clearBeforeRender :   true , \n         premultipliedAlpha :   true , \n         preserveDrawingBuffer :   false , \n         failIfMajorPerformanceCaveat :   false , \n         powerPreference :   default \n     }, \n\n     physics :   { \n         default :   false    // no physics system enabled \n     }, \n     //physics: { \n     //    system:  impact , \n     //    setBounds: true, \n     //    gravity: 0, \n     //    cellSize: 64 \n     //}, \n\n     loader : { \n         baseURL :   , \n         path :   , \n         enableParallel :   true , \n         maxParallelDownloads :   4 , \n         crossOrigin :   undefined , \n         responseType :   , \n         async :   true , \n         user :   , \n         password :   , \n         timeout :   0 \n     }, \n\n     images :   { \n         default :   data:image/png;base64.... , \n         missing :   data:image/png;base64.... \n     }, \n\n     plugins :   { \n         global :   [ \n             //{key, plugin, start} \n         ], \n         scene :   [ \n             // ... \n         ] \n     }, \n\n     fps :   { \n         min :   10 , \n         target :   60 , \n         forceSetTimeOut :   false , \n         deltaHistory :   10 \n     }, \n\n     disableContextMenu :   false , \n     banner :   { \n         hidePhaser :   false , \n         text :   #ffffff , \n         background :   [ \n             #ff0000 , \n             #ffff00 , \n             #00ff00 , \n             #00ffff , \n             #000000 \n         ] \n     }  }", 
            "title": "Configuration"
        }, 
        {
            "location": "/game/index.html#resize", 
            "text": "game . destroy ( width ,   height );   Also fires game.events  resize  event.", 
            "title": "Resize"
        }, 
        {
            "location": "/game/index.html#destroy", 
            "text": "game . destroy ();   Also fires game.events  destroy  event.", 
            "title": "Destroy"
        }, 
        {
            "location": "/game/index.html#main-loop", 
            "text": "game.events  prestep  event  trigger  game.input.update()  trigger  game.sound.update()    game.events  step  event  SceneManager.update, for each active scene  scene.sys.events  preupdate  event  TweenManager.preUpdate() to arrange active targets  UpdateList.preUpdate(), to arrange game objects in UpdateList    scene.sys.events  update  event  TweenManager.update(), to run active tweens  UpdateList.update   gameObject.preUpdate    scene.update  scene.sys.events  postupdate  event    game.events  poststep  event  game.renderer.preRender()  game.events  prerender  event  SceneManager.render()  game.renderer.postRender()  game.events  postrender  event    Note  Each scene is a standalone system.", 
            "title": "Main loop"
        }, 
        {
            "location": "/game/index.html#pause-resume-events", 
            "text": "Pause (window is invisible) : game.events  pause  event  Resume (window is visible) : game.events  resume  event", 
            "title": "Pause / Resume events"
        }, 
        {
            "location": "/game/index.html#global-data", 
            "text": "Insatance of  data manager  in  game.registry , or  scene.registry  in each scene.", 
            "title": "Global data"
        }, 
        {
            "location": "/scenemanager/index.html", 
            "text": "Scene manager:\n\n\n\n\nIn Game instance : \ngame.scene\n\n\nIn each scene instance: \nscene.scene\n\n\n\n\nAdd new scene\n\n\nscene\n.\nscene\n.\nadd\n(\nkey\n,\n \nsceneConfig\n,\n \nautoStart\n);\n\n\n// game.scene.add(key, sceneConfig, autoStart);\n\n\n\n\n\nLoad scene from external files\n\n\n\n\n\n\nload script\n\n    \nscene\n.\nload\n.\nscript\n(\nkey\n,\n \nurl\n);\n\n\n\n\n\n\n\n\nadd new scene\n    \nscene\n.\nscene\n.\nadd\n(\nkey\n,\n \nsceneConfig\n,\n \nautoStart\n);\n\n\n// game.scene.add(key, sceneConfig, autoStart);\n\n\n\n\n\n\n\n\nRemove scene\n\n\nscene\n.\nscene\n.\nremove\n(\nkey\n);\n\n\n\n\n\nStart scene\n\n\nLaunch the given Scene and run it in parallel with this one.\n\n\nscene\n.\nscene\n.\nlaunch\n(\nkey\n,\n \ndata\n);\n\n\n\n\n\nShutdown this Scene and run the given one.\n\n\nscene\n.\nscene\n.\nstart\n(\nkey\n,\n \ndata\n);\n\n\n\n\n\nRestarts this Scene.\n\n\nscene\n.\nscene\n.\nrestart\n(\ndata\n);\n\n\n\n\n\nPause/Resume scene\n\n\nPause : stops the update step but still renders.\n\n\nscene\n.\nscene\n.\npause\n(\nkey\n);\n\n\n// scene.scene.pause();  // pause myself\n\n\n\n\n\nResume : starts the update loop again.\n\n\nscene\n.\nscene\n.\nresume\n(\nkey\n);\n\n\n// scene.scene.resume();  // resume myself\n\n\n\n\n\nSleep : no update, no render but doesn't shutdown.\n\n\nscene\n.\nscene\n.\nsleep\n(\nkey\n);\n\n\n// scene.scene.sleep();  // sleep myself\n\n\n\n\n\nWake-up: starts update and render\n\n\nscene\n.\nscene\n.\nwake\n(\nkey\n);\n\n\n// scene.scene.wake();  // wake-up myself\n\n\n\n\n\nMakes this Scene sleep then starts the Scene given.\n\n\nscene\n.\nscene\n.\nswitch\n(\nkey\n);\n\n\n\n\n\nRead status\n\n\nvar\n \nisSleep\n \n=\n \nscene\n.\nscene\n.\nisSleeping\n(\nkey\n);\n\n\n// var isSleep = scene.scene.isSleeping();\n\n\n\n\n\nvar\n \nisActive\n \n=\n \nscene\n.\nscene\n.\nisActive\n(\nkey\n);\n\n\n// var isActive = scene.scene.isActive();\n\n\n\n\n\nvar\n \nisVisible\n \n=\n \nscene\n.\nscene\n.\nisVisible\n(\nkey\n);\n\n\n// var isVisible = scene.scene.isVisible();\n\n\n\n\n\nStop scene\n\n\nStop : shutdown the Scene, clearing display list, timers, etc.\n\n\nscene\n.\nscene\n.\nstop\n(\nkey\n);\n\n\n// scene.scene.stop();  // stop myself\n\n\n\n\n\nGet scene\n\n\nvar\n \nscene\n \n=\n \nscene\n.\nscene\n.\nget\n(\nkey\n);\n\n\n\n\n\nOrder of scenes\n\n\nSwaps the position of two scenes in the Scenes list.\n\n\nscene\n.\nscene\n.\nswapPosition\n(\nkeyA\n,\n \nkeyB\n);\n\n\n// scene.scene.stop(keyA);\n\n\n\n\n\nscene\n.\nscene\n.\nmoveAbove\n(\nkeyA\n,\n \nkeyB\n);\n\n\n// scene.scene.moveAbove(keyA);\n\n\n\n\n\nScene B is directly above Scene A.\n\n\nscene\n.\nscene\n.\nmoveBelow\n(\nkeyA\n,\n \nkeyB\n);\n\n\n// scene.scene.moveBelow(keyA);\n\n\n\n\n\nScene B is directly below Scene A.\n\n\nscene\n.\nscene\n.\nmoveUp\n(\nkeyA\n);\n\n\n// scene.scene.moveBelow();\n\n\n\n\n\nscene\n.\nscene\n.\nmoveDown\n(\nkeyA\n);\n\n\n// scene.scene.moveDown();\n\n\n\n\n\nscene\n.\nscene\n.\nbringToTop\n(\nkeyA\n);\n\n\n// scene.scene.bringToTop();\n\n\n\n\n\nscene\n.\nscene\n.\nsendToBack\n(\nkeyA\n);\n\n\n// scene.scene.sendToBack();\n\n\n\n\n\nTransition\n\n\nscene\n.\nscene\n.\ntransition\n({\n\n    \ntarget\n:\n \nnextSceneClass\n,\n   \n// the Scene key to transition to\n\n    \n// data: null,            // an object containing any data you wish to be passed to the target scenes init / create methods.\n\n    \n// moveAbove: false,      // move the target Scene to be above this current scene before the transition starts\n\n    \n// moveBelow: false,      // move the target Scene to be below this current scene before the transition starts\n\n\n    \nduration\n:\n \n1000\n,\n           \n// the duration, in ms\n\n\n    \n// sleep: false,          // set true to sleep this scene, set false to stop this scene\n\n    \n// allowInput: false,     // set true to enable input system of current scene and target scene\n\n\n    \n// onUpdate: null,\n\n    \n// onUpdateScope: scene\n\n\n})\n\n\n\n\n\nEvents\n\n\n\n\nboot\n    \nscene\n.\nevents\n.\non\n(\ntransitioninit\n,\n \nfunction\n(\nfromScene\n,\n \nduration\n)){});\n\n\n\n\nstart\n    \nscene\n.\nevents\n.\non\n(\ntransitionstart\n,\n \nfunction\n(\nfromScene\n,\n \nduration\n){});\n\n\n\n\ntransition-out\n    \nscene\n.\nevents\n.\non\n(\ntransitionout\n,\n \nfunction\n(\ntargetScene\n){});\n\n\n\n\ncomplete\n    \nscene\n.\nevents\n.\non\n(\ntransitioncomplete\n,\n \nfunction\n(\nscene\n){});\n\n\n\n\nwake : wake-up target scene if it was previously asleep\n    \nscene\n.\nevents\n.\non\n(\ntransitionwake\n,\n \nfunction\n(\nfromScene\n,\n \nduration\n){});", 
            "title": "Scene manager"
        }, 
        {
            "location": "/scenemanager/index.html#add-new-scene", 
            "text": "scene . scene . add ( key ,   sceneConfig ,   autoStart );  // game.scene.add(key, sceneConfig, autoStart);", 
            "title": "Add new scene"
        }, 
        {
            "location": "/scenemanager/index.html#load-scene-from-external-files", 
            "text": "load script \n     scene . load . script ( key ,   url );     add new scene\n     scene . scene . add ( key ,   sceneConfig ,   autoStart );  // game.scene.add(key, sceneConfig, autoStart);", 
            "title": "Load scene from external files"
        }, 
        {
            "location": "/scenemanager/index.html#remove-scene", 
            "text": "scene . scene . remove ( key );", 
            "title": "Remove scene"
        }, 
        {
            "location": "/scenemanager/index.html#start-scene", 
            "text": "Launch the given Scene and run it in parallel with this one.  scene . scene . launch ( key ,   data );   Shutdown this Scene and run the given one.  scene . scene . start ( key ,   data );   Restarts this Scene.  scene . scene . restart ( data );", 
            "title": "Start scene"
        }, 
        {
            "location": "/scenemanager/index.html#pauseresume-scene", 
            "text": "Pause : stops the update step but still renders.  scene . scene . pause ( key );  // scene.scene.pause();  // pause myself   Resume : starts the update loop again.  scene . scene . resume ( key );  // scene.scene.resume();  // resume myself   Sleep : no update, no render but doesn't shutdown.  scene . scene . sleep ( key );  // scene.scene.sleep();  // sleep myself   Wake-up: starts update and render  scene . scene . wake ( key );  // scene.scene.wake();  // wake-up myself   Makes this Scene sleep then starts the Scene given.  scene . scene . switch ( key );", 
            "title": "Pause/Resume scene"
        }, 
        {
            "location": "/scenemanager/index.html#read-status", 
            "text": "var   isSleep   =   scene . scene . isSleeping ( key );  // var isSleep = scene.scene.isSleeping();   var   isActive   =   scene . scene . isActive ( key );  // var isActive = scene.scene.isActive();   var   isVisible   =   scene . scene . isVisible ( key );  // var isVisible = scene.scene.isVisible();", 
            "title": "Read status"
        }, 
        {
            "location": "/scenemanager/index.html#stop-scene", 
            "text": "Stop : shutdown the Scene, clearing display list, timers, etc.  scene . scene . stop ( key );  // scene.scene.stop();  // stop myself", 
            "title": "Stop scene"
        }, 
        {
            "location": "/scenemanager/index.html#get-scene", 
            "text": "var   scene   =   scene . scene . get ( key );", 
            "title": "Get scene"
        }, 
        {
            "location": "/scenemanager/index.html#order-of-scenes", 
            "text": "Swaps the position of two scenes in the Scenes list.  scene . scene . swapPosition ( keyA ,   keyB );  // scene.scene.stop(keyA);   scene . scene . moveAbove ( keyA ,   keyB );  // scene.scene.moveAbove(keyA);   Scene B is directly above Scene A.  scene . scene . moveBelow ( keyA ,   keyB );  // scene.scene.moveBelow(keyA);   Scene B is directly below Scene A.  scene . scene . moveUp ( keyA );  // scene.scene.moveBelow();   scene . scene . moveDown ( keyA );  // scene.scene.moveDown();   scene . scene . bringToTop ( keyA );  // scene.scene.bringToTop();   scene . scene . sendToBack ( keyA );  // scene.scene.sendToBack();", 
            "title": "Order of scenes"
        }, 
        {
            "location": "/scenemanager/index.html#transition", 
            "text": "scene . scene . transition ({ \n     target :   nextSceneClass ,     // the Scene key to transition to \n     // data: null,            // an object containing any data you wish to be passed to the target scenes init / create methods. \n     // moveAbove: false,      // move the target Scene to be above this current scene before the transition starts \n     // moveBelow: false,      // move the target Scene to be below this current scene before the transition starts \n\n     duration :   1000 ,             // the duration, in ms \n\n     // sleep: false,          // set true to sleep this scene, set false to stop this scene \n     // allowInput: false,     // set true to enable input system of current scene and target scene \n\n     // onUpdate: null, \n     // onUpdateScope: scene  })", 
            "title": "Transition"
        }, 
        {
            "location": "/scenemanager/index.html#events", 
            "text": "boot\n     scene . events . on ( transitioninit ,   function ( fromScene ,   duration )){});   start\n     scene . events . on ( transitionstart ,   function ( fromScene ,   duration ){});   transition-out\n     scene . events . on ( transitionout ,   function ( targetScene ){});   complete\n     scene . events . on ( transitioncomplete ,   function ( scene ){});   wake : wake-up target scene if it was previously asleep\n     scene . events . on ( transitionwake ,   function ( fromScene ,   duration ){});", 
            "title": "Events"
        }, 
        {
            "location": "/scene/index.html", 
            "text": "Define a scene\n\n\nES6 class\n\n\nclass\n \nMyScene\n \nextends\n \nPhaser\n.\nScene\n \n{\n\n\n    \nconstructor\n \n(\nconfig\n)\n\n    \n{\n\n        \nsuper\n(\nconfig\n);\n\n    \n}\n\n\n    \npreload\n \n()\n \n{}\n\n    \ncreate\n \n()\n  \n{}\n\n    \nupdate\n(\ntime\n,\n \ndelta\n)\n \n{}\n\n\n\n}\n\n\n\n\n\nClass\n\n\nvar\n \nMyScene\n \n=\n \nnew\n \nPhaser\n.\nClass\n({\n\n\n    \nExtends\n:\n \nPhaser\n.\nScene\n,\n\n\n    \ninitialize\n:\n\n\n    \nfunction\n \nMyScene\n \n(\nconfig\n)\n\n    \n{\n\n        \nPhaser\n.\nScene\n.\ncall\n(\nthis\n,\n \nconfig\n)\n\n    \n},\n\n\n    \npreload\n:\n \nfunction\n \n()\n \n{},\n\n    \ncreate\n:\n \nfunction\n \n()\n \n{},\n\n    \nupdate\n:\n \nfunction\n \n(\ntime\n,\n \ndelta\n)\n \n{}\n\n\n});\n\n\n\n\n\nvar\n \nMyGame\n \n=\n \n{};\n\n\n\nMyGame\n.\nBoot\n \n=\n \nfunction\n \n()\n\n\n{\n\n\n};\n\n\n\nMyGame\n.\nBoot\n.\nprototype\n.\nconstructor\n \n=\n \nMyGame\n.\nBoot\n;\n\n\n\nMyGame\n.\nBoot\n.\nprototype\n \n=\n \n{\n\n    \npreload\n:\n \nfunction\n \n()\n \n{},\n\n    \ncreate\n:\n \nfunction\n \n()\n \n{},\n\n    \nupdate\n:\n \nfunction\n \n(\ntime\n,\n \ndelta\n)\n \n{}\n\n\n};\n\n\n\n\n\nOverwrite\n\n\nvar\n \ndemo\n \n=\n \nnew\n \nPhaser\n.\nScene\n(\nDemo\n);\n\n\n\ndemo\n.\npreload\n \n=\n \nfunction\n \n(){};\n\n\ndemo\n.\ncreate\n \n=\n \nfunction\n \n(){};\n\n\ndemo\n.\nupdate\n \n=\n \nfunction\n \n(){};\n\n\n\n\n\nMembers\n\n\n\n\nsys\n\n\ngame\n\n\nanims\n\n\ncache\n\n\nregistry\n\n\nsound\n\n\ntextures\n\n\nevents\n\n\ncameras\n\n\ncameras3d\n\n\nadd\n\n\nmake\n\n\nscene\n : scenePlugin\n\n\nchildren\n : displayList\n\n\nlights\n\n\ndata\n\n\ninput\n\n\nload\n\n\ntime\n\n\ntweens\n\n\nphysics\n : arcadePhysics\n\n\nplugins\n\n\nimpact\n : impactPhysics\n\n\nmatter\n :\u3000matterPhysics\n\n\n\n\nPreserve word in a scene.\n\n\nEvents\n\n\n\n\n\n\nstart\n    \nscene\n.\nevents\n.\non\n(\nstart\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\ndestroy\n    \nscene\n.\nevents\n.\non\n(\ndestroy\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\npreupdate\n    \nscene\n.\nevents\n.\non\n(\npreupdate\n,\n \nfunction\n(\ntime\n,\n \ndelta\n){});\n\n\n\n\n\n\n\n\nupdate\n    \nscene\n.\nevents\n.\non\n(\nupdate\n,\n \nfunction\n(\ntime\n,\n \ndelta\n){});\n\n\n\n\n\n\n\n\npostupdate\n    \nscene\n.\nevents\n.\non\n(\npostupdate\n,\n \nfunction\n(\ntime\n,\n \ndelta\n){});\n\n\n\n\n\n\n\n\nrender\n    \nscene\n.\nevents\n.\non\n(\nrender\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\npause\n    \nscene\n.\nevents\n.\non\n(\npause\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\nresume\n    \nscene\n.\nevents\n.\non\n(\nresume\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\nsleep\n    \nscene\n.\nevents\n.\non\n(\nsleep\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\nwake\n    \nscene\n.\nevents\n.\non\n(\nwake\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\nresize\n    \nscene\n.\nevents\n.\non\n(\nresize\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\nboot\n    \nscene\n.\nevents\n.\non\n(\nboot\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\nshutdown\n    \nscene\n.\nevents\n.\non\n(\nshutdown\n,\n \nfunction\n(){});", 
            "title": "Scene"
        }, 
        {
            "location": "/scene/index.html#define-a-scene", 
            "text": "", 
            "title": "Define a scene"
        }, 
        {
            "location": "/scene/index.html#es6-class", 
            "text": "class   MyScene   extends   Phaser . Scene   { \n\n     constructor   ( config ) \n     { \n         super ( config ); \n     } \n\n     preload   ()   {} \n     create   ()    {} \n     update ( time ,   delta )   {}  }", 
            "title": "ES6 class"
        }, 
        {
            "location": "/scene/index.html#class", 
            "text": "var   MyScene   =   new   Phaser . Class ({ \n\n     Extends :   Phaser . Scene , \n\n     initialize : \n\n     function   MyScene   ( config ) \n     { \n         Phaser . Scene . call ( this ,   config ) \n     }, \n\n     preload :   function   ()   {}, \n     create :   function   ()   {}, \n     update :   function   ( time ,   delta )   {}  });   var   MyGame   =   {};  MyGame . Boot   =   function   ()  {  };  MyGame . Boot . prototype . constructor   =   MyGame . Boot ;  MyGame . Boot . prototype   =   { \n     preload :   function   ()   {}, \n     create :   function   ()   {}, \n     update :   function   ( time ,   delta )   {}  };", 
            "title": "Class"
        }, 
        {
            "location": "/scene/index.html#overwrite", 
            "text": "var   demo   =   new   Phaser . Scene ( Demo );  demo . preload   =   function   (){};  demo . create   =   function   (){};  demo . update   =   function   (){};", 
            "title": "Overwrite"
        }, 
        {
            "location": "/scene/index.html#members", 
            "text": "sys  game  anims  cache  registry  sound  textures  events  cameras  cameras3d  add  make  scene  : scenePlugin  children  : displayList  lights  data  input  load  time  tweens  physics  : arcadePhysics  plugins  impact  : impactPhysics  matter  :\u3000matterPhysics   Preserve word in a scene.", 
            "title": "Members"
        }, 
        {
            "location": "/scene/index.html#events", 
            "text": "start\n     scene . events . on ( start ,   function (){});     destroy\n     scene . events . on ( destroy ,   function (){});     preupdate\n     scene . events . on ( preupdate ,   function ( time ,   delta ){});     update\n     scene . events . on ( update ,   function ( time ,   delta ){});     postupdate\n     scene . events . on ( postupdate ,   function ( time ,   delta ){});     render\n     scene . events . on ( render ,   function (){});     pause\n     scene . events . on ( pause ,   function (){});     resume\n     scene . events . on ( resume ,   function (){});     sleep\n     scene . events . on ( sleep ,   function (){});     wake\n     scene . events . on ( wake ,   function (){});     resize\n     scene . events . on ( resize ,   function (){});     boot\n     scene . events . on ( boot ,   function (){});     shutdown\n     scene . events . on ( shutdown ,   function (){});", 
            "title": "Events"
        }, 
        {
            "location": "/input/index.html", 
            "text": "Introduction\n\n\nInput system of each scene, built-in object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nEnable/disable\n\n\nscene\n.\ninput\n.\nenabled\n \n=\n \nenabled\n;\n \n// enabled: true/false", 
            "title": "Input"
        }, 
        {
            "location": "/input/index.html#introduction", 
            "text": "Input system of each scene, built-in object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/input/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/input/index.html#enabledisable", 
            "text": "scene . input . enabled   =   enabled ;   // enabled: true/false", 
            "title": "Enable/disable"
        }, 
        {
            "location": "/touchevents/index.html", 
            "text": "Introduction\n\n\nBuilt-in touch/mouse events of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nMouse/touch events\n\n\nscene\n.\ninput\n.\non\n(\npointerdown\n,\n \nfunction\n(\npointer\n,\n \ncurrentlyOver\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\npointerup\n,\n \nfunction\n(\npointer\n,\n \ncurrentlyOver\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\npointermove\n,\n \nfunction\n(\npointer\n,\n \ncurrentlyOver\n){\n \n/* ... */\n \n});\n\n\n\nscene\n.\ninput\n.\non\n(\npointerover\n,\n \nfunction\n(\npointer\n,\n \njustOver\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\npointerout\n,\n \nfunction\n(\npointer\n,\n \njustOut\n){\n \n/* ... */\n \n});\n\n\n\n\n\nActive pointer\n\n\nvar\n \npointer\n \n=\n \nscene\n.\ninput\n.\nactivePointer\n;\n\n\n// var x = pointer.x;\n\n\n// var y = pointer.y;\n\n\n\n\n\nCurrently just 1 pointer supported.\n\n\nMouse/touch events of game object\n\n\n\n\nRegister game object\n\n\n\n\ngameObject\n.\nsetInteractive\n();\n       \n// enable\n\n\n// gameObject.setInteractive(false);  // disable\n\n\n\n\n\n\n\nMouse/touch events of a game object\n\n\n\n\ngameObject\n.\non\n(\npointerdown\n,\n \nfunction\n(\npointer\n,\n \nlocalX\n,\n \nlocalY\n,\n \ncamera\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\npointerup\n,\n \nfunction\n(\npointer\n,\n \nlocalX\n,\n \nlocalY\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\npointermove\n,\n \nfunction\n(\npointer\n,\n \nlocalX\n,\n \nlocalY\n){\n \n/* ... */\n \n});\n\n\n\ngameObject\n.\non\n(\npointerover\n,\n \nfunction\n(\npointer\n,\n \nlocalX\n,\n \nlocalY\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\npointerout\n,\n \nfunction\n(\npointer\n){\n \n/* ... */\n \n});\n\n\n\n\n\nscene\n.\ninput\n.\non\n(\ngameobjectdown\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ngameobjectup\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ngameobjectmove\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\n\nscene\n.\ninput\n.\non\n(\ngameobjectover\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ngameobjectout\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\n\n\n\nDrag events\n\n\n\n\nRegister game object and enable dragging\n\n\n\n\ngameObject\n.\nsetInteractive\n();\n           \n// enable touching interactive\n\n\nscene\n.\ninput\n.\nsetDraggable\n(\ngameObject\n);\n  \n// enable dragging\n\n\n// scene.input.dragDistanceThreshold = 16;\n\n\n// scene.input.dragTimeThreshold = 500;\n\n\n\n// gameObject.setInteractive(false);             // disable\n\n\n// scene.input.setDraggable(gameObject, false);  // disable dragging\n\n\n\n\n\ngameObject\n.\non\n(\ndragstart\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\ndrag\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\ndragend\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n,\n \ndropped\n){\n \n/* ... */\n \n});\n\n\n\n\n\nscene\n.\ninput\n.\non\n(\ndragstart\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ndrag\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ndragX\n,\n \ndragY\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ndragend\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ndropped\n){\n \n/* ... */\n \n});\n\n\n\n\n\nDrop events\n\n\ngameObject\n.\non\n(\ndrop\n,\n \nfunction\n(\npointer\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\n\ngameObject\n.\non\n(\ndragenter\n,\n \nfunction\n(\npointer\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\ndragover\n,\n \nfunction\n(\npointer\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\ngameObject\n.\non\n(\ndragleave\n,\n \nfunction\n(\npointer\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\n\n\n\nscene\n.\ninput\n.\non\n(\ndrop\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\n\nscene\n.\ninput\n.\non\n(\ndragenter\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ndragover\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\nscene\n.\ninput\n.\non\n(\ndragleave\n,\n \nfunction\n(\npointer\n,\n \ngameObject\n,\n \ntarget\n){\n \n/* ... */\n \n});\n\n\n\n\n\nProperties of point\n\n\n\n\nPosition of current touching: \npointer.x\n , \npointer.y\n\n\nPosition of touching start: \npointer.downX\n, \npointer.downY\n\n\nPosition of touching end: \npointer.upX\n, \npointer.upY\n\n\nNo botton down: \npointer.noButtonDown()\n\n\nIs left botton down: \npointer.leftButtonDown()\n\n\nIs right botton down: \npointer.rightButtonDown()", 
            "title": "Touch events"
        }, 
        {
            "location": "/touchevents/index.html#introduction", 
            "text": "Built-in touch/mouse events of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/touchevents/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/touchevents/index.html#mousetouch-events", 
            "text": "scene . input . on ( pointerdown ,   function ( pointer ,   currentlyOver ){   /* ... */   });  scene . input . on ( pointerup ,   function ( pointer ,   currentlyOver ){   /* ... */   });  scene . input . on ( pointermove ,   function ( pointer ,   currentlyOver ){   /* ... */   });  scene . input . on ( pointerover ,   function ( pointer ,   justOver ){   /* ... */   });  scene . input . on ( pointerout ,   function ( pointer ,   justOut ){   /* ... */   });", 
            "title": "Mouse/touch events"
        }, 
        {
            "location": "/touchevents/index.html#active-pointer", 
            "text": "var   pointer   =   scene . input . activePointer ;  // var x = pointer.x;  // var y = pointer.y;   Currently just 1 pointer supported.", 
            "title": "Active pointer"
        }, 
        {
            "location": "/touchevents/index.html#mousetouch-events-of-game-object", 
            "text": "Register game object   gameObject . setInteractive ();         // enable  // gameObject.setInteractive(false);  // disable    Mouse/touch events of a game object   gameObject . on ( pointerdown ,   function ( pointer ,   localX ,   localY ,   camera ){   /* ... */   });  gameObject . on ( pointerup ,   function ( pointer ,   localX ,   localY ){   /* ... */   });  gameObject . on ( pointermove ,   function ( pointer ,   localX ,   localY ){   /* ... */   });  gameObject . on ( pointerover ,   function ( pointer ,   localX ,   localY ){   /* ... */   });  gameObject . on ( pointerout ,   function ( pointer ){   /* ... */   });   scene . input . on ( gameobjectdown ,   function ( pointer ,   gameObject ){   /* ... */   });  scene . input . on ( gameobjectup ,   function ( pointer ,   gameObject ){   /* ... */   });  scene . input . on ( gameobjectmove ,   function ( pointer ,   gameObject ){   /* ... */   });  scene . input . on ( gameobjectover ,   function ( pointer ,   gameObject ){   /* ... */   });  scene . input . on ( gameobjectout ,   function ( pointer ,   gameObject ){   /* ... */   });", 
            "title": "Mouse/touch events of game object"
        }, 
        {
            "location": "/touchevents/index.html#drag-events", 
            "text": "Register game object and enable dragging   gameObject . setInteractive ();             // enable touching interactive  scene . input . setDraggable ( gameObject );    // enable dragging  // scene.input.dragDistanceThreshold = 16;  // scene.input.dragTimeThreshold = 500;  // gameObject.setInteractive(false);             // disable  // scene.input.setDraggable(gameObject, false);  // disable dragging   gameObject . on ( dragstart ,   function ( pointer ,   dragX ,   dragY ){   /* ... */   });  gameObject . on ( drag ,   function ( pointer ,   dragX ,   dragY ){   /* ... */   });  gameObject . on ( dragend ,   function ( pointer ,   dragX ,   dragY ,   dropped ){   /* ... */   });   scene . input . on ( dragstart ,   function ( pointer ,   gameObject ){   /* ... */   });  scene . input . on ( drag ,   function ( pointer ,   gameObject ,   dragX ,   dragY ){   /* ... */   });  scene . input . on ( dragend ,   function ( pointer ,   gameObject ,   dropped ){   /* ... */   });", 
            "title": "Drag events"
        }, 
        {
            "location": "/touchevents/index.html#drop-events", 
            "text": "gameObject . on ( drop ,   function ( pointer ,   target ){   /* ... */   });  gameObject . on ( dragenter ,   function ( pointer ,   target ){   /* ... */   });  gameObject . on ( dragover ,   function ( pointer ,   target ){   /* ... */   });  gameObject . on ( dragleave ,   function ( pointer ,   target ){   /* ... */   });   scene . input . on ( drop ,   function ( pointer ,   gameObject ,   target ){   /* ... */   });  scene . input . on ( dragenter ,   function ( pointer ,   gameObject ,   target ){   /* ... */   });  scene . input . on ( dragover ,   function ( pointer ,   gameObject ,   target ){   /* ... */   });  scene . input . on ( dragleave ,   function ( pointer ,   gameObject ,   target ){   /* ... */   });", 
            "title": "Drop events"
        }, 
        {
            "location": "/touchevents/index.html#properties-of-point", 
            "text": "Position of current touching:  pointer.x  ,  pointer.y  Position of touching start:  pointer.downX ,  pointer.downY  Position of touching end:  pointer.upX ,  pointer.upY  No botton down:  pointer.noButtonDown()  Is left botton down:  pointer.leftButtonDown()  Is right botton down:  pointer.rightButtonDown()", 
            "title": "Properties of point"
        }, 
        {
            "location": "/keyboardevents/index.html", 
            "text": "Introduction\n\n\nBuilt-in keyboard events of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nAny key down/up events\n\n\nscene\n.\ninput\n.\nkeyboard\n.\non\n(\nkeydown\n,\n \nfunction\n \n(\nevent\n)\n \n{\n \n/* ... */\n});\n\n\nscene\n.\ninput\n.\nkeyboard\n.\non\n(\nkeyup\n,\n \nfunction\n \n(\nevent\n)\n \n{\n \n/* ... */\n});\n\n\n\n\n\nSpecific key down/up events\n\n\nscene\n.\ninput\n.\nkeyboard\n.\non\n(\nkeydown_\n \n+\n \nA\n,\n \nfunction\n \n(\nevent\n)\n \n{\n \n/* ... */\n});\n\n\nscene\n.\ninput\n.\nkeyboard\n.\non\n(\nkeyup_\n \n+\n \nA\n,\n \nfunction\n \n(\nevent\n)\n \n{\n \n/* ... */\n});\n\n\n\n\n\nGet state of specific key\n\n\n\n\nGet key state object\n\n\n\n\nvar\n \nBKey\n \n=\n \nscene\n.\ninput\n.\nkeyboard\n.\naddKey\n(\nPhaser\n.\nInput\n.\nKeyboard\n.\nKeyCodes\n.\nB\n);\n\n\n\n\n\n\n\nGet key state\n\n\n\n\nvar\n \nisDown\n \n=\n \nBKey\n.\nisDown\n;\n\n\nvar\n \nisUp\n \n=\n \nBKey\n.\nisUp\n;\n\n\n\n\n\nGet state of cursorkeys\n\n\n\n\nGet key state object\n\n\n\n\nvar\n \ncursorKeys\n \n=\n \nscene\n.\ninput\n.\nkeyboard\n.\ncreateCursorKeys\n();\n\n\n\n\n\n\n\nGet key state\n\n\n\n\nvar\n \nisUpDown\n \n=\n \ncursorKeys\n.\nup\n.\nisDown\n;\n\n\nvar\n \nisDownDown\n \n=\n \ncursorKeys\n.\ndown\n.\nisDown\n;\n\n\nvar\n \nisLeftDown\n \n=\n \ncursorKeys\n.\nleft\n.\nisDown\n;\n\n\nvar\n \nisRightDown\n \n=\n \ncursorKeys\n.\nright\n.\nisDown\n;\n\n\nvar\n \nisSpaceDown\n \n=\n \ncursorKeys\n.\nspace\n.\nisDown\n;\n\n\nvar\n \nisShiftDown\n \n=\n \ncursorKeys\n.\nshift\n.\nisDown\n;\n\n\n\n\n\nKey map\n\n\n\n\nA\n ~ \nZ\n\n\nF1\n ~ \nF12\n\n\nBACKSPACE\n\n\nTAB\n\n\nENTER\n\n\nSHIFT\n\n\nCTRL\n. \nALT\n\n\nPAUSE\n\n\nCAPS_LOCK\n\n\nESC\n\n\nSPACE\n\n\nPAGE_UP\n, \nPAGE_DOWN\n\n\nEND\n, \nHOME\n\n\nLEFT\n, \nUP\n, \nRIGHT\n,\nDOWN\n\n\nPRINT_SCREEN\n\n\nINSERT\n, \nDELETE\n\n\nZERO\n, \nONE\n, \nTWO\n, \nTHREE\n, \nFOUR\n, \nFIVE\n, \nSIX\n, \nSEVEN\n, \nEIGHT\n, \nNINE\n\n\nOPEN_BRACKET\n, \nCLOSED_BRACKET", 
            "title": "Keyboard events"
        }, 
        {
            "location": "/keyboardevents/index.html#introduction", 
            "text": "Built-in keyboard events of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/keyboardevents/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/keyboardevents/index.html#any-key-downup-events", 
            "text": "scene . input . keyboard . on ( keydown ,   function   ( event )   {   /* ... */ });  scene . input . keyboard . on ( keyup ,   function   ( event )   {   /* ... */ });", 
            "title": "Any key down/up events"
        }, 
        {
            "location": "/keyboardevents/index.html#specific-key-downup-events", 
            "text": "scene . input . keyboard . on ( keydown_   +   A ,   function   ( event )   {   /* ... */ });  scene . input . keyboard . on ( keyup_   +   A ,   function   ( event )   {   /* ... */ });", 
            "title": "Specific key down/up events"
        }, 
        {
            "location": "/keyboardevents/index.html#get-state-of-specific-key", 
            "text": "Get key state object   var   BKey   =   scene . input . keyboard . addKey ( Phaser . Input . Keyboard . KeyCodes . B );    Get key state   var   isDown   =   BKey . isDown ;  var   isUp   =   BKey . isUp ;", 
            "title": "Get state of specific key"
        }, 
        {
            "location": "/keyboardevents/index.html#get-state-of-cursorkeys", 
            "text": "Get key state object   var   cursorKeys   =   scene . input . keyboard . createCursorKeys ();    Get key state   var   isUpDown   =   cursorKeys . up . isDown ;  var   isDownDown   =   cursorKeys . down . isDown ;  var   isLeftDown   =   cursorKeys . left . isDown ;  var   isRightDown   =   cursorKeys . right . isDown ;  var   isSpaceDown   =   cursorKeys . space . isDown ;  var   isShiftDown   =   cursorKeys . shift . isDown ;", 
            "title": "Get state of cursorkeys"
        }, 
        {
            "location": "/keyboardevents/index.html#key-map", 
            "text": "A  ~  Z  F1  ~  F12  BACKSPACE  TAB  ENTER  SHIFT  CTRL .  ALT  PAUSE  CAPS_LOCK  ESC  SPACE  PAGE_UP ,  PAGE_DOWN  END ,  HOME  LEFT ,  UP ,  RIGHT , DOWN  PRINT_SCREEN  INSERT ,  DELETE  ZERO ,  ONE ,  TWO ,  THREE ,  FOUR ,  FIVE ,  SIX ,  SEVEN ,  EIGHT ,  NINE  OPEN_BRACKET ,  CLOSED_BRACKET", 
            "title": "Key map"
        }, 
        {
            "location": "/drag/index.html", 
            "text": "Introduction\n\n\nDrag game object.\n\n\n\n\nAuthor: Rex\n\n\nMember of game object\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nrexDrag\n \nfrom\n \n./plugins/drag.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nDragPlugin\n \nfrom\n \n./plugins/drag-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexDrag\n,\n\n            \nplugin\n:\n \nDragPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate instance\n\n\ngameobject\n.\ndrag\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexDrag\n).\nadd\n(\ngameobject\n,\n \n{\n\n    \n//enable: true,\n\n    \n//axis: 0,      //0|\nboth\n|\nh\nv\n|1|\nhorizontal\n|\nh\n|2|\nvertical\n|\nv\n\n    \n//rotation: Phaser.Math.DegToRad(45)  // axis rotation in rad\n\n\n});\n\n\n\n\n\nProperties\n\n\n\n\nenable: drag-able\n\n\naxis : \n\n\n'both'\n,\n'h\nv'\n, or \n0\n : dragging on all directions.\n\n\n'horizontal'\n,\n'h'\n, or \n1\n : dragging on horizontal axis.\n\n\n'vertical'\n,\n'v'\n, or \n2\n : dragging on vertical axis.\n\n\n\n\n\n\nrotation : axis rotation in rad, available in horizontal or vertical axis mode.\n\n\n\n\nDragging events\n\n\nBuilt-in dragging events\n\n\ngameobject\n.\non\n(\ndragstart\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n){\n \n/*...*/\n \n});\n\n\ngameobject\n.\non\n(\ndrag\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n){\n \n/*...*/\n \n});\n\n\ngameobject\n.\non\n(\ndragend\n,\n \nfunction\n(\npointer\n,\n \ndragX\n,\n \ndragY\n,\n \ndropped\n){\n \n/*...*/\n \n});\n\n\n\n\n\nGet dragging state\n\n\nvar\n \nisDragging\n \n=\n \ngameobject\n.\ndrag\n.\nisDragging\n;\n\n\n\n\n\nSet rotation of axis\n\n\ngameobject\n.\ndrag\n.\nsetAxisRotation\n(\nrad\n);\n\n\n\n\n\nSet axis mode\n\n\ngameobject\n.\ndrag\n.\nsetAxisMode\n(\nm\n);\n  \n//0|\nboth\n|\nh\nv\n|1|\nhorizontal\n|\nh\n|2|\nvertical\n|\nv\n\n\n\n\n\nTry drag\n\n\nSample code\n\n\nGame object will be dragged if there is any point above it.\n\n\ngameobject\n.\ndrag\n.\ndrag\n();\n\n\n\n\n\nDrop\n\n\nSample code\n\n\nGame object will be dropped(dragend) manually.\n\n\ngameobject\n.\ndrag\n.\ndragend\n();", 
            "title": "Drag"
        }, 
        {
            "location": "/drag/index.html#introduction", 
            "text": "Drag game object.   Author: Rex  Member of game object", 
            "title": "Introduction"
        }, 
        {
            "location": "/drag/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/drag/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/drag/index.html#import-class", 
            "text": "import   rexDrag   from   ./plugins/drag.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/drag/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   DragPlugin   from   ./plugins/drag-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexDrag , \n             plugin :   DragPlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/drag/index.html#create-instance", 
            "text": "gameobject . drag   =   scene . plugins . get ( rexDrag ). add ( gameobject ,   { \n     //enable: true, \n     //axis: 0,      //0| both | h v |1| horizontal | h |2| vertical | v \n     //rotation: Phaser.Math.DegToRad(45)  // axis rotation in rad  });   Properties   enable: drag-able  axis :   'both' , 'h v' , or  0  : dragging on all directions.  'horizontal' , 'h' , or  1  : dragging on horizontal axis.  'vertical' , 'v' , or  2  : dragging on vertical axis.    rotation : axis rotation in rad, available in horizontal or vertical axis mode.", 
            "title": "Create instance"
        }, 
        {
            "location": "/drag/index.html#dragging-events", 
            "text": "Built-in dragging events  gameobject . on ( dragstart ,   function ( pointer ,   dragX ,   dragY ){   /*...*/   });  gameobject . on ( drag ,   function ( pointer ,   dragX ,   dragY ){   /*...*/   });  gameobject . on ( dragend ,   function ( pointer ,   dragX ,   dragY ,   dropped ){   /*...*/   });", 
            "title": "Dragging events"
        }, 
        {
            "location": "/drag/index.html#get-dragging-state", 
            "text": "var   isDragging   =   gameobject . drag . isDragging ;", 
            "title": "Get dragging state"
        }, 
        {
            "location": "/drag/index.html#set-rotation-of-axis", 
            "text": "gameobject . drag . setAxisRotation ( rad );", 
            "title": "Set rotation of axis"
        }, 
        {
            "location": "/drag/index.html#set-axis-mode", 
            "text": "gameobject . drag . setAxisMode ( m );    //0| both | h v |1| horizontal | h |2| vertical | v", 
            "title": "Set axis mode"
        }, 
        {
            "location": "/drag/index.html#try-drag", 
            "text": "Sample code  Game object will be dragged if there is any point above it.  gameobject . drag . drag ();", 
            "title": "Try drag"
        }, 
        {
            "location": "/drag/index.html#drop", 
            "text": "Sample code  Game object will be dropped(dragend) manually.  gameobject . drag . dragend ();", 
            "title": "Drop"
        }, 
        {
            "location": "/dragcursor/index.html", 
            "text": "Introduction\n\n\nSimulate curosr keys according dragging events.\n\n\n\n\nAuthor: Rex\n\n\nMember of scene\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nCreate instance\n\n\nvar\n \ndragCursor\n \n=\n \nnew\n \nDragCursorPlugin\n(\nscene\n,\n \n{\n\n    \ndir\n:\n \n8dir\n,\n    \n// 0|\nup\ndown\n|1|\nleft\nright|2|\n4dir\n|3|\n8dir\n\n    \ndistanceMin\n:\n \n30\n        \n\n});\n\n\n\n\n\nProperties\n\n\n\n\nmode : \n\n\n'up\ndown'\n, or \n0\n : simulate up or down cursor keys only.\n\n\n'left\nright'\n, or \n1\n : simulate left or right cursor keys only.\n\n\n'4dir'\n, or \n2\n : simulate up, down, left or right cursor keys.\n\n\n'8dir'\n, or \n3\n : simulate up, up-left, up-right, down, down-left, down-right, left, or right cursor keys.\n\n\n\n\n\n\ndistanceMin : cursor keys will be pressed when dragging distance is larger then this value.\n\n\n\n\nGet state of cursor keys\n\n\nvar\n \ncursorKeys\n \n=\n \ndragCursor\n.\ncreateCursorKeys\n();\n\n\n\nvar\n \nisLeftKeyDown\n \n=\n \ncursorKeys\n.\nleft\n.\nisDown\n;\n\n\nvar\n \nisRightKeyDown\n \n=\n \ncursorKeys\n.\nright\n.\nisDown\n;\n\n\nvar\n \nisUpKeyDown\n \n=\n \ncursorKeys\n.\nup\n.\nisDown\n;\n\n\nvar\n \nisDownKeyDown\n \n=\n \ncursorKeys\n.\ndown\n.\nisDown\n;\n\n\n\n\n\nGet dragging point\n\n\nvar\n \ndragStartX\n \n=\n \ndragCursor\n.\nstart\n.\nx\n;\n\n\nvar\n \ndragStartY\n \n=\n \ndragCursor\n.\nstart\n.\ny\n;\n\n\nvar\n \ndragEndX\n \n=\n \ndragCursor\n.\nend\n.\nx\n;\n\n\nvar\n \ndragEndY\n \n=\n \ndragCursor\n.\nend\n.\ny\n;\n\n\n\n\n\nAssign origin point\n\n\nOrigin point is the dragging start point, or assign origin point when creating instance.\n\n\nvar\n \ndragCursor\n \n=\n \nnew\n \nDragCursorPlugin\n(\nscene\n,\n \n{\n\n    \n// ...\n\n    \norigin\n:\n \n{\n       \n// assign origin point to (400,300)\n\n        \nx\n:\n \n400\n,\n\n        \ny\n:\n \n300\n\n    \n}\n\n\n});\n\n\n\n\n\nOr assign origin point by \nsetOrigin(x, y)\n function.\n\n\ndragCursor\n.\nsetOrigin\n(\n400\n,\n \n300\n);\n  \n// assign origin point to (400,300)", 
            "title": "Drag to cursorKeys"
        }, 
        {
            "location": "/dragcursor/index.html#introduction", 
            "text": "Simulate curosr keys according dragging events.   Author: Rex  Member of scene", 
            "title": "Introduction"
        }, 
        {
            "location": "/dragcursor/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/dragcursor/index.html#usage", 
            "text": "Sample code", 
            "title": "Usage"
        }, 
        {
            "location": "/dragcursor/index.html#create-instance", 
            "text": "var   dragCursor   =   new   DragCursorPlugin ( scene ,   { \n     dir :   8dir ,      // 0| up down |1| left right|2| 4dir |3| 8dir \n     distanceMin :   30          });   Properties   mode :   'up down' , or  0  : simulate up or down cursor keys only.  'left right' , or  1  : simulate left or right cursor keys only.  '4dir' , or  2  : simulate up, down, left or right cursor keys.  '8dir' , or  3  : simulate up, up-left, up-right, down, down-left, down-right, left, or right cursor keys.    distanceMin : cursor keys will be pressed when dragging distance is larger then this value.", 
            "title": "Create instance"
        }, 
        {
            "location": "/dragcursor/index.html#get-state-of-cursor-keys", 
            "text": "var   cursorKeys   =   dragCursor . createCursorKeys ();  var   isLeftKeyDown   =   cursorKeys . left . isDown ;  var   isRightKeyDown   =   cursorKeys . right . isDown ;  var   isUpKeyDown   =   cursorKeys . up . isDown ;  var   isDownKeyDown   =   cursorKeys . down . isDown ;", 
            "title": "Get state of cursor keys"
        }, 
        {
            "location": "/dragcursor/index.html#get-dragging-point", 
            "text": "var   dragStartX   =   dragCursor . start . x ;  var   dragStartY   =   dragCursor . start . y ;  var   dragEndX   =   dragCursor . end . x ;  var   dragEndY   =   dragCursor . end . y ;", 
            "title": "Get dragging point"
        }, 
        {
            "location": "/dragcursor/index.html#assign-origin-point", 
            "text": "Origin point is the dragging start point, or assign origin point when creating instance.  var   dragCursor   =   new   DragCursorPlugin ( scene ,   { \n     // ... \n     origin :   {         // assign origin point to (400,300) \n         x :   400 , \n         y :   300 \n     }  });   Or assign origin point by  setOrigin(x, y)  function.  dragCursor . setOrigin ( 400 ,   300 );    // assign origin point to (400,300)", 
            "title": "Assign origin point"
        }, 
        {
            "location": "/loader/index.html", 
            "text": "Introduction\n\n\nLoad assets, built-in object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nLoading in preload stage\n\n\nscene\n.\nload\n.\nimage\n(\nkey\n,\n \nurl\n);\n\n\n// scene.load.image(config); // config: {key, url}\n\n\n\n\n\nLoader in preload stage will start loading automatically by scene.\n\n\nLoading after preload stage\n\n\nscene\n.\nload\n.\nimage\n(\nkey\n,\n \nurl\n);\n   \n// add task\n\n\n// scene.load.image(config); // config: {key, url}\n\n\nscene\n.\nload\n.\nonce\n(\ncomplete\n,\n \ncallback\n);\n  \n// add callback of \ncomplete\n event\n\n\nscene\n.\nload\n.\nstart\n();\n                     \n// start loading\n\n\n\n\n\nEvents\n\n\n\n\n\n\nStart loading\n\n\nscene\n.\nload\n.\nonce\n(\nstart\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\n\nLoading progressing\n\n\nscene\n.\nload\n.\nonce\n(\nprogress\n,\n \nfunction\n(\nprogress\n){});\n\n\n\n\n\n\n\n\n\nLoading a file object successful\n\n\nscene\n.\nload\n.\nonce\n(\nload\n,\n \nfunction\n(\nfileObj\n){});\n\n\n\n\n\n\n\n\n\nLoading a file object failed\n\n\nscene\n.\nload\n.\nonce\n(\nloaderror\n,\n \nfunction\n(\nfileObj\n){});\n\n\n\n\n\n\n\n\n\nAll loading completed\n\n\nscene\n.\nload\n.\nonce\n(\ncomplete\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\n\n\nStatus of loader\n\n\n\n\n\n\nReady to start loading\n\n\nvar\n \nisReady\n \n=\n \nscene\n.\nload\n.\nisReady\n();\n\n\n\n\n\n\n\n\n\nIs loading\n\n\nvar\n \nisLoading\n \n=\n \nscene\n.\nload\n.\nisLoading\n();\n\n\n\n\n\n\n\n\n\nFile types\n\n\nImage\n\n\nscene\n.\nload\n.\nimage\n(\nkey\n,\n \nurl\n);\n  \n// image\n\n\n// scene.load.image(config); // config: {key, url}\n\n\nscene\n.\nload\n.\nsvg\n(\nkey\n,\n \nurl\n);\n    \n// image in svg format\n\n\nscene\n.\nload\n.\nhtml\n(\nkey\n,\n \nurl\n,\n \nwidth\n,\n \nheight\n);\n  \n// image in html format\n\n\n\n\n\nGet data from texture cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ntextures\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nSprite sheet\n\n\nscene\n.\nload\n.\nspritesheet\n(\nkey\n,\n \nurl\n,\n \n{\n\n    \n// frameWidth: frameWidth,\n\n    \n// frameHeight: frameHeight,\n\n    \n// startFrame: startFrame,\n\n    \n// endFrame: endFrame,\n\n    \n// margin: margin,\n\n    \n// spacing: spacing\n\n\n});\n\n\n\n\n\nGet data from texture cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ntextures\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nTexture atlas\n\n\nscene\n.\nload\n.\natlas\n(\nkey\n,\n \ntextureURL\n,\n \natlasURL\n);\n\n\n\n\n\nGet data from texture cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ntextures\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nMulti file texture atlas\n\n\nscene\n.\nload\n.\nmultiatlas\n(\nkey\n,\n \ntextureURLs\n,\n \natlasURLs\n);\n\n\n\n\n\nUnity texture atlas\n\n\nscene\n.\nload\n.\nunityAtlas\n(\nkey\n,\n \ntextureURL\n,\n \natlasURL\n);\n\n\n\n\n\nAnimation\n\n\nscene\n.\nload\n.\nanimation\n(\nkey\n,\n \nurl\n);\n\n\n\n\n\nAudio\n\n\nscene\n.\nload\n.\naudio\n(\nkey\n,\n \nurls\n);\n\n\n\n\n\nGet data from cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ncache\n.\naudio\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nAudio sprite\n\n\nscene\n.\nload\n.\naudioSprite\n(\nkey\n,\n \nurls\n,\n \njson\n,\n \nconfig\n);\n\n\n\n\n\nBitmap font\n\n\nscene\n.\nload\n.\nbitmapFont\n(\nkey\n,\n \ntextureURL\n,\n \nxmlURL\n);\n\n\n\n\n\nGet data from cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ncache\n.\nbitmapFont\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nTile map\n\n\nscene\n.\nload\n.\ntilemapWeltmeister\n(\nkey\n,\n \nurl\n);\n  \n// JSON\n\n\nscene\n.\nload\n.\ntilemapCSV\n(\nkey\n,\n \nurl\n);\n          \n// CSV\n\n\n\n\n\nGet data from cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ncache\n.\ntilemap\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nText\n\n\nscene\n.\nload\n.\ntext\n(\nkey\n,\n \nurl\n);\n\n\n\n\n\nGet data from cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ncache\n.\ntext\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nJSON\n\n\nscene\n.\nload\n.\njson\n(\nkey\n,\n \nurl\n);\n\n\n\n\n\nGet data from cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ncache\n.\njson\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nXML\n\n\nscene\n.\nload\n.\nxml\n(\nkey\n,\n \nurl\n);\n\n\n\n\n\nGet data from cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ncache\n.\nxml\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nScript\n\n\nscene\n.\nload\n.\nscript\n(\nkey\n,\n \nurl\n);\n\n\n\n\n\nGLSL\n\n\nscene\n.\nload\n.\nglsl\n(\nkey\n,\n \nurl\n);\n\n\n\n\n\nGet data from cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ncache\n.\nshader\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nBinary\n\n\nscene\n.\nload\n.\nbinary\n(\nkey\n,\n \nurl\n,\n \ndataType\n);\n  \n// dataType: Uint8Array\n\n\n// scene.load.binary(config); // config: {key, url, dataType}\n\n\n\n\n\nGet data from cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ncache\n.\nbinary\n;\n\n\nvar\n \ndata\n \n=\n \ncache\n.\nget\n(\nkey\n);\n\n\n\n\n\nPlugin\n\n\nscene\n.\nload\n.\nplugin\n(\nkey\n,\n \nurl\n,\n \ntrue\n);\n \n// start plugin when loaded\n\n\n\n\n\nFile pack\n\n\nLoad files in JSON format.\n\n\nscene\n.\nload\n.\npack\n(\nkey\n,\n \nurl\n,\n \ndataKey\n);\n\n\n\n\n\nJSON pack file:\n\n\n{\n\n    \ndataKey\n:\n \n{\n\n        \n// \nprefix\n: \n...\n,          // optional, extend key by prefix\n\n        \n// \npath\n: \n...\n,            // optional, extend url by path\n\n        \n// \ndefaultType\n: \nimage\n,   // optional, default file type\n\n        \nfiles\n:\n \n[\n \n            \n{\n\n                \ntype\n:\n \nimage\n,\n\n                \nkey\n:\n \n...\n,\n\n                \nurl\n:\n \n...\n\n            \n},\n\n            \n{\n\n                \ntype\n:\n \nimage\n,\n\n                \nkey\n:\n \n...\n,\n\n                \nurl\n:\n \n...\n\n            \n}\n            \n            \n// ...\n\n        \n]\n\n    \n},\n\n\n    \nnode0\n:\n \n{\n\n        \nnode1\n:\n \n{\n\n            \nnode2\n:\n \n{\n\n                \nfiles\n:\n \n[\n\n                    \n// ....\n\n                \n]\n\n            \n}\n\n        \n}\n\n    \n}\n\n    \n// dataKey: \nnode0.node1.node2\n\n\n}\n\n\n\n\n\nFile type:\n\n\n\n\nanimationJSON\n\n\naudio\n\n\nbinary\n\n\nglsl\n\n\nhtml\n\n\nimage\n\n\njson\n\n\nscript\n\n\nspritesheet\n\n\nsvg\n\n\ntext\n\n\ntilemapCSV\n\n\ntilemapJSON\n\n\nxml\n\n\n\n\nRelease data\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ncache\n.\ntext\n;\n\n\ncache\n.\nremove\n(\nkey\n);\n\n\n\n\n\nData in cache\n\n\nvar\n \ncache\n \n=\n \nscene\n.\ncache\n.\ntext\n;\n\n\nvar\n \nhasData\n \n=\n \ncache\n.\nhas\n(\nkey\n);", 
            "title": "Loader"
        }, 
        {
            "location": "/loader/index.html#introduction", 
            "text": "Load assets, built-in object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/loader/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/loader/index.html#loading-in-preload-stage", 
            "text": "scene . load . image ( key ,   url );  // scene.load.image(config); // config: {key, url}   Loader in preload stage will start loading automatically by scene.", 
            "title": "Loading in preload stage"
        }, 
        {
            "location": "/loader/index.html#loading-after-preload-stage", 
            "text": "scene . load . image ( key ,   url );     // add task  // scene.load.image(config); // config: {key, url}  scene . load . once ( complete ,   callback );    // add callback of  complete  event  scene . load . start ();                       // start loading", 
            "title": "Loading after preload stage"
        }, 
        {
            "location": "/loader/index.html#events", 
            "text": "Start loading  scene . load . once ( start ,   function (){});     Loading progressing  scene . load . once ( progress ,   function ( progress ){});     Loading a file object successful  scene . load . once ( load ,   function ( fileObj ){});     Loading a file object failed  scene . load . once ( loaderror ,   function ( fileObj ){});     All loading completed  scene . load . once ( complete ,   function (){});", 
            "title": "Events"
        }, 
        {
            "location": "/loader/index.html#status-of-loader", 
            "text": "Ready to start loading  var   isReady   =   scene . load . isReady ();     Is loading  var   isLoading   =   scene . load . isLoading ();", 
            "title": "Status of loader"
        }, 
        {
            "location": "/loader/index.html#file-types", 
            "text": "", 
            "title": "File types"
        }, 
        {
            "location": "/loader/index.html#image", 
            "text": "scene . load . image ( key ,   url );    // image  // scene.load.image(config); // config: {key, url}  scene . load . svg ( key ,   url );      // image in svg format  scene . load . html ( key ,   url ,   width ,   height );    // image in html format   Get data from texture cache  var   cache   =   scene . textures ;  var   data   =   cache . get ( key );", 
            "title": "Image"
        }, 
        {
            "location": "/loader/index.html#sprite-sheet", 
            "text": "scene . load . spritesheet ( key ,   url ,   { \n     // frameWidth: frameWidth, \n     // frameHeight: frameHeight, \n     // startFrame: startFrame, \n     // endFrame: endFrame, \n     // margin: margin, \n     // spacing: spacing  });   Get data from texture cache  var   cache   =   scene . textures ;  var   data   =   cache . get ( key );", 
            "title": "Sprite sheet"
        }, 
        {
            "location": "/loader/index.html#texture-atlas", 
            "text": "scene . load . atlas ( key ,   textureURL ,   atlasURL );   Get data from texture cache  var   cache   =   scene . textures ;  var   data   =   cache . get ( key );", 
            "title": "Texture atlas"
        }, 
        {
            "location": "/loader/index.html#multi-file-texture-atlas", 
            "text": "scene . load . multiatlas ( key ,   textureURLs ,   atlasURLs );", 
            "title": "Multi file texture atlas"
        }, 
        {
            "location": "/loader/index.html#unity-texture-atlas", 
            "text": "scene . load . unityAtlas ( key ,   textureURL ,   atlasURL );", 
            "title": "Unity texture atlas"
        }, 
        {
            "location": "/loader/index.html#animation", 
            "text": "scene . load . animation ( key ,   url );", 
            "title": "Animation"
        }, 
        {
            "location": "/loader/index.html#audio", 
            "text": "scene . load . audio ( key ,   urls );   Get data from cache  var   cache   =   scene . cache . audio ;  var   data   =   cache . get ( key );", 
            "title": "Audio"
        }, 
        {
            "location": "/loader/index.html#audio-sprite", 
            "text": "scene . load . audioSprite ( key ,   urls ,   json ,   config );", 
            "title": "Audio sprite"
        }, 
        {
            "location": "/loader/index.html#bitmap-font", 
            "text": "scene . load . bitmapFont ( key ,   textureURL ,   xmlURL );   Get data from cache  var   cache   =   scene . cache . bitmapFont ;  var   data   =   cache . get ( key );", 
            "title": "Bitmap font"
        }, 
        {
            "location": "/loader/index.html#tile-map", 
            "text": "scene . load . tilemapWeltmeister ( key ,   url );    // JSON  scene . load . tilemapCSV ( key ,   url );            // CSV   Get data from cache  var   cache   =   scene . cache . tilemap ;  var   data   =   cache . get ( key );", 
            "title": "Tile map"
        }, 
        {
            "location": "/loader/index.html#text", 
            "text": "scene . load . text ( key ,   url );   Get data from cache  var   cache   =   scene . cache . text ;  var   data   =   cache . get ( key );", 
            "title": "Text"
        }, 
        {
            "location": "/loader/index.html#json", 
            "text": "scene . load . json ( key ,   url );   Get data from cache  var   cache   =   scene . cache . json ;  var   data   =   cache . get ( key );", 
            "title": "JSON"
        }, 
        {
            "location": "/loader/index.html#xml", 
            "text": "scene . load . xml ( key ,   url );   Get data from cache  var   cache   =   scene . cache . xml ;  var   data   =   cache . get ( key );", 
            "title": "XML"
        }, 
        {
            "location": "/loader/index.html#script", 
            "text": "scene . load . script ( key ,   url );", 
            "title": "Script"
        }, 
        {
            "location": "/loader/index.html#glsl", 
            "text": "scene . load . glsl ( key ,   url );   Get data from cache  var   cache   =   scene . cache . shader ;  var   data   =   cache . get ( key );", 
            "title": "GLSL"
        }, 
        {
            "location": "/loader/index.html#binary", 
            "text": "scene . load . binary ( key ,   url ,   dataType );    // dataType: Uint8Array  // scene.load.binary(config); // config: {key, url, dataType}   Get data from cache  var   cache   =   scene . cache . binary ;  var   data   =   cache . get ( key );", 
            "title": "Binary"
        }, 
        {
            "location": "/loader/index.html#plugin", 
            "text": "scene . load . plugin ( key ,   url ,   true );   // start plugin when loaded", 
            "title": "Plugin"
        }, 
        {
            "location": "/loader/index.html#file-pack", 
            "text": "Load files in JSON format.  scene . load . pack ( key ,   url ,   dataKey );   JSON pack file:  { \n     dataKey :   { \n         //  prefix :  ... ,          // optional, extend key by prefix \n         //  path :  ... ,            // optional, extend url by path \n         //  defaultType :  image ,   // optional, default file type \n         files :   [  \n             { \n                 type :   image , \n                 key :   ... , \n                 url :   ... \n             }, \n             { \n                 type :   image , \n                 key :   ... , \n                 url :   ... \n             }             \n             // ... \n         ] \n     }, \n\n     node0 :   { \n         node1 :   { \n             node2 :   { \n                 files :   [ \n                     // .... \n                 ] \n             } \n         } \n     } \n     // dataKey:  node0.node1.node2  }   File type:   animationJSON  audio  binary  glsl  html  image  json  script  spritesheet  svg  text  tilemapCSV  tilemapJSON  xml", 
            "title": "File pack"
        }, 
        {
            "location": "/loader/index.html#release-data", 
            "text": "var   cache   =   scene . cache . text ;  cache . remove ( key );", 
            "title": "Release data"
        }, 
        {
            "location": "/loader/index.html#data-in-cache", 
            "text": "var   cache   =   scene . cache . text ;  var   hasData   =   cache . has ( key );", 
            "title": "Data in cache"
        }, 
        {
            "location": "/webfontloader/index.html", 
            "text": "Introduction\n\n\nLoad web font by \ngoogle webfont loader\n in payload or preload stage.\n\n\n\n\nAuthor: Rex\n\n\nCustom File of loader, installed by global plugin\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nInstall plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nWebFontLoader\n,\n\n            \nplugin\n:\n \nWebFontLoaderPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nor install it in previous scene (i.e. a preload scene).\n\n\n\n\nWarning\n\n\nThe best way of installing this plugin is to load it in game config. \n\n\nThis custom file loader won't be added into loader of current scene after loader is created (i.e. loading plugin using \nthis.load.plugin(...)\n, or loading in payload of scene)\n\n\n\n\nLoad webfont\n\n\nIn preload stage:\n\n\nthis\n.\nload\n.\nrexWebfont\n({\n\n    \ngoogle\n:\n \n{\n\n        \nfamilies\n:\n \n[\nBangers\n]\n\n    \n}\n\n\n});\n\n\n\n\n\nor load font in pack\n\n\nvar\n \nsceneConfig\n \n=\n \n{\n\n    \nkey\n:\n \n...\n,\n\n    \npack\n:\n \n{\n\n        \nfiles\n:\n \n[{\n\n                \ntype\n:\n \nrexWebFont\n,\n\n                \nkey\n:\n \nwebfont\n,\n\n                \nconfig\n:\n \n{\n\n                    \ngoogle\n:\n \n{\n\n                        \nfamilies\n:\n \n[\nBangers\n]\n\n                    \n}\n\n                \n}\n\n            \n}\n\n        \n]\n\n    \n}\n\n\n};\n\n\n\n\n\nEvents\n\n\n\n\n\n\nfontactive\n event\n\n\nthis\n.\nload\n.\non\n(\nwebfontactive\n,\n \nfunction\n(\nfileObj\n,\n \nfamilyName\n){});\n\n\n\n\n\n\n\n\n\nfontinactive\n event\n\n\nthis\n.\nload\n.\non\n(\nwebfontinactive\n,\n \nfunction\n(\nfileObj\n,\n \nfamilyName\n){});", 
            "title": "Webfont loader"
        }, 
        {
            "location": "/webfontloader/index.html#introduction", 
            "text": "Load web font by  google webfont loader  in payload or preload stage.   Author: Rex  Custom File of loader, installed by global plugin", 
            "title": "Introduction"
        }, 
        {
            "location": "/webfontloader/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/webfontloader/index.html#usage", 
            "text": "Sample code", 
            "title": "Usage"
        }, 
        {
            "location": "/webfontloader/index.html#install-plugin", 
            "text": "Install plugin in  configuration of game  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   WebFontLoader , \n             plugin :   WebFontLoaderPlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );   or install it in previous scene (i.e. a preload scene).   Warning  The best way of installing this plugin is to load it in game config.   This custom file loader won't be added into loader of current scene after loader is created (i.e. loading plugin using  this.load.plugin(...) , or loading in payload of scene)", 
            "title": "Install plugin"
        }, 
        {
            "location": "/webfontloader/index.html#load-webfont", 
            "text": "In preload stage:  this . load . rexWebfont ({ \n     google :   { \n         families :   [ Bangers ] \n     }  });   or load font in pack  var   sceneConfig   =   { \n     key :   ... , \n     pack :   { \n         files :   [{ \n                 type :   rexWebFont , \n                 key :   webfont , \n                 config :   { \n                     google :   { \n                         families :   [ Bangers ] \n                     } \n                 } \n             } \n         ] \n     }  };", 
            "title": "Load webfont"
        }, 
        {
            "location": "/webfontloader/index.html#events", 
            "text": "fontactive  event  this . load . on ( webfontactive ,   function ( fileObj ,   familyName ){});     fontinactive  event  this . load . on ( webfontinactive ,   function ( fileObj ,   familyName ){});", 
            "title": "Events"
        }, 
        {
            "location": "/gameobject/index.html", 
            "text": "Introduction\n\n\nBase class of all game object in phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nPosition\n\n\nvar\n \nx\n \n=\n \ngameobject\n.\nx\n;\n\n\nvar\n \ny\n \n=\n \ngameobject\n.\ny\n;\n\n\ngameobject\n.\nx\n \n=\n \n0\n;\n\n\ngameobject\n.\ny\n \n=\n \n0\n;\n\n\n\n\n\nAngle\n\n\ngameobject\n.\nangle\n \n=\n \n90\n;\n\n\nvar\n \nangle\n \n=\n \ngameobject\n.\nangle\n;\n\n\n\n// angle in radians\n\n\ngameobject\n.\nrotation\n \n=\n \nPhaser\n.\nMath\n.\nDegToRad\n(\n90\n);\n\n\nvar\n \nrad\n \n=\n \ngameobject\n.\nrotation\n;\n\n\n\n\n\nVisible\n\n\ngameobject\n.\nvisible\n \n=\n \ntrue\n;\n\n\nvar\n \nvisible\n \n=\n \ngameobject\n.\nvisible\n;\n\n\n\n\n\nAlpha\n\n\ngameobject\n.\nalpha\n \n=\n \n0.5\n;\n\n\nvar\n \nalpha\n \n=\n \ngameobject\n.\nalpha\n;\n\n\n\n\n\nFlipX, FlipY\n\n\ngameobject\n.\nflipX\n \n=\n \nfalse\n;\n\n\nvar\n \nflipX\n \n=\n \ngameobject\n.\nflipX\n;\n\n\n\ngameobject\n.\nflipY\n \n=\n \nfalse\n;\n\n\nvar\n \nflipY\n \n=\n \ngameobject\n.\nflipY\n;\n\n\n\n\n\nDepth (z-index)\n\n\nThe depth starts from zero (the default value) and increases from that point. A game object with a higher depth value will always render in front of one with a lower value.\n\n\ngameobject\n.\ndepth\n \n=\n \n0\n;\n\n\n// gameobject.setDepth(value);\n\n\nvar\n \ndepth\n \n=\n \ngameobject\n.\ndepth\n;\n\n\n\n\n\nScroll factor\n\n\ngameobject\n.\nsetScrollFactor\n(\nf\n);\n\n\n\n\n\nfactor: 0~1\n\n\n\n\n0= fixed to camera\n\n\n0.25= quarter the speed of the camera\n\n\n0.5= half the speed of the camera\n\n\n\n\nBounds\n\n\nvar\n \noutput\n \n=\n \ngameobject\n.\ngetTopLeft\n(\noutput\n);\n     \n// output: {x, y}\n\n\nvar\n \noutput\n \n=\n \ngameobject\n.\ngetTopRight\n(\noutput\n);\n    \n// output: {x, y}\n\n\nvar\n \noutput\n \n=\n \ngameobject\n.\ngetBottomLeft\n(\noutput\n);\n  \n// output: {x, y}\n\n\nvar\n \noutput\n \n=\n \ngameobject\n.\ngetBottomRight\n(\noutput\n);\n \n// output: {x, y}\n\n\nvar\n \noutput\n \n=\n \ngameobject\n.\ngetCenter\n(\noutput\n);\n      \n// output: {x, y}\n\n\nvar\n \noutput\n \n=\n \ngameobject\n.\ngetBounds\n(\noutput\n);\n      \n// output: {x, y, width, height}\n\n\n\n\n\nTint\n\n\ngameobject\n.\nsetTint\n(\ncolor\n);\n  \n// color: 0xRRGGBB\n\n\n// gameobject.tint = color;\n\n\ngameobject\n.\nsetTint\n(\ncolorTopLeft\n,\n \ncolorTopRight\n,\n \ncolorBottomLeft\n,\n \ncolorBottomRight\n);\n\n\ngameobject\n.\nclearTint\n();\n     \n// equal to `gameobject.setTint(0xffffff)`\n\n\nvar\n \ncolor\n \n=\n \ngameobject\n.\ntintTopLeft\n;\n\n\nvar\n \ncolor\n \n=\n \ngameobject\n.\ntintTopRight\n;\n\n\nvar\n \ncolor\n \n=\n \ngameobject\n.\ntintBottomLeft\n;\n\n\nvar\n \ncolor\n \n=\n \ngameobject\n.\ntintBottomRight\n;\n\n\n\n\n\nSize\n\n\ngameobject\n.\nsetDisplaySize\n(\nwidth\n,\n \nheight\n);\n\n\n\n\n\nPrivate data\n\n\ngameobject\n.\nsetData\n(\nkey\n,\n \nvalue\n);\n\n\nvar\n \nvalue\n \n=\n \ngameobject\n.\ngetData\n(\nkey\n);\n\n\n\n\n\nSee \ndata manager", 
            "title": "Game object"
        }, 
        {
            "location": "/gameobject/index.html#introduction", 
            "text": "Base class of all game object in phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/gameobject/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/gameobject/index.html#position", 
            "text": "var   x   =   gameobject . x ;  var   y   =   gameobject . y ;  gameobject . x   =   0 ;  gameobject . y   =   0 ;", 
            "title": "Position"
        }, 
        {
            "location": "/gameobject/index.html#angle", 
            "text": "gameobject . angle   =   90 ;  var   angle   =   gameobject . angle ;  // angle in radians  gameobject . rotation   =   Phaser . Math . DegToRad ( 90 );  var   rad   =   gameobject . rotation ;", 
            "title": "Angle"
        }, 
        {
            "location": "/gameobject/index.html#visible", 
            "text": "gameobject . visible   =   true ;  var   visible   =   gameobject . visible ;", 
            "title": "Visible"
        }, 
        {
            "location": "/gameobject/index.html#alpha", 
            "text": "gameobject . alpha   =   0.5 ;  var   alpha   =   gameobject . alpha ;", 
            "title": "Alpha"
        }, 
        {
            "location": "/gameobject/index.html#flipx-flipy", 
            "text": "gameobject . flipX   =   false ;  var   flipX   =   gameobject . flipX ;  gameobject . flipY   =   false ;  var   flipY   =   gameobject . flipY ;", 
            "title": "FlipX, FlipY"
        }, 
        {
            "location": "/gameobject/index.html#depth-z-index", 
            "text": "The depth starts from zero (the default value) and increases from that point. A game object with a higher depth value will always render in front of one with a lower value.  gameobject . depth   =   0 ;  // gameobject.setDepth(value);  var   depth   =   gameobject . depth ;", 
            "title": "Depth (z-index)"
        }, 
        {
            "location": "/gameobject/index.html#scroll-factor", 
            "text": "gameobject . setScrollFactor ( f );   factor: 0~1   0= fixed to camera  0.25= quarter the speed of the camera  0.5= half the speed of the camera", 
            "title": "Scroll factor"
        }, 
        {
            "location": "/gameobject/index.html#bounds", 
            "text": "var   output   =   gameobject . getTopLeft ( output );       // output: {x, y}  var   output   =   gameobject . getTopRight ( output );      // output: {x, y}  var   output   =   gameobject . getBottomLeft ( output );    // output: {x, y}  var   output   =   gameobject . getBottomRight ( output );   // output: {x, y}  var   output   =   gameobject . getCenter ( output );        // output: {x, y}  var   output   =   gameobject . getBounds ( output );        // output: {x, y, width, height}", 
            "title": "Bounds"
        }, 
        {
            "location": "/gameobject/index.html#tint", 
            "text": "gameobject . setTint ( color );    // color: 0xRRGGBB  // gameobject.tint = color;  gameobject . setTint ( colorTopLeft ,   colorTopRight ,   colorBottomLeft ,   colorBottomRight );  gameobject . clearTint ();       // equal to `gameobject.setTint(0xffffff)`  var   color   =   gameobject . tintTopLeft ;  var   color   =   gameobject . tintTopRight ;  var   color   =   gameobject . tintBottomLeft ;  var   color   =   gameobject . tintBottomRight ;", 
            "title": "Tint"
        }, 
        {
            "location": "/gameobject/index.html#size", 
            "text": "gameobject . setDisplaySize ( width ,   height );", 
            "title": "Size"
        }, 
        {
            "location": "/gameobject/index.html#private-data", 
            "text": "gameobject . setData ( key ,   value );  var   value   =   gameobject . getData ( key );   See  data manager", 
            "title": "Private data"
        }, 
        {
            "location": "/image/index.html", 
            "text": "Introduction\n\n\nDisplay of static images, built-in game object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nLoad texture\n\n\nscene\n.\nload\n.\nimage\n(\nkey\n,\n \nurl\n);\n\n\n\n\n\nSee \nloader\n\n\nAdd image object\n\n\nvar\n \nimage\n \n=\n \nscene\n.\nadd\n.\nimage\n(\nx\n,\n \ny\n,\n \nkey\n);\n\n\n\n\n\nAdd image from JSON\n\n\nvar\n \nimage\n \n=\n \nscene\n.\nmake\n.\nimage\n({\n\n    \nx\n:\n \n0\n,\n\n    \ny\n:\n \n0\n,\n\n    \nkey\n:\n \n,\n\n\n    \n// angle: 0,\n\n    \n// alpha: 1\n\n    \n// flipX: true,\n\n    \n// flipY: true\n\n\n});\n\n\n\n\n\nOther properties\n\n\nSee \ngame object", 
            "title": "Image"
        }, 
        {
            "location": "/image/index.html#introduction", 
            "text": "Display of static images, built-in game object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/image/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/image/index.html#load-texture", 
            "text": "scene . load . image ( key ,   url );   See  loader", 
            "title": "Load texture"
        }, 
        {
            "location": "/image/index.html#add-image-object", 
            "text": "var   image   =   scene . add . image ( x ,   y ,   key );   Add image from JSON  var   image   =   scene . make . image ({ \n     x :   0 , \n     y :   0 , \n     key :   , \n\n     // angle: 0, \n     // alpha: 1 \n     // flipX: true, \n     // flipY: true  });", 
            "title": "Add image object"
        }, 
        {
            "location": "/image/index.html#other-properties", 
            "text": "See  game object", 
            "title": "Other properties"
        }, 
        {
            "location": "/blitter/index.html", 
            "text": "Introduction\n\n\nDisplay of static images, built-in game object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nLoad texture\n\n\nscene\n.\nload\n.\nimage\n(\nkey\n,\n \nurl\n);\n\n\n\n\n\nSee \nloader\n\n\nAdd blitter container\n\n\nAdd blitter container\n\n\nvar\n \nblitter\n \n=\n \nscene\n.\nadd\n.\nblitter\n(\nx\n,\n \ny\n,\n \nkey\n);\n\n\n\n\n\nAdd blitter container from JSON\n\n\nvar\n \nblitter\n \n=\n \nscene\n.\nmake\n.\nblitter\n({\n\n    \nx\n:\n \n0\n,\n\n    \ny\n:\n \n0\n,\n\n    \nkey\n:\n \n,\n\n\n    \n// angle: 0,\n\n    \n// alpha: 1\n\n    \n// flipX: true,\n\n    \n// flipY: true\n\n\n});\n\n\n\n\n\nAdd bob object\n\n\nvar\n \nbob\n \n=\n \nblitter\n.\ncreate\n(\nx\n,\n \ny\n);\n\n\n// var bob = blitter.create(x, y, frame, visible, index);\n\n\n\n\n\n\n\nframe : The Frame the Bob will use. It must be part of the Texture the parent Blitter object is using.\n\n\nvisible : Should the created Bob render or not?\n\n\nindex : The position in the Blitters Display List to add the new Bob at. Defaults to the top of the list.\n\n\n\n\nAdd mutiple bob objects\n\n\nvar\n \nbobs\n \n=\n \nblitter\n.\ncreateMultiple\n(\nquantity\n,\n \nframe\n,\n \nvisible\n);\n\n\n\n\n\n\n\nquantity : The quantity of Bob objects to create.\n\n\n\n\nAdd bob object from callback\n\n\nvar\n \nbobs\n \n=\n \nblitter\n.\ncreateFromCallback\n(\ncallback\n,\n \nquantity\n,\n \nframe\n,\n \nvisible\n)\n\n\n// var callback = function(bob, i){};\n\n\n\n\n\nGet bob objects\n\n\nvar\n \nbobs\n \n=\n \nblitter\n.\nchildren\n;\n\n\n// bobs = blitter.getRenderList();\n\n\n\n\n\nbobs\n \n=\n \nblitter\n.\ngetRenderList\n();\n\n\n\n\n\nClear all bob objects\n\n\nblitter\n.\nclear\n();\n\n\n\n\n\nBob object\n\n\nA Bob has a position, alpha value and a frame from a texture that it uses to render with. You can also toggle the flipped and visible state of the Bob.\n\n\nPosition, frame\n\n\nbob\n.\nx\n \n=\n \n0\n;\n\n\nbob\n.\ny\n \n=\n \n0\n;\n\n\n// var x = bob.x;\n\n\n// var y = bob.y;\n\n\n\n\n\nbob\n.\nreset\n(\nx\n,\n \ny\n,\n \nframe\n);\n\n\n\n\n\nbob\n.\nsetFrame\n(\nframe\n);\n\n\n\n\n\nFlip\n\n\nbob\n.\nresetFlip\n();\n\n\n\n\n\nbob\n.\nsetFlip\n(\nboolX\n,\n \nboolY\n);\n\n\n\n\n\nbob\n.\nsetFlipX\n(\nboolean\n);\n\n\n\n\n\nbob\n.\nsetFlipY\n(\nboolean\n);\n\n\n\n\n\nVisible, alpha\n\n\nbob\n.\nsetVisible\n(\nboolean\n);\n\n\n// bob.visible = v;\n\n\n// var visible = bob.visible;\n\n\n\n\n\nbob\n.\nsetAlpha\n(\nv\n);\n\n\n// bob.aplha = v;\n\n\n// var alpha = bob.alpha;\n\n\n\n\n\nDestroy\n\n\nbob\n.\ndestroy\n();\n\n\n\n\n\nData\n\n\nvar\n \ndata\n \n=\n \nbob\n.\ndata\n;\n  \n// {}", 
            "title": "Blitter"
        }, 
        {
            "location": "/blitter/index.html#introduction", 
            "text": "Display of static images, built-in game object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/blitter/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/blitter/index.html#load-texture", 
            "text": "scene . load . image ( key ,   url );   See  loader", 
            "title": "Load texture"
        }, 
        {
            "location": "/blitter/index.html#add-blitter-container", 
            "text": "Add blitter container  var   blitter   =   scene . add . blitter ( x ,   y ,   key );   Add blitter container from JSON  var   blitter   =   scene . make . blitter ({ \n     x :   0 , \n     y :   0 , \n     key :   , \n\n     // angle: 0, \n     // alpha: 1 \n     // flipX: true, \n     // flipY: true  });", 
            "title": "Add blitter container"
        }, 
        {
            "location": "/blitter/index.html#add-bob-object", 
            "text": "var   bob   =   blitter . create ( x ,   y );  // var bob = blitter.create(x, y, frame, visible, index);    frame : The Frame the Bob will use. It must be part of the Texture the parent Blitter object is using.  visible : Should the created Bob render or not?  index : The position in the Blitters Display List to add the new Bob at. Defaults to the top of the list.", 
            "title": "Add bob object"
        }, 
        {
            "location": "/blitter/index.html#add-mutiple-bob-objects", 
            "text": "var   bobs   =   blitter . createMultiple ( quantity ,   frame ,   visible );    quantity : The quantity of Bob objects to create.", 
            "title": "Add mutiple bob objects"
        }, 
        {
            "location": "/blitter/index.html#add-bob-object-from-callback", 
            "text": "var   bobs   =   blitter . createFromCallback ( callback ,   quantity ,   frame ,   visible )  // var callback = function(bob, i){};", 
            "title": "Add bob object from callback"
        }, 
        {
            "location": "/blitter/index.html#get-bob-objects", 
            "text": "var   bobs   =   blitter . children ;  // bobs = blitter.getRenderList();   bobs   =   blitter . getRenderList ();", 
            "title": "Get bob objects"
        }, 
        {
            "location": "/blitter/index.html#clear-all-bob-objects", 
            "text": "blitter . clear ();", 
            "title": "Clear all bob objects"
        }, 
        {
            "location": "/blitter/index.html#bob-object", 
            "text": "A Bob has a position, alpha value and a frame from a texture that it uses to render with. You can also toggle the flipped and visible state of the Bob.", 
            "title": "Bob object"
        }, 
        {
            "location": "/blitter/index.html#position-frame", 
            "text": "bob . x   =   0 ;  bob . y   =   0 ;  // var x = bob.x;  // var y = bob.y;   bob . reset ( x ,   y ,   frame );   bob . setFrame ( frame );", 
            "title": "Position, frame"
        }, 
        {
            "location": "/blitter/index.html#flip", 
            "text": "bob . resetFlip ();   bob . setFlip ( boolX ,   boolY );   bob . setFlipX ( boolean );   bob . setFlipY ( boolean );", 
            "title": "Flip"
        }, 
        {
            "location": "/blitter/index.html#visible-alpha", 
            "text": "bob . setVisible ( boolean );  // bob.visible = v;  // var visible = bob.visible;   bob . setAlpha ( v );  // bob.aplha = v;  // var alpha = bob.alpha;", 
            "title": "Visible, alpha"
        }, 
        {
            "location": "/blitter/index.html#destroy", 
            "text": "bob . destroy ();", 
            "title": "Destroy"
        }, 
        {
            "location": "/blitter/index.html#data", 
            "text": "var   data   =   bob . data ;    // {}", 
            "title": "Data"
        }, 
        {
            "location": "/text/index.html", 
            "text": "Introduction\n\n\nDrawing text on canvas, built-in game object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nSnapshot\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nadd\n.\ntext\n(\nx\n,\n \ny\n,\n \nhello\n);\n\n\ntxt\n.\nsetText\n(\nworld\n);\n\n\n\n\n\nAdd text object\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nadd\n.\ntext\n(\nx\n,\n \ny\n,\n \nhello\n);\n\n\n// var txt = scene.add.text(x, y, \nhello\n, { fontFamily: \nArial\n, fontSize: 64, color: \n#00ff00\n });\n\n\n\n\n\nDefault style\n\n\n{\n\n    \nfontFamily\n:\n \nCourier\n,\n\n    \nfontSize\n:\n \n16px\n,\n\n    \nfontStyle\n:\n \n,\n\n    \nbackgroundColor\n:\n \nnull\n,\n\n    \ncolor\n:\n \n#fff\n,\n\n    \nstroke\n:\n \n#fff\n,\n\n    \nstrokeThickness\n:\n \n0\n,\n\n    \nshadow\n:\n \n{\n\n        \noffsetX\n:\n \n0\n,\n\n        \noffsetY\n:\n \n0\n,\n\n        \ncolor\n:\n \n#000\n,\n\n        \nblur\n:\n \n0\n,\n\n        \nstroke\n:\n \nfalse\n,\n\n        \nfill\n:\n \nfalse\n\n    \n},\n\n    \nalign\n:\n \nleft\n,\n  \n// \nleft\n|\ncenter\n|\nright\n\n    \nmaxLines\n:\n \n0\n,\n\n    \nfixedWidth\n:\n \n0\n,\n\n    \nfixedHeight\n:\n \n0\n,\n\n    \nrtl\n:\n \nfalse\n,\n\n    \ntestString\n:\n \n|M\u00c9qgy\n,\n\n    \nwordWrap\n:\n \n{\n\n        \nwidth\n:\n \nnull\n,\n\n        \ncallback\n:\n \nnull\n,\n\n        \ncallbackScope\n:\n \nnull\n,\n\n        \nuseAdvancedWrap\n:\n \nfalse\n\n    \n}\n\n\n}\n\n\n\n\n\nAdd text from JSON\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nmake\n.\ntext\n({\n\n    \nx\n:\n \n100\n,\n\n    \ny\n:\n \n100\n,\n\n    \npadding\n:\n \n{\n\n        \nleft\n:\n \n64\n,\n\n        \nright\n:\n \n16\n,\n\n        \ntop\n:\n \n20\n,\n\n        \nbottom\n:\n \n40\n        \n        \n//x: 32,    // 32px padding on the left/right\n\n        \n//y: 16     // 16px padding on the top/bottom\n\n    \n},\n\n    \ntext\n:\n \nText\\nGame Object\\nCreated from config\n,\n\n    \nstyle\n:\n \n{\n\n        \nfontSize\n:\n \n64px\n,\n\n        \nfontFamily\n:\n \nArial\n,\n\n        \ncolor\n:\n \n#ffffff\n,\n\n        \nalign\n:\n \ncenter\n,\n\n        \nbackgroundColor\n:\n \n#ff00ff\n\n    \n}\n\n\n});\n\n\n\n\n\nWord wrap\n\n\nWrap by width\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nmake\n.\ntext\n({\n\n    \nx\n:\n \n400\n,\n\n    \ny\n:\n \n100\n,\n\n    \ntext\n:\n \nThe sky above the port was the color of television, tuned to a dead channel.\n,\n\n    \norigin\n:\n \n{\n \nx\n:\n \n0.5\n,\n \ny\n:\n \n0.5\n \n},\n\n    \nstyle\n:\n \n{\n\n        \nfont\n:\n \nbold 25px Arial\n,\n\n        \nfill\n:\n \nwhite\n,\n\n        \nwordWrap\n:\n \n{\n \nwidth\n:\n \n300\n \n}\n\n    \n}\n\n\n});\n\n\n\n\n\nWrap by callback\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nmake\n.\ntext\n({\n\n    \nx\n:\n \n400\n,\n\n    \ny\n:\n \n300\n,\n\n    \ntext\n:\n \nThe sky above the port was the color of television, tuned to a dead channel.\n,\n\n    \norigin\n:\n \n0.5\n,\n\n    \nstyle\n:\n \n{\n\n        \nfont\n:\n \nbold 30px Arial\n,\n\n        \nfill\n:\n \nwhite\n,\n\n        \nwordWrap\n:\n \n{\n \ncallback\n:\n \nwordWrap\n,\n \nscope\n:\n \nthis\n \n}\n\n    \n}\n\n\n});\n\n\n\nfunction\n \nwordWrap\n \n(\ntext\n,\n \ntextObject\n)\n\n\n{\n\n    \n// First parameter will be the string that needs to be wrapped\n\n    \n// Second parameter will be the Text game object that is being wrapped currently\n\n\n    \n// This wrap just puts each word on a separate line, but you could inject your own\n\n    \n// language-specific logic here.\n\n    \nvar\n \nwords\n \n=\n \ntext\n.\nsplit\n(\n \n);\n\n\n    \n// You can return either an array of individual lines or a string with line breaks (e.g. \\n) in\n\n    \n// the correct place.\n\n    \nreturn\n \nwords\n;\n\n\n}\n\n\n\n\n\nSet text\n\n\ntxt\n.\nsetText\n(\nworld\n);\n\n\n// var curContent = txt.text;\n\n\n\n\n\nSet style\n\n\ntxt\n.\nsetStyle\n(\nstyle\n);\n\n\ntxt\n.\nsetFont\n(\nfont\n);\n\n\ntxt\n.\nsetFontFamily\n(\nfamily\n);\n\n\ntxt\n.\nsetFontSize\n(\nsize\n);\n\n\ntxt\n.\nsetFontStyle\n(\nstyle\n);\n\n\n\n\n\nSet color\n\n\ntxt\n.\nsetColor\n(\ncolor\n);\n\n\ntxt\n.\nsetStroke\n(\ncolor\n,\n \nthickness\n);\n\n\ntxt\n.\nsetBackgroundColor\n(\ncolor\n);\n\n\ntxt\n.\nsetFill\n(\ncolor\n);\n\n\n\n\n\nSet shadow\n\n\ntxt\n.\nsetShadow\n(\nx\n,\n \ny\n,\n \ncolor\n,\n \nblur\n,\n \nshadowStroke\n,\n \nshadowFill\n);\n\n\ntxt\n.\nsetShadowOffset\n(\nx\n,\n \ny\n);\n\n\ntxt\n.\nsetShadowColor\n(\ncolor\n);\n\n\ntxt\n.\nsetShadowBlur\n(\nblur\n);\n\n\ntxt\n.\nsetShadowStroke\n(\nenabled\n);\n\n\ntxt\n.\nsetShadowFill\n(\nenabled\n);\n\n\n\n\n\nSet padding\n\n\ntxt\n.\nsetPadding\n(\nleft\n,\n \ntop\n,\n \nright\n,\n \nbottom\n);\n\n\n// txt.setPadding(padding); // padding: {left, top, right, bottom}\n\n\n\n\n\nSet max lines\n\n\ntxt\n.\nsetMaxLines\n(\nmax\n);\n\n\n\n\n\nSet object size\n\n\ntxt\n.\nsetFixedSize\n(\nwidth\n,\n \nheight\n);", 
            "title": "Text"
        }, 
        {
            "location": "/text/index.html#introduction", 
            "text": "Drawing text on canvas, built-in game object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/text/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/text/index.html#snapshot", 
            "text": "var   txt   =   scene . add . text ( x ,   y ,   hello );  txt . setText ( world );", 
            "title": "Snapshot"
        }, 
        {
            "location": "/text/index.html#add-text-object", 
            "text": "var   txt   =   scene . add . text ( x ,   y ,   hello );  // var txt = scene.add.text(x, y,  hello , { fontFamily:  Arial , fontSize: 64, color:  #00ff00  });   Default style  { \n     fontFamily :   Courier , \n     fontSize :   16px , \n     fontStyle :   , \n     backgroundColor :   null , \n     color :   #fff , \n     stroke :   #fff , \n     strokeThickness :   0 , \n     shadow :   { \n         offsetX :   0 , \n         offsetY :   0 , \n         color :   #000 , \n         blur :   0 , \n         stroke :   false , \n         fill :   false \n     }, \n     align :   left ,    //  left | center | right \n     maxLines :   0 , \n     fixedWidth :   0 , \n     fixedHeight :   0 , \n     rtl :   false , \n     testString :   |M\u00c9qgy , \n     wordWrap :   { \n         width :   null , \n         callback :   null , \n         callbackScope :   null , \n         useAdvancedWrap :   false \n     }  }   Add text from JSON  var   txt   =   scene . make . text ({ \n     x :   100 , \n     y :   100 , \n     padding :   { \n         left :   64 , \n         right :   16 , \n         top :   20 , \n         bottom :   40         \n         //x: 32,    // 32px padding on the left/right \n         //y: 16     // 16px padding on the top/bottom \n     }, \n     text :   Text\\nGame Object\\nCreated from config , \n     style :   { \n         fontSize :   64px , \n         fontFamily :   Arial , \n         color :   #ffffff , \n         align :   center , \n         backgroundColor :   #ff00ff \n     }  });", 
            "title": "Add text object"
        }, 
        {
            "location": "/text/index.html#word-wrap", 
            "text": "Wrap by width  var   txt   =   scene . make . text ({ \n     x :   400 , \n     y :   100 , \n     text :   The sky above the port was the color of television, tuned to a dead channel. , \n     origin :   {   x :   0.5 ,   y :   0.5   }, \n     style :   { \n         font :   bold 25px Arial , \n         fill :   white , \n         wordWrap :   {   width :   300   } \n     }  });   Wrap by callback  var   txt   =   scene . make . text ({ \n     x :   400 , \n     y :   300 , \n     text :   The sky above the port was the color of television, tuned to a dead channel. , \n     origin :   0.5 , \n     style :   { \n         font :   bold 30px Arial , \n         fill :   white , \n         wordWrap :   {   callback :   wordWrap ,   scope :   this   } \n     }  });  function   wordWrap   ( text ,   textObject )  { \n     // First parameter will be the string that needs to be wrapped \n     // Second parameter will be the Text game object that is being wrapped currently \n\n     // This wrap just puts each word on a separate line, but you could inject your own \n     // language-specific logic here. \n     var   words   =   text . split (   ); \n\n     // You can return either an array of individual lines or a string with line breaks (e.g. \\n) in \n     // the correct place. \n     return   words ;  }", 
            "title": "Word wrap"
        }, 
        {
            "location": "/text/index.html#set-text", 
            "text": "txt . setText ( world );  // var curContent = txt.text;", 
            "title": "Set text"
        }, 
        {
            "location": "/text/index.html#set-style", 
            "text": "txt . setStyle ( style );  txt . setFont ( font );  txt . setFontFamily ( family );  txt . setFontSize ( size );  txt . setFontStyle ( style );", 
            "title": "Set style"
        }, 
        {
            "location": "/text/index.html#set-color", 
            "text": "txt . setColor ( color );  txt . setStroke ( color ,   thickness );  txt . setBackgroundColor ( color );  txt . setFill ( color );", 
            "title": "Set color"
        }, 
        {
            "location": "/text/index.html#set-shadow", 
            "text": "txt . setShadow ( x ,   y ,   color ,   blur ,   shadowStroke ,   shadowFill );  txt . setShadowOffset ( x ,   y );  txt . setShadowColor ( color );  txt . setShadowBlur ( blur );  txt . setShadowStroke ( enabled );  txt . setShadowFill ( enabled );", 
            "title": "Set shadow"
        }, 
        {
            "location": "/text/index.html#set-padding", 
            "text": "txt . setPadding ( left ,   top ,   right ,   bottom );  // txt.setPadding(padding); // padding: {left, top, right, bottom}", 
            "title": "Set padding"
        }, 
        {
            "location": "/text/index.html#set-max-lines", 
            "text": "txt . setMaxLines ( max );", 
            "title": "Set max lines"
        }, 
        {
            "location": "/text/index.html#set-object-size", 
            "text": "txt . setFixedSize ( width ,   height );", 
            "title": "Set object size"
        }, 
        {
            "location": "/bbcodetext/index.html", 
            "text": "Introduction\n\n\nDrawing text with \nBBCode\n protocol.\n\n\n\n\nAuthor: Rex\n\n\nA kind of game object, installed by global plugin\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nBBCode\n\n\n\n\nbold: \n[b]text[/b]\n\n\nitalic: \n[i]text[/i]\n\n\ncolor: \n[color=red]text[/color]\n\n\nsize: \n[size=18]text[/size]\n\n\nstroke: \n[stroke]text[/stroke]\n\n\nstroke with color setting: \n[stroke=red]text[/stroke]\n\n\n\n\n\n\nshadow: \n[shadow]text[/shadow]\n\n\nunderline: \n[u]text[/u]\n\n\nunderline with color setting: \n[u=red]text[/u]\n\n\n\n\n\n\n\n\nSnapshot\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nadd\n.\nrexBBCodeText\n(\nx\n,\n \ny\n,\n \n[b]h[/b]ello\n);\n\n\ntxt\n.\nsetText\n(\n[i]wor[/i]ld\n);\n\n\n\n\n\nInstall plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nBBCodeTextPlugin\n,\n\n            \nplugin\n:\n \nBBCodeTextPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nAdd text object\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nadd\n.\nrexBBCodeText\n(\nx\n,\n \ny\n,\n \n[b]h[/b]ello\n);\n\n\n// var txt = scene.add.rexBBCodeText(x, y, \n[b]h[/b]ello\n, { fontFamily: \nArial\n, fontSize: 64, color: \n#00ff00\n });\n\n\n\n\n\nDefault style\n\n\n{\n\n    \nfontFamily\n:\n \nCourier\n,\n\n    \nfontSize\n:\n \n16px\n,\n\n    \nfontStyle\n:\n \n,\n\n    \nbackgroundColor\n:\n \nnull\n,\n\n    \ncolor\n:\n \n#fff\n,\n\n    \nstroke\n:\n \n#fff\n,\n\n    \nstrokeThickness\n:\n \n0\n,\n\n    \nshadow\n:\n \n{\n\n        \noffsetX\n:\n \n0\n,\n\n        \noffsetY\n:\n \n0\n,\n\n        \ncolor\n:\n \n#000\n,\n\n        \nblur\n:\n \n0\n,\n\n        \nstroke\n:\n \nfalse\n,\n\n        \nfill\n:\n \nfalse\n\n    \n},\n\n    \nunderline\n:\n \n{\n\n        \ncolor\n:\n \n#000\n,\n\n        \nthinkness\n:\n \n0\n,\n\n        \noffset\n:\n \n0\n\n    \n},\n\n    \nalign\n:\n \nleft\n,\n  \n// 0|\nleft\n|1|\ncenter\n|2|\nright\n\n    \nmaxLines\n:\n \n0\n,\n\n    \nfixedWidth\n:\n \n0\n,\n\n    \nfixedHeight\n:\n \n0\n,\n\n    \ntestString\n:\n \n|M\u00c9qgy\n,\n\n    \nwrap\n:\n \n{\n\n        \nmode\n:\n \nnone\n     \n// 0|\nnone\n|1|\nword\n|2|\nchar\n|\ncharacter\n\n        \nwidth\n:\n \nnull\n\n    \n}\n\n\n}\n\n\n\n\n\nAdd text from JSON\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nmake\n.\nrexBBCodeText\n({\n\n    \nx\n:\n \n100\n,\n\n    \ny\n:\n \n100\n,\n\n    \npadding\n:\n \n{\n\n        \nleft\n:\n \n64\n,\n\n        \nright\n:\n \n16\n,\n\n        \ntop\n:\n \n20\n,\n\n        \nbottom\n:\n \n40\n\n        \n//x: 32,    // 32px padding on the left/right\n\n        \n//y: 16     // 16px padding on the top/bottom\n\n    \n},\n\n    \ntext\n:\n \nText\\nGame Object\\nCreated from config\n,\n\n    \nstyle\n:\n \n{\n\n        \nfontSize\n:\n \n64px\n,\n\n        \nfontFamily\n:\n \nArial\n,\n\n        \ncolor\n:\n \n#ffffff\n,\n\n        \nalign\n:\n \ncenter\n,\n\n        \nbackgroundColor\n:\n \n#ff00ff\n\n    \n}\n\n\n});\n\n\n\n\n\nWord wrap\n\n\nWrap by word or character.\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nmake\n.\ntext\n({\n\n    \nx\n:\n \n400\n,\n\n    \ny\n:\n \n100\n,\n\n    \ntext\n:\n \nThe sky above the port was the color of television, tuned to a dead channel.\n,\n\n    \norigin\n:\n \n{\n \nx\n:\n \n0.5\n,\n \ny\n:\n \n0.5\n \n},\n\n    \nstyle\n:\n \n{\n\n        \nfont\n:\n \nbold 25px Arial\n,\n\n        \nfill\n:\n \nwhite\n,\n\n        \nwrap\n:\n \n{\n\n            \nmode\n:\n \nword\n     \n// 0|\nnone\n|1|\nword\n|2|\nchar\n|\ncharacter\n\n            \nwidth\n:\n \n300\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\nSet text\n\n\ntxt\n.\nsetText\n(\n[b]h[/b]ello\n);\n\n\n// var curContent = txt.text;\n\n\n\n\n\nSet style\n\n\ntxt\n.\nsetStyle\n(\nstyle\n);\n\n\ntxt\n.\nsetFont\n(\nfont\n);\n  \n// font: {fontFamily, fontSize, fontStyle}\n\n\ntxt\n.\nsetFontFamily\n(\nfamily\n);\n\n\ntxt\n.\nsetFontSize\n(\nsize\n);\n\n\ntxt\n.\nsetFontStyle\n(\nstyle\n);\n\n\n\n\n\nSet color\n\n\ntxt\n.\nsetColor\n(\ncolor\n);\n\n\ntxt\n.\nsetStroke\n(\ncolor\n,\n \nthickness\n);\n\n\ntxt\n.\nsetBackgroundColor\n(\ncolor\n);\n\n\ntxt\n.\nsetFill\n(\ncolor\n);\n\n\n\n\n\nSet shadow\n\n\ntxt\n.\nsetShadow\n(\nx\n,\n \ny\n,\n \ncolor\n,\n \nblur\n,\n \nshadowStroke\n,\n \nshadowFill\n);\n\n\ntxt\n.\nsetShadowOffset\n(\nx\n,\n \ny\n);\n\n\ntxt\n.\nsetShadowColor\n(\ncolor\n);\n\n\ntxt\n.\nsetShadowBlur\n(\nblur\n);\n\n\ntxt\n.\nsetShadowStroke\n(\nenabled\n);\n\n\ntxt\n.\nsetShadowFill\n(\nenabled\n);\n\n\n\n\n\nSet underline\n\n\ntxt\n.\nsetUnderline\n(\ncolor\n,\n \nthinkness\n,\n \nofset\n);\n\n\ntxt\n.\nsetUnderlineColor\n(\ncolor\n);\n\n\ntxt\n.\nsetUnderlineThinkness\n(\nthinkness\n);\n\n\ntxt\n.\nsetUnderlineOffset\n(\nofset\n);\n\n\n\n\n\nSet padding\n\n\ntxt\n.\nsetPadding\n(\nleft\n,\n \ntop\n,\n \nright\n,\n \nbottom\n);\n\n\n// txt.setPadding(padding); // padding: {left, top, right, bottom}\n\n\n\n\n\nSet max lines\n\n\ntxt\n.\nsetMaxLines\n(\nmax\n);\n\n\n\n\n\nSet wrap properties\n\n\ntxt\n.\nsetWrapMode\n(\nmode\n);\n  \n// mode: 0|\nnone\n|1|\nword\n|2|\nchar\n|\ncharacter\n\n\ntxt\n.\nsetWrapWidth\n(\nwidth\n);\n\n\n\n\n\nSet object size\n\n\ntxt\n.\nsetFixedSize\n(\nwidth\n,\n \nheight\n);", 
            "title": "BBCode Text"
        }, 
        {
            "location": "/bbcodetext/index.html#introduction", 
            "text": "Drawing text with  BBCode  protocol.   Author: Rex  A kind of game object, installed by global plugin", 
            "title": "Introduction"
        }, 
        {
            "location": "/bbcodetext/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/bbcodetext/index.html#usage", 
            "text": "Sample code", 
            "title": "Usage"
        }, 
        {
            "location": "/bbcodetext/index.html#bbcode", 
            "text": "bold:  [b]text[/b]  italic:  [i]text[/i]  color:  [color=red]text[/color]  size:  [size=18]text[/size]  stroke:  [stroke]text[/stroke]  stroke with color setting:  [stroke=red]text[/stroke]    shadow:  [shadow]text[/shadow]  underline:  [u]text[/u]  underline with color setting:  [u=red]text[/u]", 
            "title": "BBCode"
        }, 
        {
            "location": "/bbcodetext/index.html#snapshot", 
            "text": "var   txt   =   scene . add . rexBBCodeText ( x ,   y ,   [b]h[/b]ello );  txt . setText ( [i]wor[/i]ld );", 
            "title": "Snapshot"
        }, 
        {
            "location": "/bbcodetext/index.html#install-plugin", 
            "text": "Install plugin in  configuration of game  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   BBCodeTextPlugin , \n             plugin :   BBCodeTextPlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install plugin"
        }, 
        {
            "location": "/bbcodetext/index.html#add-text-object", 
            "text": "var   txt   =   scene . add . rexBBCodeText ( x ,   y ,   [b]h[/b]ello );  // var txt = scene.add.rexBBCodeText(x, y,  [b]h[/b]ello , { fontFamily:  Arial , fontSize: 64, color:  #00ff00  });   Default style  { \n     fontFamily :   Courier , \n     fontSize :   16px , \n     fontStyle :   , \n     backgroundColor :   null , \n     color :   #fff , \n     stroke :   #fff , \n     strokeThickness :   0 , \n     shadow :   { \n         offsetX :   0 , \n         offsetY :   0 , \n         color :   #000 , \n         blur :   0 , \n         stroke :   false , \n         fill :   false \n     }, \n     underline :   { \n         color :   #000 , \n         thinkness :   0 , \n         offset :   0 \n     }, \n     align :   left ,    // 0| left |1| center |2| right \n     maxLines :   0 , \n     fixedWidth :   0 , \n     fixedHeight :   0 , \n     testString :   |M\u00c9qgy , \n     wrap :   { \n         mode :   none       // 0| none |1| word |2| char | character \n         width :   null \n     }  }   Add text from JSON  var   txt   =   scene . make . rexBBCodeText ({ \n     x :   100 , \n     y :   100 , \n     padding :   { \n         left :   64 , \n         right :   16 , \n         top :   20 , \n         bottom :   40 \n         //x: 32,    // 32px padding on the left/right \n         //y: 16     // 16px padding on the top/bottom \n     }, \n     text :   Text\\nGame Object\\nCreated from config , \n     style :   { \n         fontSize :   64px , \n         fontFamily :   Arial , \n         color :   #ffffff , \n         align :   center , \n         backgroundColor :   #ff00ff \n     }  });", 
            "title": "Add text object"
        }, 
        {
            "location": "/bbcodetext/index.html#word-wrap", 
            "text": "Wrap by word or character.  var   txt   =   scene . make . text ({ \n     x :   400 , \n     y :   100 , \n     text :   The sky above the port was the color of television, tuned to a dead channel. , \n     origin :   {   x :   0.5 ,   y :   0.5   }, \n     style :   { \n         font :   bold 25px Arial , \n         fill :   white , \n         wrap :   { \n             mode :   word       // 0| none |1| word |2| char | character \n             width :   300 \n         } \n     }  });", 
            "title": "Word wrap"
        }, 
        {
            "location": "/bbcodetext/index.html#set-text", 
            "text": "txt . setText ( [b]h[/b]ello );  // var curContent = txt.text;", 
            "title": "Set text"
        }, 
        {
            "location": "/bbcodetext/index.html#set-style", 
            "text": "txt . setStyle ( style );  txt . setFont ( font );    // font: {fontFamily, fontSize, fontStyle}  txt . setFontFamily ( family );  txt . setFontSize ( size );  txt . setFontStyle ( style );", 
            "title": "Set style"
        }, 
        {
            "location": "/bbcodetext/index.html#set-color", 
            "text": "txt . setColor ( color );  txt . setStroke ( color ,   thickness );  txt . setBackgroundColor ( color );  txt . setFill ( color );", 
            "title": "Set color"
        }, 
        {
            "location": "/bbcodetext/index.html#set-shadow", 
            "text": "txt . setShadow ( x ,   y ,   color ,   blur ,   shadowStroke ,   shadowFill );  txt . setShadowOffset ( x ,   y );  txt . setShadowColor ( color );  txt . setShadowBlur ( blur );  txt . setShadowStroke ( enabled );  txt . setShadowFill ( enabled );", 
            "title": "Set shadow"
        }, 
        {
            "location": "/bbcodetext/index.html#set-underline", 
            "text": "txt . setUnderline ( color ,   thinkness ,   ofset );  txt . setUnderlineColor ( color );  txt . setUnderlineThinkness ( thinkness );  txt . setUnderlineOffset ( ofset );", 
            "title": "Set underline"
        }, 
        {
            "location": "/bbcodetext/index.html#set-padding", 
            "text": "txt . setPadding ( left ,   top ,   right ,   bottom );  // txt.setPadding(padding); // padding: {left, top, right, bottom}", 
            "title": "Set padding"
        }, 
        {
            "location": "/bbcodetext/index.html#set-max-lines", 
            "text": "txt . setMaxLines ( max );", 
            "title": "Set max lines"
        }, 
        {
            "location": "/bbcodetext/index.html#set-wrap-properties", 
            "text": "txt . setWrapMode ( mode );    // mode: 0| none |1| word |2| char | character  txt . setWrapWidth ( width );", 
            "title": "Set wrap properties"
        }, 
        {
            "location": "/bbcodetext/index.html#set-object-size", 
            "text": "txt . setFixedSize ( width ,   height );", 
            "title": "Set object size"
        }, 
        {
            "location": "/tagtext/index.html", 
            "text": "Introduction\n\n\nDisplays text with multi-color, font face, or font size with tags.\n\n\n\n\nAuthor: Rex\n\n\nA kind of game object, installed by global plugin\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nSnapshot\n\n\nvar\n \ntags\n \n=\n \n{\n\n    \nname0\n:\n \n{\n\n        \ncolor\n:\n \nred\n,\n\n        \nfontStyle\n:\n \nbold italic\n\n    \n},\n\n    \nname1\n:\n \n{\n\n        \ncolor\n:\n \nnone\n,\n\n        \nstroke\n:\n \n{\n\n            \ncolor\n:\n \nyellow\n,\n\n            \nthinkness\n:\n \n1\n\n        \n}\n\n    \n}\n    \n\n}\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nadd\n.\nrexTagText\n(\nx\n,\n \ny\n,\n \nstyle=\nname0\nh\n/style\nello\n,\n \n{\ntags\n:\ntags\n});\n\n\ntxt\n.\nsetText\n(\nstyle=\nname1\nwor\n/style\nld\n);\n\n\n\n\n\nInstall plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nTagTextPlugin\n,\n\n            \nplugin\n:\n \nTagTextPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nAdd text object\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nadd\n.\nrexTagText\n(\nx\n,\n \ny\n,\n \nstyle=\nname0\nh\n/style\nello\n,\n \n{\ntags\n:\ntags\n});\n\n\n// var txt = scene.add.rexTagText(x, y, \nstyle=\nname0\nh\n/style\nello\n, { fontFamily: \nArial\n, fontSize: 64, color: \n#00ff00\n, tags:tags });\n\n\n\nProperties of a tag\n\n\n{\n\n    \nfontFamily\n:\n \nCourier\n,\n   \n// or \nfamily\n, \nfont-family\n\n    \nfontSize\n:\n \n16px\n,\n        \n// or \nsize\n, \nfont-size\n\n    \nfontStyle\n:\n \nbold italic\n,\n// or \nstyle\n, \nfont-style\n\n    \ncolor\n:\n \nred\n,\n            \n// or \nfont-color\n\n    \nstroke\n:\n \n{\n\n        \ncolor\n:\n \nblue\n,\n\n        \nthinkness\n:\n \n1\n\n    \n},\n\n    \nshadow\n:\n \n{\n\n        \ncolor\n:\n \nblack\n,\n\n        \noffsetX\n:\n \n2\n,\n\n        \noffsetY\n:\n \n2\n,\n\n        \nblur\n:\n \n2\n\n    \n},\n\n    \nunderline\n:\n \n{\n            \n// or \nu\n\n        \ncolor\n:\n \nblue\n,\n\n        \nthinkness\n:\n \n3\n,\n\n        \noffset\n:\n \n-\n1\n\n    \n}\n\n\n}\n\n\n\n\n\nDefault style\n\n\n{\n\n    \nfontFamily\n:\n \nCourier\n,\n\n    \nfontSize\n:\n \n16px\n,\n\n    \nfontStyle\n:\n \n,\n\n    \nbackgroundColor\n:\n \nnull\n,\n\n    \ncolor\n:\n \n#fff\n,\n\n    \nstroke\n:\n \n#fff\n,\n\n    \nstrokeThickness\n:\n \n0\n,\n\n    \nshadow\n:\n \n{\n\n        \noffsetX\n:\n \n0\n,\n\n        \noffsetY\n:\n \n0\n,\n\n        \ncolor\n:\n \n#000\n,\n\n        \nblur\n:\n \n0\n,\n\n        \nstroke\n:\n \nfalse\n,\n\n        \nfill\n:\n \nfalse\n\n    \n},\n\n    \nunderline\n:\n \n{\n\n        \ncolor\n:\n \n#000\n,\n\n        \nthinkness\n:\n \n0\n,\n\n        \noffset\n:\n \n0\n\n    \n},\n\n    \nalign\n:\n \nleft\n,\n  \n// 0|\nleft\n|1|\ncenter\n|2|\nright\n\n    \nmaxLines\n:\n \n0\n,\n\n    \nfixedWidth\n:\n \n0\n,\n\n    \nfixedHeight\n:\n \n0\n,\n\n    \ntestString\n:\n \n|M\u00c9qgy\n,\n\n    \nwrap\n:\n \n{\n\n        \nmode\n:\n \nnone\n     \n// 0|\nnone\n|1|\nword\n|2|\nchar\n|\ncharacter\n\n        \nwidth\n:\n \nnull\n\n    \n}\n\n\n    \ntags\n:\n \n{\n\n\n    \n}\n\n\n}\n\n\n\n\n\nAdd text from JSON\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nmake\n.\nrexTagText\n({\n\n    \nx\n:\n \n100\n,\n\n    \ny\n:\n \n100\n,\n\n    \npadding\n:\n \n{\n\n        \nleft\n:\n \n64\n,\n\n        \nright\n:\n \n16\n,\n\n        \ntop\n:\n \n20\n,\n\n        \nbottom\n:\n \n40\n\n        \n//x: 32,    // 32px padding on the left/right\n\n        \n//y: 16     // 16px padding on the top/bottom\n\n    \n},\n\n    \ntext\n:\n \nText\\nGame Object\\nCreated from config\n,\n\n    \nstyle\n:\n \n{\n\n        \nfontSize\n:\n \n64px\n,\n\n        \nfontFamily\n:\n \nArial\n,\n\n        \ncolor\n:\n \n#ffffff\n,\n\n        \nalign\n:\n \ncenter\n,\n\n        \nbackgroundColor\n:\n \n#ff00ff\n,\n\n        \ntags\n:\n \n{}\n\n    \n}\n\n\n});\n\n\n\n\n\nWord wrap\n\n\nWrap by word or character.\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nmake\n.\ntext\n({\n\n    \nx\n:\n \n400\n,\n\n    \ny\n:\n \n100\n,\n\n    \ntext\n:\n \nThe sky above the port was the color of television, tuned to a dead channel.\n,\n\n    \norigin\n:\n \n{\n \nx\n:\n \n0.5\n,\n \ny\n:\n \n0.5\n \n},\n\n    \nstyle\n:\n \n{\n\n        \nfont\n:\n \nbold 25px Arial\n,\n\n        \nfill\n:\n \nwhite\n,\n\n        \nwrap\n:\n \n{\n\n            \nmode\n:\n \nword\n     \n// 0|\nnone\n|1|\nword\n|2|\nchar\n|\ncharacter\n\n            \nwidth\n:\n \n300\n\n        \n}\n\n    \n}\n\n\n});\n\n\n\n\n\nSet text\n\n\ntxt\n.\nsetText\n(\nstyle=\nname1\nwor\n/style\nld\n);\n\n\n// var curContent = txt.text;\n\n\n\n\n\nSet style\n\n\ntxt\n.\nsetStyle\n(\nstyle\n);\n\n\ntxt\n.\nsetFont\n(\nfont\n);\n  \n// font: {fontFamily, fontSize, fontStyle}\n\n\ntxt\n.\nsetFontFamily\n(\nfamily\n);\n\n\ntxt\n.\nsetFontSize\n(\nsize\n);\n\n\ntxt\n.\nsetFontStyle\n(\nstyle\n);\n\n\n\n\n\nSet color\n\n\ntxt\n.\nsetColor\n(\ncolor\n);\n\n\ntxt\n.\nsetStroke\n(\ncolor\n,\n \nthickness\n);\n\n\ntxt\n.\nsetBackgroundColor\n(\ncolor\n);\n\n\ntxt\n.\nsetFill\n(\ncolor\n);\n\n\n\n\n\nSet shadow\n\n\ntxt\n.\nsetShadow\n(\nx\n,\n \ny\n,\n \ncolor\n,\n \nblur\n,\n \nshadowStroke\n,\n \nshadowFill\n);\n\n\ntxt\n.\nsetShadowOffset\n(\nx\n,\n \ny\n);\n\n\ntxt\n.\nsetShadowColor\n(\ncolor\n);\n\n\ntxt\n.\nsetShadowBlur\n(\nblur\n);\n\n\ntxt\n.\nsetShadowStroke\n(\nenabled\n);\n\n\ntxt\n.\nsetShadowFill\n(\nenabled\n);\n\n\n\n\n\nSet underline\n\n\ntxt\n.\nsetUnderline\n(\ncolor\n,\n \nthinkness\n,\n \nofset\n);\n\n\ntxt\n.\nsetUnderlineColor\n(\ncolor\n);\n\n\ntxt\n.\nsetUnderlineThinkness\n(\nthinkness\n);\n\n\ntxt\n.\nsetUnderlineOffset\n(\nofset\n);\n\n\n\n\n\nSet padding\n\n\ntxt\n.\nsetPadding\n(\nleft\n,\n \ntop\n,\n \nright\n,\n \nbottom\n);\n\n\n// txt.setPadding(padding); // padding: {left, top, right, bottom}\n\n\n\n\n\nSet max lines\n\n\ntxt\n.\nsetMaxLines\n(\nmax\n);\n\n\n\n\n\nSet wrap properties\n\n\ntxt\n.\nsetWrapMode\n(\nmode\n);\n  \n// mode: 0|\nnone\n|1|\nword\n|2|\nchar\n|\ncharacter\n\n\ntxt\n.\nsetWrapWidth\n(\nwidth\n);\n\n\n\n\n\nSet object size\n\n\ntxt\n.\nsetFixedSize\n(\nwidth\n,\n \nheight\n);\n\n\n\n\n\nInline style\n\n\nDefine style inline text.\n\n\n\n\nstyle='color:red'\nSome text\n/style\n\n\nstyle='size:30px'\nSome text\n/style\n\n\nstyle='stroke:blue 1px'\nSome text\n/style\n (color thinkness)\n\n\nstyle='shadow:blue 2px 2px 2px'\nSome text\n/style\n (color offsetX offsetY blur)\n\n\nstyle='underline:blue 3px -1px'\nSome text\n/style\n (color thinkness offset)\n\n\n\n\nOr mix them\n\n\n\n\nstyle='color:red;size:30px'\nSome text\n/style", 
            "title": "Tag Text"
        }, 
        {
            "location": "/tagtext/index.html#introduction", 
            "text": "Displays text with multi-color, font face, or font size with tags.   Author: Rex  A kind of game object, installed by global plugin", 
            "title": "Introduction"
        }, 
        {
            "location": "/tagtext/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/tagtext/index.html#usage", 
            "text": "Sample code", 
            "title": "Usage"
        }, 
        {
            "location": "/tagtext/index.html#snapshot", 
            "text": "var   tags   =   { \n     name0 :   { \n         color :   red , \n         fontStyle :   bold italic \n     }, \n     name1 :   { \n         color :   none , \n         stroke :   { \n             color :   yellow , \n             thinkness :   1 \n         } \n     }      }  var   txt   =   scene . add . rexTagText ( x ,   y ,   style= name0 h /style ello ,   { tags : tags });  txt . setText ( style= name1 wor /style ld );", 
            "title": "Snapshot"
        }, 
        {
            "location": "/tagtext/index.html#install-plugin", 
            "text": "Install plugin in  configuration of game  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   TagTextPlugin , \n             plugin :   TagTextPlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install plugin"
        }, 
        {
            "location": "/tagtext/index.html#add-text-object", 
            "text": "var   txt   =   scene . add . rexTagText ( x ,   y ,   style= name0 h /style ello ,   { tags : tags });  // var txt = scene.add.rexTagText(x, y,  style= name0 h /style ello , { fontFamily:  Arial , fontSize: 64, color:  #00ff00 , tags:tags });  \nProperties of a tag  { \n     fontFamily :   Courier ,     // or  family ,  font-family \n     fontSize :   16px ,          // or  size ,  font-size \n     fontStyle :   bold italic , // or  style ,  font-style \n     color :   red ,              // or  font-color \n     stroke :   { \n         color :   blue , \n         thinkness :   1 \n     }, \n     shadow :   { \n         color :   black , \n         offsetX :   2 , \n         offsetY :   2 , \n         blur :   2 \n     }, \n     underline :   {              // or  u \n         color :   blue , \n         thinkness :   3 , \n         offset :   - 1 \n     }  }   Default style  { \n     fontFamily :   Courier , \n     fontSize :   16px , \n     fontStyle :   , \n     backgroundColor :   null , \n     color :   #fff , \n     stroke :   #fff , \n     strokeThickness :   0 , \n     shadow :   { \n         offsetX :   0 , \n         offsetY :   0 , \n         color :   #000 , \n         blur :   0 , \n         stroke :   false , \n         fill :   false \n     }, \n     underline :   { \n         color :   #000 , \n         thinkness :   0 , \n         offset :   0 \n     }, \n     align :   left ,    // 0| left |1| center |2| right \n     maxLines :   0 , \n     fixedWidth :   0 , \n     fixedHeight :   0 , \n     testString :   |M\u00c9qgy , \n     wrap :   { \n         mode :   none       // 0| none |1| word |2| char | character \n         width :   null \n     } \n\n     tags :   { \n\n     }  }   Add text from JSON  var   txt   =   scene . make . rexTagText ({ \n     x :   100 , \n     y :   100 , \n     padding :   { \n         left :   64 , \n         right :   16 , \n         top :   20 , \n         bottom :   40 \n         //x: 32,    // 32px padding on the left/right \n         //y: 16     // 16px padding on the top/bottom \n     }, \n     text :   Text\\nGame Object\\nCreated from config , \n     style :   { \n         fontSize :   64px , \n         fontFamily :   Arial , \n         color :   #ffffff , \n         align :   center , \n         backgroundColor :   #ff00ff , \n         tags :   {} \n     }  });", 
            "title": "Add text object"
        }, 
        {
            "location": "/tagtext/index.html#word-wrap", 
            "text": "Wrap by word or character.  var   txt   =   scene . make . text ({ \n     x :   400 , \n     y :   100 , \n     text :   The sky above the port was the color of television, tuned to a dead channel. , \n     origin :   {   x :   0.5 ,   y :   0.5   }, \n     style :   { \n         font :   bold 25px Arial , \n         fill :   white , \n         wrap :   { \n             mode :   word       // 0| none |1| word |2| char | character \n             width :   300 \n         } \n     }  });", 
            "title": "Word wrap"
        }, 
        {
            "location": "/tagtext/index.html#set-text", 
            "text": "txt . setText ( style= name1 wor /style ld );  // var curContent = txt.text;", 
            "title": "Set text"
        }, 
        {
            "location": "/tagtext/index.html#set-style", 
            "text": "txt . setStyle ( style );  txt . setFont ( font );    // font: {fontFamily, fontSize, fontStyle}  txt . setFontFamily ( family );  txt . setFontSize ( size );  txt . setFontStyle ( style );", 
            "title": "Set style"
        }, 
        {
            "location": "/tagtext/index.html#set-color", 
            "text": "txt . setColor ( color );  txt . setStroke ( color ,   thickness );  txt . setBackgroundColor ( color );  txt . setFill ( color );", 
            "title": "Set color"
        }, 
        {
            "location": "/tagtext/index.html#set-shadow", 
            "text": "txt . setShadow ( x ,   y ,   color ,   blur ,   shadowStroke ,   shadowFill );  txt . setShadowOffset ( x ,   y );  txt . setShadowColor ( color );  txt . setShadowBlur ( blur );  txt . setShadowStroke ( enabled );  txt . setShadowFill ( enabled );", 
            "title": "Set shadow"
        }, 
        {
            "location": "/tagtext/index.html#set-underline", 
            "text": "txt . setUnderline ( color ,   thinkness ,   ofset );  txt . setUnderlineColor ( color );  txt . setUnderlineThinkness ( thinkness );  txt . setUnderlineOffset ( ofset );", 
            "title": "Set underline"
        }, 
        {
            "location": "/tagtext/index.html#set-padding", 
            "text": "txt . setPadding ( left ,   top ,   right ,   bottom );  // txt.setPadding(padding); // padding: {left, top, right, bottom}", 
            "title": "Set padding"
        }, 
        {
            "location": "/tagtext/index.html#set-max-lines", 
            "text": "txt . setMaxLines ( max );", 
            "title": "Set max lines"
        }, 
        {
            "location": "/tagtext/index.html#set-wrap-properties", 
            "text": "txt . setWrapMode ( mode );    // mode: 0| none |1| word |2| char | character  txt . setWrapWidth ( width );", 
            "title": "Set wrap properties"
        }, 
        {
            "location": "/tagtext/index.html#set-object-size", 
            "text": "txt . setFixedSize ( width ,   height );", 
            "title": "Set object size"
        }, 
        {
            "location": "/tagtext/index.html#inline-style", 
            "text": "Define style inline text.   style='color:red' Some text /style  style='size:30px' Some text /style  style='stroke:blue 1px' Some text /style  (color thinkness)  style='shadow:blue 2px 2px 2px' Some text /style  (color offsetX offsetY blur)  style='underline:blue 3px -1px' Some text /style  (color thinkness offset)   Or mix them   style='color:red;size:30px' Some text /style", 
            "title": "Inline style"
        }, 
        {
            "location": "/texttyping/index.html", 
            "text": "Introduction\n\n\nTyping text on text object, \nbbcode text object\n, or \ntag text boject\n.\n\n\n\n\nAuthor: Rex\n\n\nMember of text object\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nrexTextTyping\n \nfrom\n \n./plugins/texttyping.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nTextTypingPlugin\n \nfrom\n \n./plugins/texttyping-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexTextTyping\n,\n\n            \nplugin\n:\n \nTextTypingPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate instance\n\n\ntxt\n.\ntyping\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexTextTyping\n).\nadd\n(\ntxt\n,\n \n{\n\n    \n//speed: 333,       // typing speed in ms\n\n    \n//typeMode: 0,      //0|\nleft-to-right\n|1|\nright-to-left\n|2|\nmiddle-to-sides\n|3|\nsides-to-middle\n\n    \n//setTextCallback: function(text, isLastChar, insertIdx){ return text; }  // callback before set-text\n\n    \n//setTextCallbackScope: null\n\n\n});\n\n\n\n\n\nConfiguration\n\n\n\n\nspeed: typing speed in ms\n\n\ntypeMode :\n\n\n'left-to-right'\n, or \n0\n : typing characters from left to right.\n\n\n'right-to-left'\n, or \n1\n : typing characters from right to left.\n\n\n'middle-to-sides'\n, or \n2\n : typing characters from middle to sides, optional.\n\n\n'sides-to-middle'\n, or \n3\n : typing characters from sides to middle.    \n\n\n\n\n\n\nsetTextCallback : callback befor set-text, to decorate display text.\n    \nfunction\n(\ntext\n,\n \nisLastChar\n,\n \ninsertIdx\n)\n \n{\n \nreturn\n \ntext\n;\n \n}\n\n\n\n\nsetTextCallbackScope : scope of setTextCallback function.\n\n\n\n\nStart typing\n\n\ntxt\n.\ntyping\n.\nstart\n(\nABCDEFG\n);\n\n\n// txt.typing.start(\nABCDEFG\n, 333);  // speed in ms\n\n\n\n\n\nEvents\n\n\n\n\nOn typing :\n\n\n\n\ntxt\n.\ntyping\n.\non\n(\ntype\n,\n \nfunction\n(){});\n\n\n\n\n\n\n\nOn typing completed :\n\n\n\n\ntxt\n.\ntyping\n.\non\n(\ncomplete\n,\n \nfunction\n(){});\n\n\n\n\n\nOther commands\n\n\n\n\nIs-typing state\n\n\n\n\nvar\n \nisTyping\n \n=\n \ntxt\n.\ntyping\n.\nisTyping\n;\n\n\n\n\n\n\n\nStop typing\n\n\n\n\ntxt\n.\ntyping\n.\nstop\n();\n\n\n// txt.typing.stop(true);;  // stop and show all text\n\n\n\n\n\n\n\nPause typing\n\n\n\n\ntxt\n.\ntyping\n.\npause\n();\n\n\n\n\n\n\n\nResume typing\n\n\n\n\ntxt\n.\ntyping\n.\nresume\n();\n\n\n\n\n\n\n\nSet typing speed\n\n\n\n\ntxt\n.\ntyping\n.\nsetTypeSpeed\n(\nspeed\n);\n  \n// speed in ms\n\n\n\n\n\nSet speed in \ntyping\n event or setTextCallback to change typing speed of remaining text.\n\n\n\n\nTyping more text\n\n\n\n\ntxt\n.\ntyping\n.\nappendText\n(\ntext\n);\n\n\n\n\n\n\n\nSet typing mode\n\n\n\n\ntxt\n.\ntyping\n.\nsetTypeMode\n(\nmode\n);\n  \n//0|\nleft-to-right\n|1|\nright-to-left\n|2|\nmiddle-to-sides\n|3|\nsides-to-middle", 
            "title": "Typing"
        }, 
        {
            "location": "/texttyping/index.html#introduction", 
            "text": "Typing text on text object,  bbcode text object , or  tag text boject .   Author: Rex  Member of text object", 
            "title": "Introduction"
        }, 
        {
            "location": "/texttyping/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/texttyping/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/texttyping/index.html#import-class", 
            "text": "import   rexTextTyping   from   ./plugins/texttyping.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/texttyping/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   TextTypingPlugin   from   ./plugins/texttyping-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexTextTyping , \n             plugin :   TextTypingPlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/texttyping/index.html#create-instance", 
            "text": "txt . typing   =   scene . plugins . get ( rexTextTyping ). add ( txt ,   { \n     //speed: 333,       // typing speed in ms \n     //typeMode: 0,      //0| left-to-right |1| right-to-left |2| middle-to-sides |3| sides-to-middle \n     //setTextCallback: function(text, isLastChar, insertIdx){ return text; }  // callback before set-text \n     //setTextCallbackScope: null  });   Configuration   speed: typing speed in ms  typeMode :  'left-to-right' , or  0  : typing characters from left to right.  'right-to-left' , or  1  : typing characters from right to left.  'middle-to-sides' , or  2  : typing characters from middle to sides, optional.  'sides-to-middle' , or  3  : typing characters from sides to middle.        setTextCallback : callback befor set-text, to decorate display text.\n     function ( text ,   isLastChar ,   insertIdx )   {   return   text ;   }   setTextCallbackScope : scope of setTextCallback function.", 
            "title": "Create instance"
        }, 
        {
            "location": "/texttyping/index.html#start-typing", 
            "text": "txt . typing . start ( ABCDEFG );  // txt.typing.start( ABCDEFG , 333);  // speed in ms", 
            "title": "Start typing"
        }, 
        {
            "location": "/texttyping/index.html#events", 
            "text": "On typing :   txt . typing . on ( type ,   function (){});    On typing completed :   txt . typing . on ( complete ,   function (){});", 
            "title": "Events"
        }, 
        {
            "location": "/texttyping/index.html#other-commands", 
            "text": "Is-typing state   var   isTyping   =   txt . typing . isTyping ;    Stop typing   txt . typing . stop ();  // txt.typing.stop(true);;  // stop and show all text    Pause typing   txt . typing . pause ();    Resume typing   txt . typing . resume ();    Set typing speed   txt . typing . setTypeSpeed ( speed );    // speed in ms   Set speed in  typing  event or setTextCallback to change typing speed of remaining text.   Typing more text   txt . typing . appendText ( text );    Set typing mode   txt . typing . setTypeMode ( mode );    //0| left-to-right |1| right-to-left |2| middle-to-sides |3| sides-to-middle", 
            "title": "Other commands"
        }, 
        {
            "location": "/textpage/index.html", 
            "text": "Introduction\n\n\nDisplay text page by page on text object, \nbbcode text object\n, or \ntag text boject\n.\n\n\n\n\nAuthor: Rex\n\n\nMember of text object\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nrexTextPage\n \nfrom\n \n./plugins/textpage.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nTextPagePlugin\n \nfrom\n \n./plugins/textpage-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexTextPage\n,\n\n            \nplugin\n:\n \nTextPagePlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate instance\n\n\nvar\n \ntxt\n \n=\n \nscene\n.\nadd\n.\ntext\n(\nx\n,\n \ny\n,\n \n,\n \n{\n\n    \nwordWrap\n:\n  \n{\n\n        \nwidth\n:\n \n500\n\n    \n},\n\n    \nmaxLines\n:\n \n7\n\n\n});\n\n\ntxt\n.\npage\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexTextPage\n).\nadd\n(\ntxt\n,\n \n{\n\n    \n//text: \n,       // content in string or array\n\n    \n//wrap: false     // set true to add \n\\n\n in each line end\n\n\n});\n\n\n\n\n\nProperties\n\n\n\n\ntext: content in string or array, optional\n\n\n\n\nSet content\n\n\ntxt\n.\npage\n.\nsetText\n(\ntext\n);\n   \n// content in string or array\n\n\n\n\n\n\n\nAppend text\n\n\n\n\ntxt\n.\npage\n.\nappendText\n(\ntext\n);\n \n// content in string or array\n\n\n\n\n\nShow page\n\n\ntxt\n.\npage\n.\nshowPage\n();\n         \n// display current page\n\n\ntxt\n.\npage\n.\nshowNextPage\n();\n     \n// display next page\n\n\ntxt\n.\npage\n.\nshowPreviousPage\n();\n \n// display previous page\n\n\n\n\n\nInitial page index is \n-1\n, so user could call \ntxt.page.showNextPage()\n to display first page.\n\n\nGet lines of page\n\n\nvar\n \nlines\n \n=\n \ntxt\n.\npage\n.\ngetPage\n();\n         \n// get lines of current page\n\n\nvar\n \nlines\n \n=\n \ntxt\n.\npage\n.\ngetNextPage\n();\n     \n// get lines of next page\n\n\nvar\n \nlines\n \n=\n \ntxt\n.\npage\n.\ngetPreviousPage\n();\n \n// get lines of previous page\n\n\n\n\n\nOther properties\n\n\n\n\nCurrent page index : \ntxt.page.pageIdx\n\n\nNumber of pages : \ntxt.page.pageCount\n\n\nIs last page: \ntxt.page.isLastPage\n\n\nIs first page: \ntxt.page.isFirstPage", 
            "title": "Page"
        }, 
        {
            "location": "/textpage/index.html#introduction", 
            "text": "Display text page by page on text object,  bbcode text object , or  tag text boject .   Author: Rex  Member of text object", 
            "title": "Introduction"
        }, 
        {
            "location": "/textpage/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/textpage/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/textpage/index.html#import-class", 
            "text": "import   rexTextPage   from   ./plugins/textpage.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/textpage/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   TextPagePlugin   from   ./plugins/textpage-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexTextPage , \n             plugin :   TextPagePlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/textpage/index.html#create-instance", 
            "text": "var   txt   =   scene . add . text ( x ,   y ,   ,   { \n     wordWrap :    { \n         width :   500 \n     }, \n     maxLines :   7  });  txt . page   =   scene . plugins . get ( rexTextPage ). add ( txt ,   { \n     //text:  ,       // content in string or array \n     //wrap: false     // set true to add  \\n  in each line end  });   Properties   text: content in string or array, optional", 
            "title": "Create instance"
        }, 
        {
            "location": "/textpage/index.html#set-content", 
            "text": "txt . page . setText ( text );     // content in string or array    Append text   txt . page . appendText ( text );   // content in string or array", 
            "title": "Set content"
        }, 
        {
            "location": "/textpage/index.html#show-page", 
            "text": "txt . page . showPage ();           // display current page  txt . page . showNextPage ();       // display next page  txt . page . showPreviousPage ();   // display previous page   Initial page index is  -1 , so user could call  txt.page.showNextPage()  to display first page.", 
            "title": "Show page"
        }, 
        {
            "location": "/textpage/index.html#get-lines-of-page", 
            "text": "var   lines   =   txt . page . getPage ();           // get lines of current page  var   lines   =   txt . page . getNextPage ();       // get lines of next page  var   lines   =   txt . page . getPreviousPage ();   // get lines of previous page", 
            "title": "Get lines of page"
        }, 
        {
            "location": "/textpage/index.html#other-properties", 
            "text": "Current page index :  txt.page.pageIdx  Number of pages :  txt.page.pageCount  Is last page:  txt.page.isLastPage  Is first page:  txt.page.isFirstPage", 
            "title": "Other properties"
        }, 
        {
            "location": "/graphics/index.html", 
            "text": "Introduction\n\n\nDrawing on webgl or canvas, built-in game object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nAdd graphics object\n\n\nvar\n \ngraphics\n \n=\n \nscene\n.\nadd\n.\ngraphics\n();\n\n\n// var graphics = scene.add.graphics(x, y);\n\n\n\n\n\nDrawing commands\n\n\nSet style\n\n\n\n\n\n\nSet line style and fill style\n\n\ngraphics\n.\nsetDefaultStyles\n({\n\n    \nlineStyle\n:\n \n{\n\n        \nwidth\n:\n \n1\n,\n\n        \ncolor\n:\n \n0xffffff\n,\n\n        \nalpha\n:\n \n1\n\n    \n},\n\n    \nfillStyle\n:\n \n{\n\n        \ncolor\n:\n \n0xffffff\n,\n\n        \nalpha\n:\n \n1\n\n    \n}\n\n\n});\n\n\n\n\n\n\n\n\n\nSet line style\n\n\ngraphics\n.\nlineStyle\n(\nlineWidth\n,\n \ncolor\n,\n \nalpha\n);\n   \n// color: 0xRRGGBB\n\n\n\n\n\n\n\n\n\nSet fill style\n\n\ngraphics\n.\nfillStyle\n(\ncolor\n,\n \nalpha\n);\n   \n// color: 0xRRGGBB\n\n\n\n\n\n\n\n\n\nClear\n\n\ngraphics\n.\nclear\n();\n\n\n\n\n\nPath\n\n\ngraphics\n.\nbeginPath\n();\n\n\ngraphics\n.\nclosePath\n();\n\n\ngraphics\n.\nfillPath\n();\n\n\ngraphics\n.\nstrokePath\n();\n\n\n\n\n\nRectangle\n\n\ngraphics\n.\nfillRectShape\n(\nrect\n);\n \n// rect: {x, y, width, height}\n\n\ngraphics\n.\nfillRect\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n);\n\n\ngraphics\n.\nstrokeRectShape\n(\nrect\n);\n  \n// rect: {x, y, width, height}\n\n\ngraphics\n.\nstrokeRect\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n);\n\n\n\n\n\nTriangle\n\n\ngraphics\n.\nfillTriangleShape\n(\ntriangle\n);\n \n// triangle: {x1, y1, x2, y2, x3, y3}\n\n\ngraphics\n.\nfillTriangle\n(\nx1\n,\n \ny1\n,\n \nx2\n,\n \ny2\n,\n \nx3\n,\n \ny3\n);\n\n\ngraphics\n.\nstrokeTriangleShape\n(\ntriangle\n);\n \n// triangle: {x1, y1, x2, y2, x3, y3}\n\n\ngraphics\n.\nstrokeTriangle\n(\nx1\n,\n \ny1\n,\n \nx2\n,\n \ny2\n,\n \nx3\n,\n \ny3\n);\n\n\n\n\n\nPoint\n\n\ngraphics\n.\nfillPointShape\n(\npoint\n,\n \nsize\n);\n \n// point: {x, y}\n\n\ngraphics\n.\nfillPoint\n(\nx\n,\n \ny\n,\n \nsize\n);\n\n\n\n\n\nLine\n\n\ngraphics\n.\nstrokeLineShape\n(\nline\n);\n \n// point: {x1, y1, x2, y2}\n\n\ngraphics\n.\nlineBetween\n(\nx1\n,\n \ny1\n,\n \nx2\n,\n \ny2\n);\n\n\ngraphics\n.\nlineTo\n(\nx\n,\n \ny\n);\n\n\ngraphics\n.\nmoveTo\n(\nx\n,\n \ny\n);\n\n\ngraphics\n.\nlineFxTo\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nrgb\n);\n  \n// gradient width and color\n\n\ngraphics\n.\nmoveFxTo\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nrgb\n);\n  \n// gradient width and color\n\n\n\n\n\n\n\ngraphics.lineFxTo\n is equal to \ngraphics.lineTo\n in CANVAS render mode\n\n\ngraphics.moveFxTo\n is equal to \ngraphics.moveTo\n in CANVAS render mode\n\n\n\n\nLines\n\n\ngraphics\n.\nstrokePoints\n(\npoints\n,\n \nautoClose\n,\n \nendIndex\n);\n  \n// points: [{x, y}, ...]\n\n\ngraphics\n.\nfillPoints\n(\npoints\n,\n \nautoClose\n,\n \nendIndex\n);\n  \n// points: [{x, y}, ...]\n\n\n\n\n\nCircle\n\n\ngraphics\n.\nfillCircleShape\n(\ncircle\n);\n \n// circle: {x, y, radius}\n\n\ngraphics\n.\nfillCircle\n(\nx\n,\n \ny\n,\n \nradius\n);\n\n\ngraphics\n.\nstrokeCircleShape\n(\ncircle\n);\n  \n// circle: {x, y, radius}\n\n\ngraphics\n.\nfillCircle\n(\nx\n,\n \ny\n,\n \nradius\n);\n\n\ngraphics\n.\narc\n(\nx\n,\n \ny\n,\n \nradius\n,\n \nstartAngle\n,\n \nendAngle\n,\n \nanticlockwise\n);\n\n\n\n\n\nDraw or fill circle shape by points.\n\n\nEllipse\n\n\ngraphics\n.\nstrokeEllipseShape\n(\nellipse\n,\n \nsmoothness\n);\n   \n// ellipse: Phaser.Geom.Ellipse\n\n\ngraphics\n.\nstrokeEllipse\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n,\n \nsmoothness\n);\n\n\ngraphics\n.\nfillEllipseShape\n(\nellipse\n,\n \nsmoothness\n);\n    \n// ellipse: Phaser.Geom.Ellipse\n\n\ngraphics\n.\nfillEllipse\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n,\n \nsmoothness\n);\n\n\n\n\n\nDraw or fill ellipse shape by points.\n\n\nTransfer\n\n\ngraphics\n.\nsave\n();\n\n\ngraphics\n.\nrestore\n();\n\n\ngraphics\n.\ntranslate\n(\nx\n,\n \ny\n);\n\n\ngraphics\n.\nscale\n(\nx\n,\n \ny\n);\n\n\ngraphics\n.\nrotate\n(\nradians\n);\n\n\n\n\n\nGenerate texture\n\n\ngraphics\n.\ngenerateTexture\n(\nkey\n,\n \nwidth\n,\n \nheight\n);\n  \n// key: texture key", 
            "title": "Graphics"
        }, 
        {
            "location": "/graphics/index.html#introduction", 
            "text": "Drawing on webgl or canvas, built-in game object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/graphics/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/graphics/index.html#add-graphics-object", 
            "text": "var   graphics   =   scene . add . graphics ();  // var graphics = scene.add.graphics(x, y);", 
            "title": "Add graphics object"
        }, 
        {
            "location": "/graphics/index.html#drawing-commands", 
            "text": "", 
            "title": "Drawing commands"
        }, 
        {
            "location": "/graphics/index.html#set-style", 
            "text": "Set line style and fill style  graphics . setDefaultStyles ({ \n     lineStyle :   { \n         width :   1 , \n         color :   0xffffff , \n         alpha :   1 \n     }, \n     fillStyle :   { \n         color :   0xffffff , \n         alpha :   1 \n     }  });     Set line style  graphics . lineStyle ( lineWidth ,   color ,   alpha );     // color: 0xRRGGBB     Set fill style  graphics . fillStyle ( color ,   alpha );     // color: 0xRRGGBB", 
            "title": "Set style"
        }, 
        {
            "location": "/graphics/index.html#clear", 
            "text": "graphics . clear ();", 
            "title": "Clear"
        }, 
        {
            "location": "/graphics/index.html#path", 
            "text": "graphics . beginPath ();  graphics . closePath ();  graphics . fillPath ();  graphics . strokePath ();", 
            "title": "Path"
        }, 
        {
            "location": "/graphics/index.html#rectangle", 
            "text": "graphics . fillRectShape ( rect );   // rect: {x, y, width, height}  graphics . fillRect ( x ,   y ,   width ,   height );  graphics . strokeRectShape ( rect );    // rect: {x, y, width, height}  graphics . strokeRect ( x ,   y ,   width ,   height );", 
            "title": "Rectangle"
        }, 
        {
            "location": "/graphics/index.html#triangle", 
            "text": "graphics . fillTriangleShape ( triangle );   // triangle: {x1, y1, x2, y2, x3, y3}  graphics . fillTriangle ( x1 ,   y1 ,   x2 ,   y2 ,   x3 ,   y3 );  graphics . strokeTriangleShape ( triangle );   // triangle: {x1, y1, x2, y2, x3, y3}  graphics . strokeTriangle ( x1 ,   y1 ,   x2 ,   y2 ,   x3 ,   y3 );", 
            "title": "Triangle"
        }, 
        {
            "location": "/graphics/index.html#point", 
            "text": "graphics . fillPointShape ( point ,   size );   // point: {x, y}  graphics . fillPoint ( x ,   y ,   size );", 
            "title": "Point"
        }, 
        {
            "location": "/graphics/index.html#line", 
            "text": "graphics . strokeLineShape ( line );   // point: {x1, y1, x2, y2}  graphics . lineBetween ( x1 ,   y1 ,   x2 ,   y2 );  graphics . lineTo ( x ,   y );  graphics . moveTo ( x ,   y );  graphics . lineFxTo ( x ,   y ,   width ,   rgb );    // gradient width and color  graphics . moveFxTo ( x ,   y ,   width ,   rgb );    // gradient width and color    graphics.lineFxTo  is equal to  graphics.lineTo  in CANVAS render mode  graphics.moveFxTo  is equal to  graphics.moveTo  in CANVAS render mode", 
            "title": "Line"
        }, 
        {
            "location": "/graphics/index.html#lines", 
            "text": "graphics . strokePoints ( points ,   autoClose ,   endIndex );    // points: [{x, y}, ...]  graphics . fillPoints ( points ,   autoClose ,   endIndex );    // points: [{x, y}, ...]", 
            "title": "Lines"
        }, 
        {
            "location": "/graphics/index.html#circle", 
            "text": "graphics . fillCircleShape ( circle );   // circle: {x, y, radius}  graphics . fillCircle ( x ,   y ,   radius );  graphics . strokeCircleShape ( circle );    // circle: {x, y, radius}  graphics . fillCircle ( x ,   y ,   radius );  graphics . arc ( x ,   y ,   radius ,   startAngle ,   endAngle ,   anticlockwise );   Draw or fill circle shape by points.", 
            "title": "Circle"
        }, 
        {
            "location": "/graphics/index.html#ellipse", 
            "text": "graphics . strokeEllipseShape ( ellipse ,   smoothness );     // ellipse: Phaser.Geom.Ellipse  graphics . strokeEllipse ( x ,   y ,   width ,   height ,   smoothness );  graphics . fillEllipseShape ( ellipse ,   smoothness );      // ellipse: Phaser.Geom.Ellipse  graphics . fillEllipse ( x ,   y ,   width ,   height ,   smoothness );   Draw or fill ellipse shape by points.", 
            "title": "Ellipse"
        }, 
        {
            "location": "/graphics/index.html#transfer", 
            "text": "graphics . save ();  graphics . restore ();  graphics . translate ( x ,   y );  graphics . scale ( x ,   y );  graphics . rotate ( radians );", 
            "title": "Transfer"
        }, 
        {
            "location": "/graphics/index.html#generate-texture", 
            "text": "graphics . generateTexture ( key ,   width ,   height );    // key: texture key", 
            "title": "Generate texture"
        }, 
        {
            "location": "/canvas/index.html", 
            "text": "Introduction\n\n\nDrawing on \ncanvas\n.\n\n\n\n\nAuthor: Rex\n\n\nA kind of game object\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nInstall plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nCanvasPlugin\n,\n\n            \nplugin\n:\n \nCanvasPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate instance\n\n\nvar\n \ncanvas\n \n=\n \nscene\n.\nadd\n.\nrexCanvas\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n);\n\n\n\n\n\nAdd canvas from JSON\n\n\nvar\n \ncanvas\n \n=\n \nscene\n.\nmake\n.\nrexCanvas\n({\n\n    \nx\n:\n \n0\n,\n\n    \ny\n:\n \n0\n,\n\n    \nwidth\n:\n \n256\n,\n\n    \nheight\n:\n \n256\n,\n\n\n    \n//fill: null\n\n\n});\n\n\n\n\n\nClear or fill canvas\n\n\n\n\n\n\nClear\n\n\ncanvas\n.\nclear\n();\n\n\n\n\n\n\n\n\n\nFill color\n\n\ncanvas\n.\nfill\n(\ncolor\n);\n\n\n\n\n\n\n\n\n\nGet canvas elemet\n\n\nvar\n \ncanvasElem\n \n=\n \ncanvas\n.\ngetCanvas\n();\n\n\n// var context = canvasElem.getContext(\n2d\n);\n\n\n// Drawing on context\n\n\n\n\n\nUpdate display texture\n\n\ncanvas\n.\nneedRedraw\n();\n\n\n\n\n\nLoad or save texture\n\n\n\n\n\n\nSave canvas to texuture\n\n\ncanvas\n.\ngenerateTexture\n(\nkey\n,\n \nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n);\n\n\n\n\n\n\n\n\n\nCopy canvas from texture\n\n\ncanvas\n.\nloadTexture\n(\nkey\n,\n \nresize\n);\n\n\n\n\n\n\n\n\n\nCompare with \nGraphics object\n\n\n\n\n\n\nDrawing method\n\n\n\n\nThis canvas object draws stuff on canvas in WEBGL or CANVAS render mode.  \n\n\nGraphics object draws stuff on webgl render pipeline n WEBGL render mode.\n\n\n\n\n\n\n\n\nSize\n\n\n\n\nThis canvas object has size (width, height) and origin.  \n\n\nGraphics object does not have size and origin.", 
            "title": "Canvas"
        }, 
        {
            "location": "/canvas/index.html#introduction", 
            "text": "Drawing on  canvas .   Author: Rex  A kind of game object", 
            "title": "Introduction"
        }, 
        {
            "location": "/canvas/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/canvas/index.html#usage", 
            "text": "Sample code", 
            "title": "Usage"
        }, 
        {
            "location": "/canvas/index.html#install-plugin", 
            "text": "Install plugin in  configuration of game  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   CanvasPlugin , \n             plugin :   CanvasPlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install plugin"
        }, 
        {
            "location": "/canvas/index.html#create-instance", 
            "text": "var   canvas   =   scene . add . rexCanvas ( x ,   y ,   width ,   height );   Add canvas from JSON  var   canvas   =   scene . make . rexCanvas ({ \n     x :   0 , \n     y :   0 , \n     width :   256 , \n     height :   256 , \n\n     //fill: null  });", 
            "title": "Create instance"
        }, 
        {
            "location": "/canvas/index.html#clear-or-fill-canvas", 
            "text": "Clear  canvas . clear ();     Fill color  canvas . fill ( color );", 
            "title": "Clear or fill canvas"
        }, 
        {
            "location": "/canvas/index.html#get-canvas-elemet", 
            "text": "var   canvasElem   =   canvas . getCanvas ();  // var context = canvasElem.getContext( 2d );  // Drawing on context", 
            "title": "Get canvas elemet"
        }, 
        {
            "location": "/canvas/index.html#update-display-texture", 
            "text": "canvas . needRedraw ();", 
            "title": "Update display texture"
        }, 
        {
            "location": "/canvas/index.html#load-or-save-texture", 
            "text": "Save canvas to texuture  canvas . generateTexture ( key ,   x ,   y ,   width ,   height );     Copy canvas from texture  canvas . loadTexture ( key ,   resize );", 
            "title": "Load or save texture"
        }, 
        {
            "location": "/canvas/index.html#compare-with-graphics-object", 
            "text": "Drawing method   This canvas object draws stuff on canvas in WEBGL or CANVAS render mode.    Graphics object draws stuff on webgl render pipeline n WEBGL render mode.     Size   This canvas object has size (width, height) and origin.    Graphics object does not have size and origin.", 
            "title": "Compare with Graphics object"
        }, 
        {
            "location": "/tilemap/index.html", 
            "text": "Introduction\n\n\nDisplay of tiles map, built-in game object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nLoad tile map\n\n\nscene\n.\nload\n.\ntilemapWeltmeister\n(\nkey\n,\n \nurl\n);\n  \n// JSON\n\n\nscene\n.\nload\n.\ntilemapCSV\n(\nkey\n,\n \nurl\n);\n          \n// CSV\n\n\n\n\n\nAdd tile map object\n\n\n\n\nCreate tile map\n\n\nCreate map from tiled\n    \nvar\n \nmap\n \n=\n \nscene\n.\nadd\n.\ntilemap\n(\nkey\n);\n\n\n// var map = this.make.tilemap({ key: \nmap\n });\n\n\n\n\nCreate map from 2d array\n    \nvar\n \nconfig\n \n=\n \n{\n\n    \ndata\n:\n \ntileIdxArray\n,\n  \n// [ [], [], ... ]\n\n    \ntileWidth\n:\n \n32\n,\n\n    \ntileHeight\n:\n \n32\n,\n\n    \nwidth\n:\n \n10\n,\n\n    \nheight\n:\n \n10\n\n\n}\n\n\nvar\n \nmap\n \n=\n \nthis\n.\nmake\n.\ntilemap\n(\nconfig\n);\n\n\n\n\nCreate map from csv\n    \nvar\n \nconfig\n \n=\n \n{\n\n    \nkey\n:\n \nmap\n,\n     \n// csv file\n\n    \ntileWidth\n:\n \n32\n,\n\n    \ntileHeight\n:\n \n32\n\n\n}\n\n\nvar\n \nmap\n \n=\n \nthis\n.\nmake\n.\ntilemap\n(\nconfig\n);\n\n\n\n\n\n\n\n\nAdd tile set image\n    \nvar\n \ntileset\n \n=\n \nmap\n.\naddTilesetImage\n(\ntilesetName\n,\n \nkey\n);\n \n// key: texture key\n\n\n// var tileset = map.addTilesetImage(tilesetName);  // key = tilesetName\n\n\n// var tileset = map.addTilesetImage(tilesetName, key, tileWidth, tileHeight, tileMargin, tileSpacing, gid);\n\n\n\n\nCreate layer object to render tile image, a tile map object could have many layers. Layer object is a kind of game object.\n\n\nStatic\n    \nvar\n \nlayer\n \n=\n \nmap\n.\ncreateStaticLayer\n(\nlayerID\n,\n \ntileset\n);\n\n\n// var layer = map.createStaticLayer(layerID, tileset, x, y); // x, y : offset in pxiels\n\n\n\n\nDynamic\n    \nvar\n \nlayer\n \n=\n \nmap\n.\ncreateDynamicLayer\n(\nlayerID\n,\n \ntileset\n);\n\n\n// var layer = map.createDynamicLayer(layerID, tileset, x, y); // x, y : offset in pxiels\n\n\n\n\nBlank dynamic\n    \nvar\n \nlayer\n \n=\n \nmap\n.\ncreateBlankDynamicLayer\n(\nlayerID\n,\n \ntileset\n);\n\n\n// var layer = map.createBlankDynamicLayer(layerID, tileset, x, y); // x, y : offset in pxiels\n\n\n\n\n\n\n\n\nCreate sprite objects with tile ID (optional)\n    \nvar\n \nsprites\n \n=\n \nmap\n.\ncreateFromObjects\n(\nname\n,\n \nid\n,\n \nspriteConfig\n);\n\n\n// var sprites = map.createFromObjects(name, id, spriteConfig, scene);\n\n\n\n\nname: name of the object layer\n\n\nid: gid (number), or id (number), or name (string)\n\n\nspriteConfig: The config object to pass into the Sprite creator (i.e. \nscene.make.sprite\n). Extend spriteConfig with properties of object (\ntype\n, \nx\n, \ny\n, \nrotation\n, \nvisible\n, \nwidth\n, \nheight\n, ... etc)\n\n\n\n\n\n\n\n\nMap\n\n\nSelect current layer\n\n\nmap\n.\nsetLayer\n(\nlayer\n);\n  \n// layer name, layer index\n\n\n// map.layer = layer;\n\n\n\n\n\nSet tile size\n\n\nmap\n.\nsetBaseTileSize\n(\ntileWidth\n,\n \ntileHeight\n);\n\n\n\n\n\nDraw on graphics\n\n\nvar\n \nstyleConfig\n \n=\n \n{\n\n    \ntileColor\n:\n \nnew\n \nPhaser\n.\nDisplay\n.\nColor\n(\n105\n,\n \n210\n,\n \n231\n,\n \n150\n),\n         \n// null\n\n    \ncollidingTileColor\n:\n \nnew\n \nPhaser\n.\nDisplay\n.\nColor\n(\n243\n,\n \n134\n,\n \n48\n,\n \n200\n),\n \n// null\n\n    \nfaceColor\n:\n \nnew\n \nPhaser\n.\nDisplay\n.\nColor\n(\n40\n,\n \n39\n,\n \n37\n,\n \n150\n)\n             \n// null\n\n\n}\n\n\nmap\n.\nrenderDebug\n(\ngraphics\n,\n \nstyleConfig\n);\n\n\n// map.renderDebug(graphics, styleConfig, layer);\n\n\n\n\n\nTile\n\n\nGet tile\n\n\nvar\n \ntile\n \n=\n \nmap\n.\ngetTileAt\n(\ntileX\n,\n \ntileY\n);\n\n\n// var tile = map.getTileAt(tileX, tileY, true);  // return a Tile object with an index of -1 for empty tile\n\n\n\n\n\nGet tiles within\n\n\nvar\n \ntiles\n \n=\n \nmap\n.\ngetTilesWithin\n(\ntileX\n,\n \ntileY\n,\n \nwidth\n,\n \nheight\n);\n\n\n\n\n\nvar\n \nfilteringOptions\n \n=\n \n{\n\n    \n// isNotEmpty: false,\n\n    \n// isColliding: false,\n\n    \n// hasInterestingFace: false\n\n\n};\n\n\nvar\n \ntiles\n \n=\n \nmap\n.\ngetTilesWithin\n(\ntileX\n,\n \ntileY\n,\n \nwidth\n,\n \nheight\n,\n \nfilteringOptions\n);\n\n\n\n\n\nGet tiles within world XY\n\n\nvar\n \ntiles\n \n=\n \nmap\n.\ngetTilesWithinWorldXY\n(\nworldX\n,\n \nworldY\n,\n \nwidth\n,\n \nheight\n);\n\n\n// var tiles = map.getTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, layer);\n\n\n\n\n\nGet tiles within shape\n\n\nvat\n \ntiles\n \n=\n \nmap\n.\ngetTilesWithinShape\n(\nshape\n);\n\n\n// vat tiles = map.getTilesWithinShape(shape, filteringOptions, camera, layer);\n\n\n\n\n\nShape:\n\n\n\n\nnew Phaser.Geom.Rectangle(x0, y0, width, height)\n\n\nnew Phaser.Geom.Line(x0, y0, x1, y1)\n\n\nnew Phaser.Geom.Circle(x, y, radius)\n\n\nnew Phaser.Geom.Triangle(x0, y0, x1, y1, x2, y2)\n\n\n\n\nFor each tile in layer\n\n\nvar\n \ncallback\n \n=\n \nfunction\n \n(\ntile\n)\n \n{\n \n/* ... */\n};\n\n\nmap\n.\nforEachTile\n(\ncallback\n,\n \ncontext\n);\n\n\n// map.forEachTile(callback, context, tileX, tileY, width, height, filteringOptions);\n\n\n\n\n\nvar\n \ncallback\n \n=\n \nfunction\n \n(\ntile\n)\n \n{\n \n/* ... */\n};\n\n\nlayer\n.\nforEachTile\n(\ncallback\n,\n \ncontext\n);\n\n\n// layer.forEachTile(callback, context, tileX, tileY, width, height, filteringOptions);\n\n\n\n\n\nTiled index\n\n\nvar\n \nindex\n \n=\n \ntile\n.\nindex\n;\n\n\n\n\n\ntile\n.\nindex\n \n=\n \nindex\n;\n\n\n\n\n\nProperties\n\n\nvar\n \nproperties\n \n=\n \ntile\n.\nproperties\n;\n  \n// object or null\n\n\nvar\n \nvalue\n \n=\n \nproperties\n[\nkey\n];\n\n\n\n\n\ntile\n.\nproperties\n[\nkey\n]\n \n=\n \nvalue\n;\n\n\n\n\n\nTile at world XY\n\n\nWorld XY at map\n\n\nvar\n \nhasTile\n \n=\n \nmap\n.\nhasTileAtWorldXY\n(\nworldX\n,\n \nworldY\n);\n  \n// true/false\n\n\n// hasTile = map.hasTileAtWorldXY(worldX, worldY, camera, layer);\n\n\n\n\n\nXY at layer\n\n\nvar\n \nhasTile\n \n=\n \nlayer\n.\nhasTileAtWorldXY\n(\nworldX\n,\n \nworldY\n);\n  \n// true/false\n\n\n// hasTile = layer.hasTileAtWorldXY(worldX, worldY, camera);\n\n\n\n\n\nCollision\n\n\nEnable collision\n\n\nmap\n.\nsetCollision\n(\nindex\n);\n   \n// indexes: tile index\n\n\nmap\n.\nsetCollision\n(\nindexes\n);\n \n// indexes: an array of tile index\n\n\nmap\n.\nsetCollisionBetween\n(\nstart\n,\n \nstop\n);\n \n// indexes from `start` to `stop`\n\n\nmap\n.\nsetCollisionByExclusion\n(\nindexes\n);\n \n// indexes: an array of tile index\n\n\nmap\n.\nsetCollisionByProperty\n({\nkey\n:\nvalue\n});\n  \n// enable collision if value of tile property \nkey\n is equal to \nvalue\n\n\nmap\n.\nsetCollisionFromCollisionGroup\n();\n  \n// set by collision group data in tileset collision editor\n\n\n\n\n\nCollision editor\n\n\nDisable collision\n\n\nmap\n.\nsetCollision\n(\nindex\n,\n \nfalse\n);\n\n\nmap\n.\nsetCollision\n(\nindexes\n,\n \nfalse\n);\n\n\nmap\n.\nsetCollisionBetween\n(\nstart\n,\n \nstop\n,\n \nfalse\n);\n\n\nmap\n.\nsetCollisionByProperty\n({\nkey\n:\nvalue\n},\n \nfalse\n);\n\n\nmap\n.\nsetCollisionFromCollisionGroup\n(\nfalse\n);\n\n\n\n\n\nTile set\n\n\nGet collision group\n\n\nvar\n \ncollisionGroup\n \n=\n \ntileset\n.\ngetTileCollisionGroup\n(\ntile\n.\nindex\n);\n \n// array of collision shapes, or null\n\n\n\n\n\nTypes of collision shape (\ncollisionGroup.objects\n)\n\n\n\n\nobject.rectangle (object.x, object.y, object.width, object.height)\n\n\nobject.ellipse (object.x, object.y, object.width, object.height)\n\n\nobject.polygon (object.x, object.y, [{x,y}, {x,y}, ...])\n\n\nobject.polyline (object.x, object.y, [{x,y}, {x,y}, ...])\n\n\n\n\nChange texture of tileset\n\n\nvar\n \ntexture\n \n=\n \nscene\n.\nsys\n.\ntextures\n.\nget\n(\nkey\n);\n\n\ntileset\n.\nsetImage\n(\ntexture\n);\n\n\n\n\n\nDynamic layer\n\n\nFill tiles\n\n\nmap\n.\nfill\n(\nindex\n);\n\n\n// map.fill(index, tileX, tileY, width, height);\n\n\n\n\n\nlayer\n.\nfill\n(\nindex\n);\n\n\n// layer.fill(index, tileX, tileY, width, height);\n\n\n\n\n\nRandomize\n\n\nmap\n.\nrandomize\n(\ntileX\n,\n \ntileY\n,\n \nwidth\n,\n \nheight\n,\n \nindexes\n);\n \n// indexes: array of tile index\n\n\n\n\n\nlayer\n.\nrandomize\n(\ntileX\n,\n \ntileY\n,\n \nwidth\n,\n \nheight\n,\n \nindexes\n);\n\n\n\n\n\nvar\n \nweightedIndexes\n \n=\n \n[\n\n    \n{\n \nindex\n:\n \n0\n,\n \nweight\n:\n \n4\n \n},\n\n    \n{\n \nindex\n:\n \n[\n0\n,\n \n1\n],\n \nweight\n:\n \n4\n \n}\n\n\n]\n\n\nmap\n.\nweightedRandomize\n(\ntileX\n,\n \ntileY\n,\n \nwidth\n,\n \nheight\n,\n \nweightedIndexes\n);\n \n// weightedIndexes: [{index, weight}, ...]\n\n\n\n\n\nCopy tiles\n\n\nmap\n.\ncopy\n(\nsrcTileX\n,\n \nsrcTileY\n,\n \nwidth\n,\n \nheight\n,\n \ndestTileX\n,\n \ndestTileY\n);\n \n// indexes: array of tile index\n\n\n\n\n\nPut tile at\n\n\nmap\n.\nputTileAt\n(\ntile\n,\n \ntileX\n,\n \ntileY\n);\n  \n// tile: Tile object or tile index\n\n\n\n\n\nmap\n.\nputTilesAt\n(\ntilesArray\n,\n \ntileX\n,\n \ntileY\n);\n  \n// tilesArray: 1d/2d array of Tile object or tile index\n\n\n\n\n\nReplace tiles\n\n\nmap\n.\nreplaceByIndex\n(\nfindIndex\n,\n \nnewIndex\n);\n\n\n// map.replaceByIndex(findIndex, newIndex, tileX, tileY, width, height, layer);\n\n\n\n\n\nSwap tiles\n\n\nmap\n.\nreplaceByIndex\n(\nindexA\n,\n \nindexB\n);\n\n\n// map.replaceByIndex(indexA, indexB, tileX, tileY, width, height, layer);\n\n\n\n\n\nShuffle tiles\n\n\nmap\n.\nshuffle\n();\n\n\n// map.shuffle(tileX, tileY, width, height, layer);\n\n\n\n\n\nConvert to static layer\n\n\nstaticLayer\n \n=\n \nmap\n.\nconvertLayerToStatic\n(\ndynamicLayer\n);\n\n\n\n\n\ndynamicLayer will be destroyed.", 
            "title": "Tile map"
        }, 
        {
            "location": "/tilemap/index.html#introduction", 
            "text": "Display of tiles map, built-in game object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/tilemap/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/tilemap/index.html#load-tile-map", 
            "text": "scene . load . tilemapWeltmeister ( key ,   url );    // JSON  scene . load . tilemapCSV ( key ,   url );            // CSV", 
            "title": "Load tile map"
        }, 
        {
            "location": "/tilemap/index.html#add-tile-map-object", 
            "text": "Create tile map  Create map from tiled\n     var   map   =   scene . add . tilemap ( key );  // var map = this.make.tilemap({ key:  map  });   Create map from 2d array\n     var   config   =   { \n     data :   tileIdxArray ,    // [ [], [], ... ] \n     tileWidth :   32 , \n     tileHeight :   32 , \n     width :   10 , \n     height :   10  }  var   map   =   this . make . tilemap ( config );   Create map from csv\n     var   config   =   { \n     key :   map ,       // csv file \n     tileWidth :   32 , \n     tileHeight :   32  }  var   map   =   this . make . tilemap ( config );     Add tile set image\n     var   tileset   =   map . addTilesetImage ( tilesetName ,   key );   // key: texture key  // var tileset = map.addTilesetImage(tilesetName);  // key = tilesetName  // var tileset = map.addTilesetImage(tilesetName, key, tileWidth, tileHeight, tileMargin, tileSpacing, gid);   Create layer object to render tile image, a tile map object could have many layers. Layer object is a kind of game object.  Static\n     var   layer   =   map . createStaticLayer ( layerID ,   tileset );  // var layer = map.createStaticLayer(layerID, tileset, x, y); // x, y : offset in pxiels   Dynamic\n     var   layer   =   map . createDynamicLayer ( layerID ,   tileset );  // var layer = map.createDynamicLayer(layerID, tileset, x, y); // x, y : offset in pxiels   Blank dynamic\n     var   layer   =   map . createBlankDynamicLayer ( layerID ,   tileset );  // var layer = map.createBlankDynamicLayer(layerID, tileset, x, y); // x, y : offset in pxiels     Create sprite objects with tile ID (optional)\n     var   sprites   =   map . createFromObjects ( name ,   id ,   spriteConfig );  // var sprites = map.createFromObjects(name, id, spriteConfig, scene);   name: name of the object layer  id: gid (number), or id (number), or name (string)  spriteConfig: The config object to pass into the Sprite creator (i.e.  scene.make.sprite ). Extend spriteConfig with properties of object ( type ,  x ,  y ,  rotation ,  visible ,  width ,  height , ... etc)", 
            "title": "Add tile map object"
        }, 
        {
            "location": "/tilemap/index.html#map", 
            "text": "", 
            "title": "Map"
        }, 
        {
            "location": "/tilemap/index.html#select-current-layer", 
            "text": "map . setLayer ( layer );    // layer name, layer index  // map.layer = layer;", 
            "title": "Select current layer"
        }, 
        {
            "location": "/tilemap/index.html#set-tile-size", 
            "text": "map . setBaseTileSize ( tileWidth ,   tileHeight );", 
            "title": "Set tile size"
        }, 
        {
            "location": "/tilemap/index.html#draw-on-graphics", 
            "text": "var   styleConfig   =   { \n     tileColor :   new   Phaser . Display . Color ( 105 ,   210 ,   231 ,   150 ),           // null \n     collidingTileColor :   new   Phaser . Display . Color ( 243 ,   134 ,   48 ,   200 ),   // null \n     faceColor :   new   Phaser . Display . Color ( 40 ,   39 ,   37 ,   150 )               // null  }  map . renderDebug ( graphics ,   styleConfig );  // map.renderDebug(graphics, styleConfig, layer);", 
            "title": "Draw on graphics"
        }, 
        {
            "location": "/tilemap/index.html#tile", 
            "text": "", 
            "title": "Tile"
        }, 
        {
            "location": "/tilemap/index.html#get-tile", 
            "text": "var   tile   =   map . getTileAt ( tileX ,   tileY );  // var tile = map.getTileAt(tileX, tileY, true);  // return a Tile object with an index of -1 for empty tile", 
            "title": "Get tile"
        }, 
        {
            "location": "/tilemap/index.html#get-tiles-within", 
            "text": "var   tiles   =   map . getTilesWithin ( tileX ,   tileY ,   width ,   height );   var   filteringOptions   =   { \n     // isNotEmpty: false, \n     // isColliding: false, \n     // hasInterestingFace: false  };  var   tiles   =   map . getTilesWithin ( tileX ,   tileY ,   width ,   height ,   filteringOptions );", 
            "title": "Get tiles within"
        }, 
        {
            "location": "/tilemap/index.html#get-tiles-within-world-xy", 
            "text": "var   tiles   =   map . getTilesWithinWorldXY ( worldX ,   worldY ,   width ,   height );  // var tiles = map.getTilesWithinWorldXY(worldX, worldY, width, height, filteringOptions, camera, layer);", 
            "title": "Get tiles within world XY"
        }, 
        {
            "location": "/tilemap/index.html#get-tiles-within-shape", 
            "text": "vat   tiles   =   map . getTilesWithinShape ( shape );  // vat tiles = map.getTilesWithinShape(shape, filteringOptions, camera, layer);   Shape:   new Phaser.Geom.Rectangle(x0, y0, width, height)  new Phaser.Geom.Line(x0, y0, x1, y1)  new Phaser.Geom.Circle(x, y, radius)  new Phaser.Geom.Triangle(x0, y0, x1, y1, x2, y2)", 
            "title": "Get tiles within shape"
        }, 
        {
            "location": "/tilemap/index.html#for-each-tile-in-layer", 
            "text": "var   callback   =   function   ( tile )   {   /* ... */ };  map . forEachTile ( callback ,   context );  // map.forEachTile(callback, context, tileX, tileY, width, height, filteringOptions);   var   callback   =   function   ( tile )   {   /* ... */ };  layer . forEachTile ( callback ,   context );  // layer.forEachTile(callback, context, tileX, tileY, width, height, filteringOptions);", 
            "title": "For each tile in layer"
        }, 
        {
            "location": "/tilemap/index.html#tiled-index", 
            "text": "var   index   =   tile . index ;   tile . index   =   index ;", 
            "title": "Tiled index"
        }, 
        {
            "location": "/tilemap/index.html#properties", 
            "text": "var   properties   =   tile . properties ;    // object or null  var   value   =   properties [ key ];   tile . properties [ key ]   =   value ;", 
            "title": "Properties"
        }, 
        {
            "location": "/tilemap/index.html#tile-at-world-xy", 
            "text": "World XY at map  var   hasTile   =   map . hasTileAtWorldXY ( worldX ,   worldY );    // true/false  // hasTile = map.hasTileAtWorldXY(worldX, worldY, camera, layer);   XY at layer  var   hasTile   =   layer . hasTileAtWorldXY ( worldX ,   worldY );    // true/false  // hasTile = layer.hasTileAtWorldXY(worldX, worldY, camera);", 
            "title": "Tile at world XY"
        }, 
        {
            "location": "/tilemap/index.html#collision", 
            "text": "", 
            "title": "Collision"
        }, 
        {
            "location": "/tilemap/index.html#enable-collision", 
            "text": "map . setCollision ( index );     // indexes: tile index  map . setCollision ( indexes );   // indexes: an array of tile index  map . setCollisionBetween ( start ,   stop );   // indexes from `start` to `stop`  map . setCollisionByExclusion ( indexes );   // indexes: an array of tile index  map . setCollisionByProperty ({ key : value });    // enable collision if value of tile property  key  is equal to  value  map . setCollisionFromCollisionGroup ();    // set by collision group data in tileset collision editor   Collision editor", 
            "title": "Enable collision"
        }, 
        {
            "location": "/tilemap/index.html#disable-collision", 
            "text": "map . setCollision ( index ,   false );  map . setCollision ( indexes ,   false );  map . setCollisionBetween ( start ,   stop ,   false );  map . setCollisionByProperty ({ key : value },   false );  map . setCollisionFromCollisionGroup ( false );", 
            "title": "Disable collision"
        }, 
        {
            "location": "/tilemap/index.html#tile-set", 
            "text": "", 
            "title": "Tile set"
        }, 
        {
            "location": "/tilemap/index.html#get-collision-group", 
            "text": "var   collisionGroup   =   tileset . getTileCollisionGroup ( tile . index );   // array of collision shapes, or null   Types of collision shape ( collisionGroup.objects )   object.rectangle (object.x, object.y, object.width, object.height)  object.ellipse (object.x, object.y, object.width, object.height)  object.polygon (object.x, object.y, [{x,y}, {x,y}, ...])  object.polyline (object.x, object.y, [{x,y}, {x,y}, ...])", 
            "title": "Get collision group"
        }, 
        {
            "location": "/tilemap/index.html#change-texture-of-tileset", 
            "text": "var   texture   =   scene . sys . textures . get ( key );  tileset . setImage ( texture );", 
            "title": "Change texture of tileset"
        }, 
        {
            "location": "/tilemap/index.html#dynamic-layer", 
            "text": "", 
            "title": "Dynamic layer"
        }, 
        {
            "location": "/tilemap/index.html#fill-tiles", 
            "text": "map . fill ( index );  // map.fill(index, tileX, tileY, width, height);   layer . fill ( index );  // layer.fill(index, tileX, tileY, width, height);", 
            "title": "Fill tiles"
        }, 
        {
            "location": "/tilemap/index.html#randomize", 
            "text": "map . randomize ( tileX ,   tileY ,   width ,   height ,   indexes );   // indexes: array of tile index   layer . randomize ( tileX ,   tileY ,   width ,   height ,   indexes );   var   weightedIndexes   =   [ \n     {   index :   0 ,   weight :   4   }, \n     {   index :   [ 0 ,   1 ],   weight :   4   }  ]  map . weightedRandomize ( tileX ,   tileY ,   width ,   height ,   weightedIndexes );   // weightedIndexes: [{index, weight}, ...]", 
            "title": "Randomize"
        }, 
        {
            "location": "/tilemap/index.html#copy-tiles", 
            "text": "map . copy ( srcTileX ,   srcTileY ,   width ,   height ,   destTileX ,   destTileY );   // indexes: array of tile index", 
            "title": "Copy tiles"
        }, 
        {
            "location": "/tilemap/index.html#put-tile-at", 
            "text": "map . putTileAt ( tile ,   tileX ,   tileY );    // tile: Tile object or tile index   map . putTilesAt ( tilesArray ,   tileX ,   tileY );    // tilesArray: 1d/2d array of Tile object or tile index", 
            "title": "Put tile at"
        }, 
        {
            "location": "/tilemap/index.html#replace-tiles", 
            "text": "map . replaceByIndex ( findIndex ,   newIndex );  // map.replaceByIndex(findIndex, newIndex, tileX, tileY, width, height, layer);", 
            "title": "Replace tiles"
        }, 
        {
            "location": "/tilemap/index.html#swap-tiles", 
            "text": "map . replaceByIndex ( indexA ,   indexB );  // map.replaceByIndex(indexA, indexB, tileX, tileY, width, height, layer);", 
            "title": "Swap tiles"
        }, 
        {
            "location": "/tilemap/index.html#shuffle-tiles", 
            "text": "map . shuffle ();  // map.shuffle(tileX, tileY, width, height, layer);", 
            "title": "Shuffle tiles"
        }, 
        {
            "location": "/tilemap/index.html#convert-to-static-layer", 
            "text": "staticLayer   =   map . convertLayerToStatic ( dynamicLayer );   dynamicLayer will be destroyed.", 
            "title": "Convert to static layer"
        }, 
        {
            "location": "/container/index.html", 
            "text": "Introduction\n\n\nControl the position and angle of children game object, built-in game object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nContainer\n\n\nAdd container object\n\n\nvar\n \nimage\n \n=\n \nscene\n.\nadd\n.\ncontainer\n(\nx\n,\n \ny\n);\n\n\n// var image = scene.add.container(x, y, children); // children: an array of game object\n\n\n\n\n\nDestroy\n\n\ncontainer\n.\ndestroy\n();\n\n\n\n\n\nAlso destroy all children game object.\n\n\nSet properties\n\n\nReference \ngame object\n, to set position, angle, visible, alpha, etc...\n\n\nSet size\n\n\ncontainer\n.\nsetSize\n(\nwidth\n,\n \nheight\n);\n\n\n\n\n\nDefault size is 0x0.\n\n\nHit area\n\n\ncontainer\n.\nsetInteractive\n(\nnew\n \nPhaser\n.\nGeom\n.\nCircle\n(\n0\n,\n \n0\n,\n \nradius\n),\n \nPhaser\n.\nGeom\n.\nCircle\n.\nContains\n);\n\n\n// container.setInteractive(false); // disable\n\n\n\n\n\nAssign hit area with a circle shape.\n\n\nNon-exclusive\n\n\ncontainer\n.\nsetExclusive\n(\nfalse\n);\n\n\n\n\n\nAllows a game object added to container many times.\n\n\nChildren\n\n\nAdd child\n\n\ncontainer\n.\nadd\n(\nchild\n);\n  \n// child: a game object or an array of game objects\n\n\n\n\n\ncontainer\n.\naddAt\n(\nchild\n,\n \nindex\n);\n\n\n\n\n\nExist\n\n\nvar\n \nhasChild\n \n=\n \ncontainer\n.\nexists\n(\nchild\n);\n\n\n\n\n\nGet child\n\n\nvar\n \nfirstChild\n \n=\n \ncontainer\n.\nfirst\n;\n\n\nvar\n \nnextChild\n \n=\n \ncontainer\n.\nnext\n;\n\n\nvar\n \nprevChild\n \n=\n \ncontainer\n.\nprevious\n;\n\n\nvar\n \nlastChild\n \n=\n \ncontainer\n.\nlast\n;\n\n\n\n\n\nvar\n \nchild\n \n=\n \ncontainer\n.\ngetByName\n(\nname\n);\n\n\n\n\n\nvar\n \nchild\n \n=\n \ncontainer\n.\ngetRandom\n(\nstartIndex\n,\n \nlength\n);\n\n\n\n\n\nvar\n \nchild\n \n=\n \ncontainer\n.\ngetFirst\n(\nproperty\n,\n \nvalue\n,\n \nstartIndex\n,\n \nendIndex\n);\n\n\n// value: the value to test the property against. Must pass a strict (`===`) comparison check.\n\n\n\n\n\nvar\n \nchildren\n \n=\n \ncontainer\n.\ngetAll\n(\nproperty\n,\n \nvalue\n,\n \nstartIndex\n,\n \nendIndex\n);\n\n\n// value: the value to test the property against. Must pass a strict (`===`) comparison check.\n\n\n\n\n\nvar\n \namount\n \n=\n \ncontainer\n.\ncount\n(\nproperty\n,\n \nvalue\n,\n \nstartIndex\n,\n \nendIndex\n);\n\n\n// value: the value to test the property against. Must pass a strict (`===`) comparison check.\n\n\n\n\n\nRemove child\n\n\ncontainer\n.\nremove\n(\nchild\n);\n\n\n// container.remove(child, true);  // remove child object and destroy it\n\n\n\n\n\ncontainer\n.\nremoveAt\n(\nindex\n);\n\n\n// container.removeAt(index, true);  // remove child object and destroy it\n\n\n\n\n\ncontainer\n.\nremoveBetween\n(\nstartIndex\n,\n \nendIndex\n);\n\n\n// container.removeBetween(startIndex, endIndex, true);  // remove children objects and destroy them\n\n\n\n\n\ncontainer\n.\nremoveAll\n();\n\n\n// container.removeAll(true);  // remove all children objects and destroy them\n\n\n\n\n\nReplace child\n\n\ncontainer\n.\nreplace\n(\noldChild\n,\n \nnewChild\n);\n\n\n// container.replace(oldChild, newChild, true);  // destroy oldChild\n\n\n\n\n\nOrder of child\n\n\ncontainer\n.\nmoveTo\n(\nchild\n,\n \nindex\n);\n\n\n\n\n\ncontainer\n.\nbringToTop\n(\nchild\n);\n\n\n\n\n\ncontainer\n.\nsendToBack\n(\nchild\n);\n\n\n\n\n\ncontainer\n.\nmoveUp\n(\nchild\n);\n\n\n\n\n\ncontainer\n.\nmoveDown\n(\nchild\n);\n\n\n\n\n\ncontainer\n.\nswap\n(\nchild1\n,\n \nchild2\n);\n\n\n\n\n\ncontainer\n.\nreverse\n();\n\n\n\n\n\ncontainer\n.\nshuffle\n();\n\n\n\n\n\nSet properties\n\n\ncontainer\n.\nsetAll\n(\nproperty\n,\n \nvalue\n,\n \nstartIndex\n,\n \nendIndex\n);\n\n\n\n\n\nFor each child\n\n\n\n\nIterate current children list\n    \ncontainer\n.\niterate\n(\ncallback\n);\n\n\n// container.iterate(callback, context);\n\n\n// container.iterate(callback, context, arg0, arg1, ...);\n\n\n// var callback = function(child, arg0, arg1, ...) {};\n\n\n\n\nIterate a copy of current children list\n    \ncontainer\n.\neach\n(\ncallback\n);\n\n\n// container.each(callback, context);\n\n\n// container.each(callback, context, arg0, arg1, ...);\n\n\n// var callback = function(child, arg0, arg1, ...) {};\n\n\n\n\n\n\nCompare with \ngroup object\n\n\n\n\nContainer and group objects are all has a children list.\n\n\nContainer has position, angle, alpha, visible, ...etc, but group does not have.\n\n\nContainer controls properties of children (position, angle, alpha, visible, ...etc), but group won't.\n\n\nA game object could be added to many group, but it only could be added to a container (\nexclusive\n mode).", 
            "title": "Container"
        }, 
        {
            "location": "/container/index.html#introduction", 
            "text": "Control the position and angle of children game object, built-in game object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/container/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/container/index.html#container", 
            "text": "", 
            "title": "Container"
        }, 
        {
            "location": "/container/index.html#add-container-object", 
            "text": "var   image   =   scene . add . container ( x ,   y );  // var image = scene.add.container(x, y, children); // children: an array of game object", 
            "title": "Add container object"
        }, 
        {
            "location": "/container/index.html#destroy", 
            "text": "container . destroy ();   Also destroy all children game object.", 
            "title": "Destroy"
        }, 
        {
            "location": "/container/index.html#set-properties", 
            "text": "Reference  game object , to set position, angle, visible, alpha, etc...", 
            "title": "Set properties"
        }, 
        {
            "location": "/container/index.html#set-size", 
            "text": "container . setSize ( width ,   height );   Default size is 0x0.", 
            "title": "Set size"
        }, 
        {
            "location": "/container/index.html#hit-area", 
            "text": "container . setInteractive ( new   Phaser . Geom . Circle ( 0 ,   0 ,   radius ),   Phaser . Geom . Circle . Contains );  // container.setInteractive(false); // disable   Assign hit area with a circle shape.", 
            "title": "Hit area"
        }, 
        {
            "location": "/container/index.html#non-exclusive", 
            "text": "container . setExclusive ( false );   Allows a game object added to container many times.", 
            "title": "Non-exclusive"
        }, 
        {
            "location": "/container/index.html#children", 
            "text": "", 
            "title": "Children"
        }, 
        {
            "location": "/container/index.html#add-child", 
            "text": "container . add ( child );    // child: a game object or an array of game objects   container . addAt ( child ,   index );", 
            "title": "Add child"
        }, 
        {
            "location": "/container/index.html#exist", 
            "text": "var   hasChild   =   container . exists ( child );", 
            "title": "Exist"
        }, 
        {
            "location": "/container/index.html#get-child", 
            "text": "var   firstChild   =   container . first ;  var   nextChild   =   container . next ;  var   prevChild   =   container . previous ;  var   lastChild   =   container . last ;   var   child   =   container . getByName ( name );   var   child   =   container . getRandom ( startIndex ,   length );   var   child   =   container . getFirst ( property ,   value ,   startIndex ,   endIndex );  // value: the value to test the property against. Must pass a strict (`===`) comparison check.   var   children   =   container . getAll ( property ,   value ,   startIndex ,   endIndex );  // value: the value to test the property against. Must pass a strict (`===`) comparison check.   var   amount   =   container . count ( property ,   value ,   startIndex ,   endIndex );  // value: the value to test the property against. Must pass a strict (`===`) comparison check.", 
            "title": "Get child"
        }, 
        {
            "location": "/container/index.html#remove-child", 
            "text": "container . remove ( child );  // container.remove(child, true);  // remove child object and destroy it   container . removeAt ( index );  // container.removeAt(index, true);  // remove child object and destroy it   container . removeBetween ( startIndex ,   endIndex );  // container.removeBetween(startIndex, endIndex, true);  // remove children objects and destroy them   container . removeAll ();  // container.removeAll(true);  // remove all children objects and destroy them", 
            "title": "Remove child"
        }, 
        {
            "location": "/container/index.html#replace-child", 
            "text": "container . replace ( oldChild ,   newChild );  // container.replace(oldChild, newChild, true);  // destroy oldChild", 
            "title": "Replace child"
        }, 
        {
            "location": "/container/index.html#order-of-child", 
            "text": "container . moveTo ( child ,   index );   container . bringToTop ( child );   container . sendToBack ( child );   container . moveUp ( child );   container . moveDown ( child );   container . swap ( child1 ,   child2 );   container . reverse ();   container . shuffle ();", 
            "title": "Order of child"
        }, 
        {
            "location": "/container/index.html#set-properties_1", 
            "text": "container . setAll ( property ,   value ,   startIndex ,   endIndex );", 
            "title": "Set properties"
        }, 
        {
            "location": "/container/index.html#for-each-child", 
            "text": "Iterate current children list\n     container . iterate ( callback );  // container.iterate(callback, context);  // container.iterate(callback, context, arg0, arg1, ...);  // var callback = function(child, arg0, arg1, ...) {};   Iterate a copy of current children list\n     container . each ( callback );  // container.each(callback, context);  // container.each(callback, context, arg0, arg1, ...);  // var callback = function(child, arg0, arg1, ...) {};", 
            "title": "For each child"
        }, 
        {
            "location": "/container/index.html#compare-with-group-object", 
            "text": "Container and group objects are all has a children list.  Container has position, angle, alpha, visible, ...etc, but group does not have.  Container controls properties of children (position, angle, alpha, visible, ...etc), but group won't.  A game object could be added to many group, but it only could be added to a container ( exclusive  mode).", 
            "title": "Compare with group object"
        }, 
        {
            "location": "/group/index.html", 
            "text": "Introduction\n\n\nContainer of game objects, built-in game object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nAdd group object\n\n\nvar\n \ngroup\n \n=\n \nscene\n.\nadd\n.\ngroup\n(\nconfig\n);\n\n\n// var group = scene.add.group(gameobjects, config);  // add game objects into group\n\n\n\n\n\nConfiguration\n\n\n{\n\n    \nclassType\n:\n \nPhaser\n.\nGameObjects\n.\nSprite\n,\n\n    \ndefaultKey\n:\n \nnull\n,\n\n    \ndefaultFrame\n:\n \nnull\n,\n\n    \nmaxSize\n:\n \n-\n1\n,\n\n    \nrunChildUpdate\n:\n \nfalse\n    \n// run gameobject.update() if true\n\n\n}\n\n\n\n\n\nAdd game object\n\n\ngroup\n.\nadd\n(\ngameobject\n);\n\n\n// group.add(gameobject, true);  // add this game object to display and update list of scene\n\n\n\n\n\ngroup\n.\naddMultiple\n(\ngameobjects\n);\n   \n// array of game objects\n\n\n// group.addMultiple(gameobjects, true);\n\n\n\n\n\nGame object will only be added once.\n\n\nRemove game object\n\n\ngroup\n.\nremove\n(\ngameobject\n);\n\n\n// group.remove(gameobject, true);  // also remove this game object from display and update list of scene\n\n\n\n\n\nRemove all game objects\n\n\ngroup\n.\nclear\n();\n\n\n// group.clear(true);  // also remove this game object from display and update list of scene\n\n\n\n\n\nGet game objects\n\n\nvar\n \ngameobjects\n \n=\n \ngroup\n.\ngetChildren\n();\n  \n// array of game objects\n\n\n\n\n\n\n\n\n\nAmount of game objects.\n\n\nvar\n \nlen\n \n=\n \ngroup\n.\ngetLength\n();\n\n\n\n\n\n\n\n\n\nGroup is full. Maximun size is set in \nmaxSize\n.\n\n\nvar\n \nisFull\n \n=\n \ngroup\n.\nisFull\n();\n\n\n\n\n\n\n\n\n\nGame object is in group.\n\n\nvar\n \nisInGroup\n \n=\n \ngroup\n.\ncontains\n();\n\n\n\n\n\n\n\n\n\nGroup actions\n\n\ngroup\n.\nplayAnimation\n(\nkey\n,\n \nstartFrame\n);\n\n\n\n\n\ngroup\n.\ntoggleVisible\n();\n\n\n\n\n\ngroup\n.\nsetDepth\n(\nvalue\n,\n \nstep\n);\n\n\n\n\n\nActive/inactive game objects\n\n\nAmount of active/inactive game objects\n\n\nvar\n \nactiveCount\n \n=\n \ngroup\n.\ncountActive\n();\n\n\n// var inactiveCount = group.countActive(false);  // get amount of inactive game objects\n\n\n\n\n\nvar\n \nactiveCount\n \n=\n \ngroup\n.\ngetTotalUsed\n();\n        \n// equal to group.countActive()\n\n\nvar\n \nfreeCount\n \n=\n \ngroup\n.\ngetTotalFree\n();\n          \n// group.maxSize - group.getTotalUsed()\n\n\n\n\n\ngroup\n.\nkill\n(\ngameobject\n);\n         \n// gameobject.setActive(false)\n\n\ngroup\n.\nkillAndHide\n(\ngameobject\n);\n  \n// gameObject.setActive(false).setVisible(false)\n\n\n\n\n\nGet first active/inactive game object, create one if \ncreateIfNull\n is \ntrue\n\n\nvar\n \ngameobject\n \n=\n \ngroup\n.\ngetFirst\n(\nactive\n,\n \ncreateIfNull\n,\n \nx\n,\n \ny\n,\n \nkey\n,\n \nframe\n,\n \nvisible\n);\n  \n// active = true/false\n\n\nvar\n \ngameobject\n \n=\n \ngroup\n.\ngetFirstAlive\n(\ncreateIfNull\n,\n \nx\n,\n \ny\n,\n \nkey\n,\n \nframe\n,\n \nvisible\n);\n \n// equal to group.getFirst(true, ...)\n\n\nvar\n \ngameobject\n \n=\n \ngroup\n.\ngetFirstDead\n(\ncreateIfNull\n,\n \nx\n,\n \ny\n,\n \nkey\n,\n \nframe\n,\n \nvisible\n);\n \n// equal to group.getFirst(false, ...)\n\n\nvar\n \ngameobject\n \n=\n \ngroup\n.\nget\n(\nx\n,\n \ny\n,\n \nkey\n,\n \nframe\n,\n \nvisible\n);\n \n// equal to group.getFirst(false, true, ...)\n\n\n\n\n\nCreate game objects\n\n\nvar\n \ngameobjects\n \n=\n \ngroup\n.\ncreateFromConfig\n(\nconfig\n);\n\n\nvar\n \ngameobjects\n \n=\n \ngroup\n.\ncreateMultiple\n(\nconfig\n);\n    \n// config in array\n\n\n\n\n\nConfiguration\n\n\n{\n\n    \nclassType\n:\n \nthis\n.\nclassType\n,\n\n    \nkey\n:\n \nundefined\n,\n             \n// required\n\n    \nframe\n:\n \nnull\n,\n\n    \nvisible\n:\n \ntrue\n,\n\n    \nactive\n:\n \ntrue\n,\n\n    \nrepeat\n:\n \n0\n,\n                  \n// create (1 + repeat) game objects\n\n\n    \nsetXY\n:\n \n{\n\n        \nx\n:\n0\n,\n\n        \ny\n:\n0\n,\n\n        \nstepX\n:\n0\n,\n\n        \nstepY\n:\n0\n\n    \n},\n\n    \n// Actions.SetXY(gameobjects, x, y, stepX, stepY)\n\n\n    \nsetRotation\n:\n \n{\n\n        \nvalue\n:\n \n0\n,\n\n        \nstep\n:\n\n    \n},\n\n    \n// Actions.SetRotation(gameobjects, value, step)\n\n\n    \nsetScale\n:\n \n{\n\n        \nx\n:\n0\n,\n\n        \ny\n:\n0\n,\n\n        \nstepX\n:\n0\n,\n\n        \nstepY\n:\n0\n\n    \n},\n\n    \n// Actions.SetScale(gameobjects, x, y, stepX, stepY)\n\n\n    \nsetAlpha\n:\n \n{\n\n        \nvalue\n:\n \n0\n,\n\n        \nstep\n:\n\n    \n},\n\n    \n// Actions.SetAlpha(gameobjects, value, step)\n\n\n    \nhitArea\n:\n \nnull\n,\n\n    \nhitAreaCallback\n:\n \nnull\n,\n\n    \n// Actions.SetHitArea(gameobjects, hitArea, hitAreaCallback);\n\n\n    \ngridAlign\n:\n \nfalse\n\n    \n// {\n\n    \n//     width: -1,\n\n    \n//     height: -1,\n\n    \n//     cellWidth: 1,\n\n    \n//     cellHeight: 1,\n\n    \n//     position: Phaser.Display.Align.TOP_LEFT,\n\n    \n//     x: 0,\n\n    \n//     y: 0\n\n    \n// }\n\n\n}", 
            "title": "Group"
        }, 
        {
            "location": "/group/index.html#introduction", 
            "text": "Container of game objects, built-in game object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/group/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/group/index.html#add-group-object", 
            "text": "var   group   =   scene . add . group ( config );  // var group = scene.add.group(gameobjects, config);  // add game objects into group", 
            "title": "Add group object"
        }, 
        {
            "location": "/group/index.html#configuration", 
            "text": "{ \n     classType :   Phaser . GameObjects . Sprite , \n     defaultKey :   null , \n     defaultFrame :   null , \n     maxSize :   - 1 , \n     runChildUpdate :   false      // run gameobject.update() if true  }", 
            "title": "Configuration"
        }, 
        {
            "location": "/group/index.html#add-game-object", 
            "text": "group . add ( gameobject );  // group.add(gameobject, true);  // add this game object to display and update list of scene   group . addMultiple ( gameobjects );     // array of game objects  // group.addMultiple(gameobjects, true);   Game object will only be added once.", 
            "title": "Add game object"
        }, 
        {
            "location": "/group/index.html#remove-game-object", 
            "text": "group . remove ( gameobject );  // group.remove(gameobject, true);  // also remove this game object from display and update list of scene   Remove all game objects  group . clear ();  // group.clear(true);  // also remove this game object from display and update list of scene", 
            "title": "Remove game object"
        }, 
        {
            "location": "/group/index.html#get-game-objects", 
            "text": "var   gameobjects   =   group . getChildren ();    // array of game objects     Amount of game objects.  var   len   =   group . getLength ();     Group is full. Maximun size is set in  maxSize .  var   isFull   =   group . isFull ();     Game object is in group.  var   isInGroup   =   group . contains ();", 
            "title": "Get game objects"
        }, 
        {
            "location": "/group/index.html#group-actions", 
            "text": "group . playAnimation ( key ,   startFrame );   group . toggleVisible ();   group . setDepth ( value ,   step );", 
            "title": "Group actions"
        }, 
        {
            "location": "/group/index.html#activeinactive-game-objects", 
            "text": "Amount of active/inactive game objects  var   activeCount   =   group . countActive ();  // var inactiveCount = group.countActive(false);  // get amount of inactive game objects   var   activeCount   =   group . getTotalUsed ();          // equal to group.countActive()  var   freeCount   =   group . getTotalFree ();            // group.maxSize - group.getTotalUsed()   group . kill ( gameobject );           // gameobject.setActive(false)  group . killAndHide ( gameobject );    // gameObject.setActive(false).setVisible(false)   Get first active/inactive game object, create one if  createIfNull  is  true  var   gameobject   =   group . getFirst ( active ,   createIfNull ,   x ,   y ,   key ,   frame ,   visible );    // active = true/false  var   gameobject   =   group . getFirstAlive ( createIfNull ,   x ,   y ,   key ,   frame ,   visible );   // equal to group.getFirst(true, ...)  var   gameobject   =   group . getFirstDead ( createIfNull ,   x ,   y ,   key ,   frame ,   visible );   // equal to group.getFirst(false, ...)  var   gameobject   =   group . get ( x ,   y ,   key ,   frame ,   visible );   // equal to group.getFirst(false, true, ...)", 
            "title": "Active/inactive game objects"
        }, 
        {
            "location": "/group/index.html#create-game-objects", 
            "text": "var   gameobjects   =   group . createFromConfig ( config );  var   gameobjects   =   group . createMultiple ( config );      // config in array", 
            "title": "Create game objects"
        }, 
        {
            "location": "/group/index.html#configuration_1", 
            "text": "{ \n     classType :   this . classType , \n     key :   undefined ,               // required \n     frame :   null , \n     visible :   true , \n     active :   true , \n     repeat :   0 ,                    // create (1 + repeat) game objects \n\n     setXY :   { \n         x : 0 , \n         y : 0 , \n         stepX : 0 , \n         stepY : 0 \n     }, \n     // Actions.SetXY(gameobjects, x, y, stepX, stepY) \n\n     setRotation :   { \n         value :   0 , \n         step : \n     }, \n     // Actions.SetRotation(gameobjects, value, step) \n\n     setScale :   { \n         x : 0 , \n         y : 0 , \n         stepX : 0 , \n         stepY : 0 \n     }, \n     // Actions.SetScale(gameobjects, x, y, stepX, stepY) \n\n     setAlpha :   { \n         value :   0 , \n         step : \n     }, \n     // Actions.SetAlpha(gameobjects, value, step) \n\n     hitArea :   null , \n     hitAreaCallback :   null , \n     // Actions.SetHitArea(gameobjects, hitArea, hitAreaCallback); \n\n     gridAlign :   false \n     // { \n     //     width: -1, \n     //     height: -1, \n     //     cellWidth: 1, \n     //     cellHeight: 1, \n     //     position: Phaser.Display.Align.TOP_LEFT, \n     //     x: 0, \n     //     y: 0 \n     // }  }", 
            "title": "Configuration"
        }, 
        {
            "location": "/groupactions/index.html", 
            "text": "Introduction\n\n\nSet properties of game objects, built-in methods of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nCall\n\n\nPhaser\n.\nActions\n.\nCall\n(\ngameobjects\n,\n \ncallback\n,\n \ncontext\n);\n\n\n\n\n\nAny property\n\n\nPhaser\n.\nActions\n.\nPropertyValueSet\n(\ngameobjects\n,\n \nkey\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\n\n\ngameobjects : The array of game objects to be updated by this action.\n\n\nkey : The property to be updated.\n\n\nvalue : The amount to be added to the property.\n\n\nstep : This is added to the \nvalue\n amount, multiplied by the iteration counter.\n\n\nindex : An optional offset to start searching from within the items array.\n\n\ndirection :\n\n\n1\n : from beginning to end.\n\n\n-1\n: from end to beginning.\n\n\n\n\n\n\n\n\nPhaser\n.\nActions\n.\nPropertyValueInc\n(\ngameobjects\n,\n \nkey\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nSmootherStep\n(\ngameobjects\n,\n \nkey\n,\n \nmin\n,\n \nmax\n,\n \ninc\n));\n\n\n\n\n\nPhaser\n.\nActions\n.\nSmoothStep\n(\ngameobjects\n,\n \nkey\n,\n \nmin\n,\n \nmax\n,\n \ninc\n));\n\n\n\n\n\nPhaser\n.\nActions\n.\nSpread\n(\ngameobjects\n,\n \nkey\n,\n \nmin\n,\n \nmax\n,\n \ninc\n));\n\n\n\n\n\nPosition\n\n\nPhaser\n.\nActions\n.\nSetX\n(\ngameobjects\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nIncX\n(\ngameobjects\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nSetY\n(\ngameobjects\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nIncY\n(\ngameobjects\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nSetXY\n(\ngameobjects\n,\n \nx\n,\n \ny\n,\n \nstepX\n,\n \nstepY\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nIncXY\n(\ngameobjects\n,\n \nx\n,\n \ny\n,\n \nstepX\n,\n \nstepY\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nShift position\n\n\nSet the position of first game object to (x, y), others to the position of previous game object.\n\n\nPhaser\n.\nActions\n.\nShiftPosition\n(\ngameobjects\n,\n \nx\n,\n \ny\n,\n \ndirection\n,\n \noutput\n);\n\n\n\n\n\nPosition on shape\n\n\nGrid align\n\n\nPhaser\n.\nActions\n.\nGridAlign\n(\ngameobjects\n,\n \n{\n\n    \nwidth\n:\n \n-\n1\n,\n\n    \nheight\n:\n \n-\n1\n,\n\n    \ncellWidth\n:\n \n1\n,\n\n    \ncellHeight\n:\n \n1\n,\n\n    \nposition\n:\n \nPhaser\n.\nDisplay\n.\nAlign\n.\nTOP_LEFT\n,\n\n    \nx\n:\n \n0\n,\n\n    \ny\n:\n \n0\n\n\n});\n\n\n\n\n\nLine\n\n\nvar\n \nline\n \n=\n \nnew\n \nPhaser\n.\nGeom\n.\nLine\n(\nx1\n,\n \ny1\n,\n \nx2\n,\n \ny2\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nPlaceOnLine\n(\ngameobjects\n,\n \nline\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nRandomLine\n(\ngameobjects\n,\n \nline\n);\n\n\n\n\n\nCircle\n\n\nvar\n \ncircle\n \n=\n \nnew\n \nPhaser\n.\nGeom\n.\nCircle\n(\nx\n,\n \ny\n,\n \nradius\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nPlaceOnCircle\n(\ngameobjects\n,\n \ncircle\n,\n \nstartAngle\n,\n \nendAngle\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nRandomCircle\n(\ngameobjects\n,\n \ncircle\n);\n\n\n\n\n\nEllipse\n\n\nvar\n \nellipse\n \n=\n \nnew\n \nPhaser\n.\nGeom\n.\nEllipse\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nPlaceOnEllipse\n(\ngameobjects\n,\n \nellipse\n,\n \nstartAngle\n,\n \nendAngle\n);\n\n\n\n\n\nTriangle\n\n\nvar\n \ntriangle\n \n=\n \nnew\n \nPhaser\n.\nGeom\n.\nTriangle\n(\nx1\n,\n \ny1\n,\n \nx2\n,\n \ny2\n,\n \nx3\n,\n \ny3\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nPlaceOnTriangle\n(\ngameobjects\n,\n \ntriangle\n,\n \nstepRate\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nRandomTriangle\n(\ngameobjects\n,\n \ntriangle\n);\n\n\n\n\n\nRectangle\n\n\nvar\n \nrect\n \n=\n \nnew\n \nPhaser\n.\nGeom\n.\nRectangle\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nPlaceOnRectangle\n(\ngameobjects\n,\n \nrect\n,\n \nshift\n;\n\n\n\n\n\nPhaser\n.\nActions\n.\nRandomRectangle\n(\ngameobjects\n,\n \nrect\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nWrapInRectangle\n(\ngameobjects\n,\n \nrect\n,\n \npadding\n);\n\n\n\n\n\nAngle\n\n\nPhaser\n.\nActions\n.\nAngle\n(\ngameobjects\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n// value: angle in radians\n\n\n\n\n\nPhaser\n.\nActions\n.\nRotate\n(\ngameobjects\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n// value: angle in degree\n\n\n\n\n\nPhaser\n.\nActions\n.\nRotateAround\n(\ngameobjects\n,\n \npoint\n,\n \nangle\n);\n\n\n// point: {x, y}, angle: angle in radians\n\n\n\n\n\nPhaser\n.\nActions\n.\nRotateAroundDistance\n(\ngameobjects\n,\n \npoint\n,\n \nangle\n,\n \ndistance\n);\n\n\n// point: {x, y}, angle: angle in radians\n\n\n\n\n\nVisible\n\n\nPhaser\n.\nActions\n.\nSetVisible\n(\ngameobjects\n,\n \nvalue\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nToggleVisible\n(\ngameobjects\n);\n\n\n\n\n\nAlpha\n\n\nPhaser\n.\nActions\n.\nSetAlpha\n(\ngameobjects\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nTint\n\n\nPhaser\n.\nActions\n.\nsetTint\n(\ngameobjects\n,\n \nvalue\n);\n\n\n//Phaser.Actions.setTint(gameobjects, topLeft, topRight, bottomLeft, bottomRight);\n\n\n\n\n\nOrigin\n\n\nPhaser\n.\nActions\n.\nSetOrigin\n(\ngameobjects\n,\n \noriginX\n,\n \noriginY\n,\n \nstepX\n,\n \nstepY\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nScale\n\n\nPhaser\n.\nActions\n.\nScaleX\n(\ngameobjects\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nScaleY\n(\ngameobjects\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nPhaser\n.\nActions\n.\nScaleXY\n(\ngameobjects\n,\n \nx\n,\n \ny\n,\n \nstepX\n,\n \nstepY\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nDepth\n\n\nPhaser\n.\nActions\n.\nSetDepth\n(\ngameobjects\n,\n \nvalue\n,\n \nstep\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nHit area\n\n\nPhaser\n.\nActions\n.\nSetHitArea\n(\ngameobjects\n,\n \nhitArea\n,\n \nhitAreaCallback\n);\n\n\n\n\n\nBlend mode\n\n\nPhaser\n.\nActions\n.\nSetHitArea\n(\ngameobjects\n,\n \nvalue\n,\n \nindex\n,\n \ndirection\n);\n\n\n\n\n\nBlend mode :\n\n\n\n\nPhaser.BlendModes.SKIP_CHECK\n\n\nPhaser.BlendModes.NORMAL\n\n\nPhaser.BlendModes.ADD\n\n\nPhaser.BlendModes.MULTIPLY\n\n\nPhaser.BlendModes.SCREEN\n\n\nPhaser.BlendModes.OVERLAY\n\n\nPhaser.BlendModes.DARKEN\n\n\nPhaser.BlendModes.LIGHTEN\n\n\nPhaser.BlendModes.COLOR_DODGE\n\n\nPhaser.BlendModes.COLOR_BURN\n\n\nPhaser.BlendModes.HARD_LIGHT\n\n\nPhaser.BlendModes.SOFT_LIGHT\n\n\nPhaser.BlendModes.DIFFERENCE\n\n\nPhaser.BlendModes.EXCLUSION\n\n\nPhaser.BlendModes.HUE\n\n\nPhaser.BlendModes.SATURATION\n\n\nPhaser.BlendModes.COLOR\n\n\nPhaser.BlendModes.LUMINOSITY\n\n\n\n\nPlay animation\n\n\nPhaser\n.\nActions\n.\nPlayAnimation\n(\ngameobjects\n,\n \nkey\n,\n \nstartFrame\n);\n\n\n\n\n\nShuffle\n\n\nPhaser\n.\nActions\n.\nShuffle\n(\ngameobjects\n);", 
            "title": "Group actions"
        }, 
        {
            "location": "/groupactions/index.html#introduction", 
            "text": "Set properties of game objects, built-in methods of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/groupactions/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/groupactions/index.html#call", 
            "text": "Phaser . Actions . Call ( gameobjects ,   callback ,   context );", 
            "title": "Call"
        }, 
        {
            "location": "/groupactions/index.html#any-property", 
            "text": "Phaser . Actions . PropertyValueSet ( gameobjects ,   key ,   value ,   step ,   index ,   direction );    gameobjects : The array of game objects to be updated by this action.  key : The property to be updated.  value : The amount to be added to the property.  step : This is added to the  value  amount, multiplied by the iteration counter.  index : An optional offset to start searching from within the items array.  direction :  1  : from beginning to end.  -1 : from end to beginning.     Phaser . Actions . PropertyValueInc ( gameobjects ,   key ,   value ,   step ,   index ,   direction );   Phaser . Actions . SmootherStep ( gameobjects ,   key ,   min ,   max ,   inc ));   Phaser . Actions . SmoothStep ( gameobjects ,   key ,   min ,   max ,   inc ));   Phaser . Actions . Spread ( gameobjects ,   key ,   min ,   max ,   inc ));", 
            "title": "Any property"
        }, 
        {
            "location": "/groupactions/index.html#position", 
            "text": "Phaser . Actions . SetX ( gameobjects ,   value ,   step ,   index ,   direction );   Phaser . Actions . IncX ( gameobjects ,   value ,   step ,   index ,   direction );   Phaser . Actions . SetY ( gameobjects ,   value ,   step ,   index ,   direction );   Phaser . Actions . IncY ( gameobjects ,   value ,   step ,   index ,   direction );   Phaser . Actions . SetXY ( gameobjects ,   x ,   y ,   stepX ,   stepY ,   index ,   direction );   Phaser . Actions . IncXY ( gameobjects ,   x ,   y ,   stepX ,   stepY ,   index ,   direction );", 
            "title": "Position"
        }, 
        {
            "location": "/groupactions/index.html#shift-position", 
            "text": "Set the position of first game object to (x, y), others to the position of previous game object.  Phaser . Actions . ShiftPosition ( gameobjects ,   x ,   y ,   direction ,   output );", 
            "title": "Shift position"
        }, 
        {
            "location": "/groupactions/index.html#position-on-shape", 
            "text": "", 
            "title": "Position on shape"
        }, 
        {
            "location": "/groupactions/index.html#grid-align", 
            "text": "Phaser . Actions . GridAlign ( gameobjects ,   { \n     width :   - 1 , \n     height :   - 1 , \n     cellWidth :   1 , \n     cellHeight :   1 , \n     position :   Phaser . Display . Align . TOP_LEFT , \n     x :   0 , \n     y :   0  });", 
            "title": "Grid align"
        }, 
        {
            "location": "/groupactions/index.html#line", 
            "text": "var   line   =   new   Phaser . Geom . Line ( x1 ,   y1 ,   x2 ,   y2 );   Phaser . Actions . PlaceOnLine ( gameobjects ,   line );   Phaser . Actions . RandomLine ( gameobjects ,   line );", 
            "title": "Line"
        }, 
        {
            "location": "/groupactions/index.html#circle", 
            "text": "var   circle   =   new   Phaser . Geom . Circle ( x ,   y ,   radius );   Phaser . Actions . PlaceOnCircle ( gameobjects ,   circle ,   startAngle ,   endAngle );   Phaser . Actions . RandomCircle ( gameobjects ,   circle );", 
            "title": "Circle"
        }, 
        {
            "location": "/groupactions/index.html#ellipse", 
            "text": "var   ellipse   =   new   Phaser . Geom . Ellipse ( x ,   y ,   width ,   height );   Phaser . Actions . PlaceOnEllipse ( gameobjects ,   ellipse ,   startAngle ,   endAngle );", 
            "title": "Ellipse"
        }, 
        {
            "location": "/groupactions/index.html#triangle", 
            "text": "var   triangle   =   new   Phaser . Geom . Triangle ( x1 ,   y1 ,   x2 ,   y2 ,   x3 ,   y3 );   Phaser . Actions . PlaceOnTriangle ( gameobjects ,   triangle ,   stepRate );   Phaser . Actions . RandomTriangle ( gameobjects ,   triangle );", 
            "title": "Triangle"
        }, 
        {
            "location": "/groupactions/index.html#rectangle", 
            "text": "var   rect   =   new   Phaser . Geom . Rectangle ( x ,   y ,   width ,   height );   Phaser . Actions . PlaceOnRectangle ( gameobjects ,   rect ,   shift ;   Phaser . Actions . RandomRectangle ( gameobjects ,   rect );   Phaser . Actions . WrapInRectangle ( gameobjects ,   rect ,   padding );", 
            "title": "Rectangle"
        }, 
        {
            "location": "/groupactions/index.html#angle", 
            "text": "Phaser . Actions . Angle ( gameobjects ,   value ,   step ,   index ,   direction );  // value: angle in radians   Phaser . Actions . Rotate ( gameobjects ,   value ,   step ,   index ,   direction );  // value: angle in degree   Phaser . Actions . RotateAround ( gameobjects ,   point ,   angle );  // point: {x, y}, angle: angle in radians   Phaser . Actions . RotateAroundDistance ( gameobjects ,   point ,   angle ,   distance );  // point: {x, y}, angle: angle in radians", 
            "title": "Angle"
        }, 
        {
            "location": "/groupactions/index.html#visible", 
            "text": "Phaser . Actions . SetVisible ( gameobjects ,   value ,   index ,   direction );   Phaser . Actions . ToggleVisible ( gameobjects );", 
            "title": "Visible"
        }, 
        {
            "location": "/groupactions/index.html#alpha", 
            "text": "Phaser . Actions . SetAlpha ( gameobjects ,   value ,   step ,   index ,   direction );", 
            "title": "Alpha"
        }, 
        {
            "location": "/groupactions/index.html#tint", 
            "text": "Phaser . Actions . setTint ( gameobjects ,   value );  //Phaser.Actions.setTint(gameobjects, topLeft, topRight, bottomLeft, bottomRight);", 
            "title": "Tint"
        }, 
        {
            "location": "/groupactions/index.html#origin", 
            "text": "Phaser . Actions . SetOrigin ( gameobjects ,   originX ,   originY ,   stepX ,   stepY ,   index ,   direction );", 
            "title": "Origin"
        }, 
        {
            "location": "/groupactions/index.html#scale", 
            "text": "Phaser . Actions . ScaleX ( gameobjects ,   value ,   step ,   index ,   direction );   Phaser . Actions . ScaleY ( gameobjects ,   value ,   step ,   index ,   direction );   Phaser . Actions . ScaleXY ( gameobjects ,   x ,   y ,   stepX ,   stepY ,   index ,   direction );", 
            "title": "Scale"
        }, 
        {
            "location": "/groupactions/index.html#depth", 
            "text": "Phaser . Actions . SetDepth ( gameobjects ,   value ,   step ,   index ,   direction );", 
            "title": "Depth"
        }, 
        {
            "location": "/groupactions/index.html#hit-area", 
            "text": "Phaser . Actions . SetHitArea ( gameobjects ,   hitArea ,   hitAreaCallback );", 
            "title": "Hit area"
        }, 
        {
            "location": "/groupactions/index.html#blend-mode", 
            "text": "Phaser . Actions . SetHitArea ( gameobjects ,   value ,   index ,   direction );   Blend mode :   Phaser.BlendModes.SKIP_CHECK  Phaser.BlendModes.NORMAL  Phaser.BlendModes.ADD  Phaser.BlendModes.MULTIPLY  Phaser.BlendModes.SCREEN  Phaser.BlendModes.OVERLAY  Phaser.BlendModes.DARKEN  Phaser.BlendModes.LIGHTEN  Phaser.BlendModes.COLOR_DODGE  Phaser.BlendModes.COLOR_BURN  Phaser.BlendModes.HARD_LIGHT  Phaser.BlendModes.SOFT_LIGHT  Phaser.BlendModes.DIFFERENCE  Phaser.BlendModes.EXCLUSION  Phaser.BlendModes.HUE  Phaser.BlendModes.SATURATION  Phaser.BlendModes.COLOR  Phaser.BlendModes.LUMINOSITY", 
            "title": "Blend mode"
        }, 
        {
            "location": "/groupactions/index.html#play-animation", 
            "text": "Phaser . Actions . PlayAnimation ( gameobjects ,   key ,   startFrame );", 
            "title": "Play animation"
        }, 
        {
            "location": "/groupactions/index.html#shuffle", 
            "text": "Phaser . Actions . Shuffle ( gameobjects );", 
            "title": "Shuffle"
        }, 
        {
            "location": "/gridtable/index.html", 
            "text": "Introduction\n\n\nViewer of grid table, to manipulate game object of each visible cell.\n\n\n\n\nAuthor: Rex\n\n\nA kind of game object\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nCreate instance\n\n\nvar\n \ntable\n \n=\n \nscene\n.\nadd\n.\nrexGridTable\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n,\n \nconfig\n);\n\n\n\n\n\nConfiguration\n\n\n{\n\n    \ncellsCount\n:\n \n0\n,\n    \n// total cells count\n\n    \ncolumns\n:\n \n1\n,\n       \n// columns count of each row\n\n    \ncellHeight\n:\n \n30\n,\n   \n// default height of each cell\n\n    \ncellWidth\n:\n \n30\n,\n    \n// width of each cell\n\n\n    \ncellVisibleCallback\n:\n \nnull\n,\n \n// callback when cell begins visible\n\n    \ncellVisibleCallbackScope\n:\n \nundefined\n,\n\n\n    \ncellInvisibleCallback\n:\n \nnull\n,\n \n// callback when cell begins invisible\n\n    \ncellInvisibleCallbackScope\n:\n \nundefined\n,\n\n\n    \nclamplTableOXY\n:\n \ntrue\n,\n \n// clamp tableOX, tableOY when out-of-bound\n\n    \nscrollMode\n:\n \n0\n,\n        \n// 0|\nv\n|\nvertical\n|1|\nh\n|\nhorizontal\n\n\n}\n\n\n\n\n\nAdd grid table from JSON\n\n\nvar\n \ntable\n \n=\n \nscene\n.\nmake\n.\nrexGridTable\n({\n\n    \nx\n:\n \n0\n,\n\n    \ny\n:\n \n0\n,\n\n    \nwidth\n:\n \n256\n,\n\n    \nheight\n:\n \n256\n,\n\n\n    \n// cellsCount: 0,   // total cells count\n\n    \n// ...\n\n\n});\n\n\n\n\n\nCell begins visible\n\n\nAdd \ncontainer\n of cell when it begins visible in event \ncellvisible\n. \n\n\ntable\n.\non\n(\ncellvisible\n,\n \nfunction\n(\ncell\n){\n\n    \ncell\n.\nsetContainer\n(\ncustomContainer\n);\n\n\n})\n\n\n\n\n\nIt is equal to \ncellVisibleCallback\n in configuration.\n\n\n{\n\n    \n// ...\n\n    \ncellVisibleCallback\n:\n \nfunction\n(\ncell\n)\n \n{\n \ncell\n.\nsetContainer\n(\ncustomContainer\n);\n \n},\n\n    \n// ...\n\n\n}\n\n\n\n\n\nEach cell only has \none\n container gameobject, old container will be destroyed when assigning a new container.\n\n\nCell begins invisible\n\n\nContainer of an invisible cell will be destroyed automatically.\n\n\nTo resue container gameobject, user could pop that container by \ncell.popContainer()\n in event \ncellinvisible\n.\n\n\ntable\n.\non\n(\ncellinvisible\n,\n \nfunction\n(\ncell\n){\n\n    \nvar\n \ncontainer\n \n=\n \ncell\n.\npopContainer\n();\n\n    \n// put this container into an object pool\n\n\n})\n\n\n\n\n\nIt is equal to \ncellInvisibleCallback\n in configuration.\n\n\n{\n\n    \n// ...\n\n    \ncellInvisibleCallback\n:\n \nfunction\n(\ncell\n)\n \n{\n \nvar\n \ncontainer\n \n=\n \ncell\n.\npopContainer\n();\n \n/*... */\n \n},\n\n    \n// ...\n\n\n}\n\n\n\n\n\nScroll table content\n\n\ntable\n.\nsetTableOY\n(\noy\n).\nupdateTable\n();\n\n\ntable\n.\naddTableOY\n(\ndy\n).\nupdateTable\n();\n\n\n\n\n\ntable\n.\nsetTableOX\n(\nox\n).\nupdateTable\n();\n\n\ntable\n.\naddTableOX\n(\ndx\n).\nupdateTable\n();\n\n\n\n\n\ntable\n.\nsetTableOXY\n(\nox\n,\n \noy\n).\nupdateTable\n();\n\n\ntable\n.\naddTableOXY\n(\ndx\n,\n \ndy\n).\nupdateTable\n();\n\n\n\n\n\nThese will trigger \ncellvisible\n, or \ncellinvisible\n events.\n\n\nRefresh table content\n\n\nRefresh all visible cells.\n\n\ntable\n.\nupdateTable\n(\ntrue\n);\n\n\n\n\n\nSet total cells count\n\n\ntable\n.\nsetCellsCunt\n(\ncount\n).\nupdateTable\n();\n\n\n\n\n\nSet table size\n\n\ntable\n.\nsetGridSize\n(\ncolCount\n,\n \nrowCount\n).\nupdateTable\n();\n\n\n\n\n\nSet columns count\n\n\ntable\n.\nsetColumnCount\n(\ncount\n).\nupdateTable\n();\n\n\n\n\n\nCell\n\n\nGet cell\n\n\nvar\n \ncell\n \n=\n \ntable\n.\ngetCell\n(\ncellIndxe\n);\n\n\n\n\n\nFore each visible cell\n\n\n\n\nFor when you absolutely know this Set won't be modified during the iteration\n    \ntable\n.\niterateVisibleCell\n(\nfunction\n(\ncell\n){\n\n    \n// ...\n\n\n});\n\n\n\n\nFor when you know this Set will be modified during the iteration.\n    \ntable\n.\neachVisibleCell\n(\nfunction\n(\ncell\n){\n\n    \n// ...\n\n\n});\n\n\n\n\n\n\nContainer\n\n\nvar\n \ncontainer\n \n=\n \ncell\n.\ngetContainer\n();\n\n\n\n\n\nvar\n \ncontainer\n \n=\n \ncell\n.\npopContainer\n();\n\n\n\n\n\ncell\n.\nsetContainer\n(\ncontainer\n);\n\n\n\n\ncell\n.\ndestroyContainer\n();\n\n\n\n\nProperties\n\n\nvar\n \ncellIndex\n \n=\n \ncell\n.\nindex\n;", 
            "title": "Grid table"
        }, 
        {
            "location": "/gridtable/index.html#introduction", 
            "text": "Viewer of grid table, to manipulate game object of each visible cell.   Author: Rex  A kind of game object", 
            "title": "Introduction"
        }, 
        {
            "location": "/gridtable/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/gridtable/index.html#usage", 
            "text": "Sample code", 
            "title": "Usage"
        }, 
        {
            "location": "/gridtable/index.html#create-instance", 
            "text": "var   table   =   scene . add . rexGridTable ( x ,   y ,   width ,   height ,   config );   Configuration  { \n     cellsCount :   0 ,      // total cells count \n     columns :   1 ,         // columns count of each row \n     cellHeight :   30 ,     // default height of each cell \n     cellWidth :   30 ,      // width of each cell \n\n     cellVisibleCallback :   null ,   // callback when cell begins visible \n     cellVisibleCallbackScope :   undefined , \n\n     cellInvisibleCallback :   null ,   // callback when cell begins invisible \n     cellInvisibleCallbackScope :   undefined , \n\n     clamplTableOXY :   true ,   // clamp tableOX, tableOY when out-of-bound \n     scrollMode :   0 ,          // 0| v | vertical |1| h | horizontal  }   Add grid table from JSON  var   table   =   scene . make . rexGridTable ({ \n     x :   0 , \n     y :   0 , \n     width :   256 , \n     height :   256 , \n\n     // cellsCount: 0,   // total cells count \n     // ...  });", 
            "title": "Create instance"
        }, 
        {
            "location": "/gridtable/index.html#cell-begins-visible", 
            "text": "Add  container  of cell when it begins visible in event  cellvisible .   table . on ( cellvisible ,   function ( cell ){ \n     cell . setContainer ( customContainer );  })   It is equal to  cellVisibleCallback  in configuration.  { \n     // ... \n     cellVisibleCallback :   function ( cell )   {   cell . setContainer ( customContainer );   }, \n     // ...  }   Each cell only has  one  container gameobject, old container will be destroyed when assigning a new container.", 
            "title": "Cell begins visible"
        }, 
        {
            "location": "/gridtable/index.html#cell-begins-invisible", 
            "text": "Container of an invisible cell will be destroyed automatically.  To resue container gameobject, user could pop that container by  cell.popContainer()  in event  cellinvisible .  table . on ( cellinvisible ,   function ( cell ){ \n     var   container   =   cell . popContainer (); \n     // put this container into an object pool  })   It is equal to  cellInvisibleCallback  in configuration.  { \n     // ... \n     cellInvisibleCallback :   function ( cell )   {   var   container   =   cell . popContainer ();   /*... */   }, \n     // ...  }", 
            "title": "Cell begins invisible"
        }, 
        {
            "location": "/gridtable/index.html#scroll-table-content", 
            "text": "table . setTableOY ( oy ). updateTable ();  table . addTableOY ( dy ). updateTable ();   table . setTableOX ( ox ). updateTable ();  table . addTableOX ( dx ). updateTable ();   table . setTableOXY ( ox ,   oy ). updateTable ();  table . addTableOXY ( dx ,   dy ). updateTable ();   These will trigger  cellvisible , or  cellinvisible  events.", 
            "title": "Scroll table content"
        }, 
        {
            "location": "/gridtable/index.html#refresh-table-content", 
            "text": "Refresh all visible cells.  table . updateTable ( true );", 
            "title": "Refresh table content"
        }, 
        {
            "location": "/gridtable/index.html#set-total-cells-count", 
            "text": "table . setCellsCunt ( count ). updateTable ();", 
            "title": "Set total cells count"
        }, 
        {
            "location": "/gridtable/index.html#set-table-size", 
            "text": "table . setGridSize ( colCount ,   rowCount ). updateTable ();", 
            "title": "Set table size"
        }, 
        {
            "location": "/gridtable/index.html#set-columns-count", 
            "text": "table . setColumnCount ( count ). updateTable ();", 
            "title": "Set columns count"
        }, 
        {
            "location": "/gridtable/index.html#cell", 
            "text": "", 
            "title": "Cell"
        }, 
        {
            "location": "/gridtable/index.html#get-cell", 
            "text": "var   cell   =   table . getCell ( cellIndxe );", 
            "title": "Get cell"
        }, 
        {
            "location": "/gridtable/index.html#fore-each-visible-cell", 
            "text": "For when you absolutely know this Set won't be modified during the iteration\n     table . iterateVisibleCell ( function ( cell ){ \n     // ...  });   For when you know this Set will be modified during the iteration.\n     table . eachVisibleCell ( function ( cell ){ \n     // ...  });", 
            "title": "Fore each visible cell"
        }, 
        {
            "location": "/gridtable/index.html#container", 
            "text": "var   container   =   cell . getContainer ();   var   container   =   cell . popContainer ();   cell . setContainer ( container );   cell . destroyContainer ();", 
            "title": "Container"
        }, 
        {
            "location": "/gridtable/index.html#properties", 
            "text": "var   cellIndex   =   cell . index ;", 
            "title": "Properties"
        }, 
        {
            "location": "/date/index.html", 
            "text": "Introduction\n\n\nGet current date or unix-timestamp.\n\n\n\n\nAuthor: Built-in javascript function\n\n\n\n\nUsage\n\n\nReference\n\n\nCreate instance\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n();\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n(\ntimestamp\n);\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n(\ndateString\n);\n\n\nvar\n \nd\n \n=\n \nnew\n \nDate\n(\nyear\n,\n \nmonth\n,\n \nday\n,\n \nhours\n,\n \nminutes\n,\n \nseconds\n,\n \nmilliseconds\n);\n\n\n\n\n\nGet date\n\n\nvar\n \nyear\n \n=\n \nd\n.\ngetFullYear\n();\n    \n// returns the year\n\n\nvar\n \nmonth\n \n=\n \nd\n.\ngetMonth\n();\n      \n// returns the month (0-11)\n\n\nvar\n \ndate\n \n=\n \nd\n.\ngetDate\n();\n        \n// returns the day of the month (1-31)\n\n\nvar\n \nday\n \n=\n \nd\n.\ngetDay\n();\n          \n// returns the day of the week\n\n\nvar\n \nhour\n \n=\n \nd\n.\ngetHours\n();\n       \n// returns the hour (0-23)\n\n\nvar\n \nmin\n \n=\n \nd\n.\ngetMinutes\n();\n      \n// returns the minutes (0-59)\n\n\nvar\n \nsec\n \n=\n \nd\n.\ngetSeconds\n();\n      \n// returns the seconds (0-59)\n\n\nvar\n \nms\n \n=\n \nd\n.\ngetMilliseconds\n();\n  \n// returns the milliseconds (0-999)\n\n\n\n\n\nGet unix-timestamp\n\n\nvar\n \ntimestamp\n \n=\n \nd\n.\nnow\n();\n       \n// unix-timestamp in milliseconds\n\n\n\n\n\nTo string\n\n\nvar\n \ns\n \n=\n \nd\n.\ntoLocaleString\n();\n   \n// locale conventions\n\n\nvar\n \niso\n \n=\n \nd\n.\ntoISOString\n();\n    \n// ISO standard", 
            "title": "Date"
        }, 
        {
            "location": "/date/index.html#introduction", 
            "text": "Get current date or unix-timestamp.   Author: Built-in javascript function", 
            "title": "Introduction"
        }, 
        {
            "location": "/date/index.html#usage", 
            "text": "Reference", 
            "title": "Usage"
        }, 
        {
            "location": "/date/index.html#create-instance", 
            "text": "var   d   =   new   Date ();  var   d   =   new   Date ( timestamp );  var   d   =   new   Date ( dateString );  var   d   =   new   Date ( year ,   month ,   day ,   hours ,   minutes ,   seconds ,   milliseconds );", 
            "title": "Create instance"
        }, 
        {
            "location": "/date/index.html#get-date", 
            "text": "var   year   =   d . getFullYear ();      // returns the year  var   month   =   d . getMonth ();        // returns the month (0-11)  var   date   =   d . getDate ();          // returns the day of the month (1-31)  var   day   =   d . getDay ();            // returns the day of the week  var   hour   =   d . getHours ();         // returns the hour (0-23)  var   min   =   d . getMinutes ();        // returns the minutes (0-59)  var   sec   =   d . getSeconds ();        // returns the seconds (0-59)  var   ms   =   d . getMilliseconds ();    // returns the milliseconds (0-999)", 
            "title": "Get date"
        }, 
        {
            "location": "/date/index.html#get-unix-timestamp", 
            "text": "var   timestamp   =   d . now ();         // unix-timestamp in milliseconds", 
            "title": "Get unix-timestamp"
        }, 
        {
            "location": "/date/index.html#to-string", 
            "text": "var   s   =   d . toLocaleString ();     // locale conventions  var   iso   =   d . toISOString ();      // ISO standard", 
            "title": "To string"
        }, 
        {
            "location": "/timer/index.html", 
            "text": "Introduction\n\n\nExecute callback when time-out, built-in object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nStart timer\n\n\n\n\n\n\nLooped timer\n\n\nvar\n \ntimer\n \n=\n \nscene\n.\ntime\n.\naddEvent\n({\n\n    \ndelay\n:\n \n500\n,\n                \n// ms\n\n    \ncallback\n:\n \ncallback\n,\n\n    \n//args: [],\n\n    \ncallbackScope\n:\n \nthisArg\n,\n\n    \nloop\n:\n \ntrue\n\n\n});\n\n\n\n\n\n\n\n\n\nRepeat timer\n\n\nvar\n \ntimer\n \n=\n \nscene\n.\ntime\n.\naddEvent\n({\n\n    \ndelay\n:\n \n500\n,\n                \n// ms\n\n    \ncallback\n:\n \ncallback\n,\n\n    \n//args: [],\n\n    \ncallbackScope\n:\n \nthisArg\n,\n\n    \nrepeat\n:\n \n4\n\n\n});\n\n\n\n\n\n\n\n\n\nOneshot timer\n\n\nvar\n \ntimer\n \n=\n \nscene\n.\ntime\n.\ndelayedCall\n(\ndelay\n,\n \ncallback\n,\n \nargs\n,\n \ncallbackscope\n);\n  \n// delay in ms\n\n\n\n\n\n\n\n\n\nAll properties of timer\n\n\nvar\n \ntimer\n \n=\n \nscene\n.\ntime\n.\naddEvent\n({\n\n    \ndelay\n:\n \n500\n,\n                \n// ms\n\n    \ncallback\n:\n \ncallback\n,\n\n    \nargs\n:\n \n[],\n\n    \ncallbackScope\n:\n \nthisArg\n,\n\n    \nloop\n:\n \nfasle\n,\n\n    \nrepeat\n:\n \n0\n,\n\n    \nstartAt\n:\n \n0\n,\n\n    \ntimeScale\n:\n \n1\n,\n\n    \npaused\n:\n \nfalse\n\n\n});\n\n\n\n\n\n\n\n\n\nStatus of timer\n\n\n\n\n\n\nGet elapsed time\n\n\nvar\n \nelapsed\n \n=\n \ntimer\n.\ngetElapsed\n();\n   \n// ms\n\n\nvar\n \nelapsed\n \n=\n \ntimer\n.\ngetElapsedSeconds\n();\n \n// sec\n\n\n\n\n\n\n\n\n\nGet repeat count\n\n\nvar\n \nrepeat\n \n=\n \ntimer\n.\ngetRepeatCount\n();\n\n\n\n\n\n\n\n\n\nGets the progress of the current iteration\n\n\nvar\n \nprogress\n \n=\n \ntimer\n.\ngetProgress\n();\n  \n// elapsed / delay\n\n\n\n\n\n\n\n\n\nGets the progress of the timer overall, factoring in repeats.\n\n\nvar\n \nprogress\n \n=\n \ntimer\n.\ngetOverallProgress\n();\n  \n// totalElapsed / totalDuration\n\n\n\n\n\n\n\n\n\nGet delay time\n\n\nvar\n \ndelay\n \n=\n \ntimer\n.\ndelay\n;\n   \n// ms\n\n\n\n\n\n\n\n\n\nIs paused\n\n\nvar\n \nisPaused\n \n=\n \ntimer\n.\npaused\n;\n\n\n\n\n\n\n\n\n\nGet time-scale\n\n\nvar\n \ntimeScale\n \n=\n \ntimer\n.\ntimeScale\n;\n\n\n\n\n\n\n\n\n\nCommands of timer\n\n\n\n\n\n\nPause timer\n\n\ntimer\n.\npaused\n \n=\n \ntrue\n;\n\n\n\n\n\n\n\n\n\nResume timer\n\n\ntimer\n.\npaused\n \n=\n \nfalse\n;\n\n\n\n\n\n\n\n\n\nRemove timer from timeline\n\n\ntimer\n.\nremove\n();\n\n\n\n\n\n\n\n\n\nSet time-scale\n\n\ntimer\n.\ntimeScale\n \n=\n \n2\n;", 
            "title": "Timer"
        }, 
        {
            "location": "/timer/index.html#introduction", 
            "text": "Execute callback when time-out, built-in object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/timer/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/timer/index.html#start-timer", 
            "text": "Looped timer  var   timer   =   scene . time . addEvent ({ \n     delay :   500 ,                  // ms \n     callback :   callback , \n     //args: [], \n     callbackScope :   thisArg , \n     loop :   true  });     Repeat timer  var   timer   =   scene . time . addEvent ({ \n     delay :   500 ,                  // ms \n     callback :   callback , \n     //args: [], \n     callbackScope :   thisArg , \n     repeat :   4  });     Oneshot timer  var   timer   =   scene . time . delayedCall ( delay ,   callback ,   args ,   callbackscope );    // delay in ms     All properties of timer  var   timer   =   scene . time . addEvent ({ \n     delay :   500 ,                  // ms \n     callback :   callback , \n     args :   [], \n     callbackScope :   thisArg , \n     loop :   fasle , \n     repeat :   0 , \n     startAt :   0 , \n     timeScale :   1 , \n     paused :   false  });", 
            "title": "Start timer"
        }, 
        {
            "location": "/timer/index.html#status-of-timer", 
            "text": "Get elapsed time  var   elapsed   =   timer . getElapsed ();     // ms  var   elapsed   =   timer . getElapsedSeconds ();   // sec     Get repeat count  var   repeat   =   timer . getRepeatCount ();     Gets the progress of the current iteration  var   progress   =   timer . getProgress ();    // elapsed / delay     Gets the progress of the timer overall, factoring in repeats.  var   progress   =   timer . getOverallProgress ();    // totalElapsed / totalDuration     Get delay time  var   delay   =   timer . delay ;     // ms     Is paused  var   isPaused   =   timer . paused ;     Get time-scale  var   timeScale   =   timer . timeScale ;", 
            "title": "Status of timer"
        }, 
        {
            "location": "/timer/index.html#commands-of-timer", 
            "text": "Pause timer  timer . paused   =   true ;     Resume timer  timer . paused   =   false ;     Remove timer from timeline  timer . remove ();     Set time-scale  timer . timeScale   =   2 ;", 
            "title": "Commands of timer"
        }, 
        {
            "location": "/timeline/index.html", 
            "text": "Introduction\n\n\nUpdate timers, built-in object of phaser. Each scene has a timeline (\nscene.time\n) already.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nTime-scale\n\n\n\n\n\n\nGet time-scale\n\n\nvar\n \ntimeScale\n \n=\n \nscene\n.\ntime\n.\ntimeScale\n;\n\n\n\n\n\n\n\n\n\nSet time-scale\n\n\nscene\n.\ntime\n.\ntimeScale\n \n=\n \n2\n;\n\n\n\n\n\n\n\n\n\nPause or resume\n\n\n\n\n\n\nPause\n\n\nscene\n.\ntime\n.\npaused\n \n=\n \ntrue\n;\n\n\n\n\n\n\n\n\n\nResume\n\n\nscene\n.\ntime\n.\npaused\n \n=\n \nfalse\n;\n\n\n\n\n\n\n\n\n\nGet current game-time\n\n\nvar\n \ntime\n \n=\n \nscene\n.\ntime\n.\nnow\n;\n\n\n\n\n\nGame-time is not system time.\n\n\nCreate timeline object\n\n\nvar\n \ntimeline\n \n=\n \nnew\n \nPhaser\n.\nTime\n.\nClock\n(\nscene\n);", 
            "title": "Timeline"
        }, 
        {
            "location": "/timeline/index.html#introduction", 
            "text": "Update timers, built-in object of phaser. Each scene has a timeline ( scene.time ) already.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/timeline/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/timeline/index.html#time-scale", 
            "text": "Get time-scale  var   timeScale   =   scene . time . timeScale ;     Set time-scale  scene . time . timeScale   =   2 ;", 
            "title": "Time-scale"
        }, 
        {
            "location": "/timeline/index.html#pause-or-resume", 
            "text": "Pause  scene . time . paused   =   true ;     Resume  scene . time . paused   =   false ;", 
            "title": "Pause or resume"
        }, 
        {
            "location": "/timeline/index.html#get-current-game-time", 
            "text": "var   time   =   scene . time . now ;   Game-time is not system time.", 
            "title": "Get current game-time"
        }, 
        {
            "location": "/timeline/index.html#create-timeline-object", 
            "text": "var   timeline   =   new   Phaser . Time . Clock ( scene );", 
            "title": "Create timeline object"
        }, 
        {
            "location": "/clock/index.html", 
            "text": "Introduction\n\n\nA clock to count elapsed time.\n\n\n\n\nAuthor: Rex\n\n\nMember of scene\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nrexClock\n \nfrom\n \n./plugins/clock.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nClockPlugin\n \nfrom\n \n./plugins/clock-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexClock\n,\n\n            \nplugin\n:\n \nClockPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n}\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate instance\n\n\nvar\n \nclock\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexClock\n).\nadd\n(\nscene\n,\n \n{\n\n    \n// timeScale: 1\n\n\n});\n\n\n\n\n\nProperties\n\n\n\n\ntimeScale : time-scale for counting elapsed time.\n\n\n\n\nStart counting\n\n\nclock\n.\nstart\n();\n\n\n// clock.start(startAt);  // start-at time in ms\n\n\n\n\n\nGet elapsed time\n\n\nvar\n \nnow\n \n=\n \nclock\n.\nnow\n;\n  \n// elapsed time in ms\n\n\n\n\n\nPause, Resume, stop counting\n\n\nclock\n.\npause\n();\n\n\nclock\n.\nresume\n();\n\n\nclock\n.\nstop\n();\n\n\n\n\n\nSeek elapsed time\n\n\nclock\n.\nseek\n(\ntime\n);\n   \n// elapsed time in ms\n\n\n\n\n\nState of counting\n\n\nvar\n \nisRunning\n \n=\n \nclock\n.\nisRunning\n;\n\n\n\n\n\nTime-scale\n\n\nvar\n \ntimeScale\n \n=\n \nclock\n.\ntimeScale\n;\n\n\nclock\n.\ntimeScale\n \n=\n \n0.5\n;", 
            "title": "Clock"
        }, 
        {
            "location": "/clock/index.html#introduction", 
            "text": "A clock to count elapsed time.   Author: Rex  Member of scene", 
            "title": "Introduction"
        }, 
        {
            "location": "/clock/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/clock/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/clock/index.html#import-class", 
            "text": "import   rexClock   from   ./plugins/clock.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/clock/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   ClockPlugin   from   ./plugins/clock-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexClock , \n             plugin :   ClockPlugin , \n             start :   true \n         } \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/clock/index.html#create-instance", 
            "text": "var   clock   =   scene . plugins . get ( rexClock ). add ( scene ,   { \n     // timeScale: 1  });   Properties   timeScale : time-scale for counting elapsed time.", 
            "title": "Create instance"
        }, 
        {
            "location": "/clock/index.html#start-counting", 
            "text": "clock . start ();  // clock.start(startAt);  // start-at time in ms", 
            "title": "Start counting"
        }, 
        {
            "location": "/clock/index.html#get-elapsed-time", 
            "text": "var   now   =   clock . now ;    // elapsed time in ms", 
            "title": "Get elapsed time"
        }, 
        {
            "location": "/clock/index.html#pause-resume-stop-counting", 
            "text": "clock . pause ();  clock . resume ();  clock . stop ();", 
            "title": "Pause, Resume, stop counting"
        }, 
        {
            "location": "/clock/index.html#seek-elapsed-time", 
            "text": "clock . seek ( time );     // elapsed time in ms", 
            "title": "Seek elapsed time"
        }, 
        {
            "location": "/clock/index.html#state-of-counting", 
            "text": "var   isRunning   =   clock . isRunning ;", 
            "title": "State of counting"
        }, 
        {
            "location": "/clock/index.html#time-scale", 
            "text": "var   timeScale   =   clock . timeScale ;  clock . timeScale   =   0.5 ;", 
            "title": "Time-scale"
        }, 
        {
            "location": "/tween/index.html", 
            "text": "Introduction\n\n\nChange properties by tween equations, built-in object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nCreate tween task\n\n\nvar\n \ntween\n \n=\n \nscene\n.\ntweens\n.\nadd\n({\n\n    \ntargets\n:\n \ngameobject\n,\n\n    \n// delay: 0,\n\n    \n// duration: 1000,\n\n    \n// ease: \nPower0\n,\n\n    \n// easeParams: null,\n\n    \n// hold: 0,\n\n    \n// repeat: 0,\n\n    \n// repeatDelay: 0,\n\n    \n// yoyo: false,\n\n    \n// flipX: false,\n\n    \n// flipY: false,\n\n\n    \n// offset: null,\n\n    \n// completeDelay: 0,\n\n    \n// loop: 0\n\n    \n// loopDelay: 0,\n\n    \n// paused: false,\n\n    \n// useFrames: false,\n\n\n    \n// properties:\n\n    \n// x: \n+=600\n,        // start from current value\n\n    \n// y: 500,\n\n    \n// rotation: ...\n\n    \n// angle: ...\n\n    \n// alpha: ...\n\n    \n// ...\n\n\n    \n// or\n\n    \n// props: {\n\n    \n//     x: { value: \n+=600\n, duration: 3000, ease: \nPower2\n },\n\n    \n//     y: { value: \n500\n, duration: 1500, ease: \nBounce.easeOut\n }\n\n    \n// },\n\n\n    \n// or     \n\n    \n// props: {\n\n    \n//    x: {\n\n    \n//        duration: 400,\n\n    \n//        yoyo: true,\n\n    \n//        repeat: 8,\n\n    \n//        ease: \nSine.easeInOut\n,\n\n    \n//        value: {\n\n    \n//            getEnd: function (target, key, value)\n\n    \n//            {\n\n    \n//                destX -= 30;\n\n    \n//                return destX;\n\n    \n//            },\n\n    \n//            getStart: function (target, key, value)\n\n    \n//            {\n\n    \n//                return value + 30;\n\n    \n//            }\n\n    \n//        }\n\n    \n//    },\n\n    \n//    ....\n\n    \n// },\n\n\n    \n// callbackScope: timeline,\n\n\n    \n// onStart: function () {},\n\n    \n// onStartScope: callbackScope,\n\n\n    \n// onUpdate: function () {},\n\n    \n// onUpdateScope: callbackScope,\n\n\n    \n// onComplete: function () {},\n\n    \n// onCompleteScope: callbackScope,\n\n\n    \n// onYoyo: function () {},\n\n    \n// onYoyoScope: callbackScope,\n\n\n    \n// onRepeat: function () {},\n\n    \n// onRepeatScope: callbackScope\n\n\n});\n\n\n\n\n\n\n\ntargets: The targets the tween is updating.\n\n\ndelay: The time the tween will wait before it first starts\n\n\nduration: The duration of the tween\n\n\nease: The ease function used by the tween\n\n\neaseParams: The parameters to go with the ease function (if any)\n\n\nhold: The time the tween will pause before running a yoyo\n\n\nrepeat: The number of times the tween will repeat itself (a value of 1 means the tween will play twice, as it repeated once)\n\n\nrepeatDelay: The time the tween will pause for before starting a repeat. The tween holds in the start state.\n\n\nyoyo: boolean - Does the tween reverse itself (yoyo) when it reaches the end?\n\n\nflipX: flip X the GameObject on tween end\n\n\nflipY: flip Y the GameObject on tween end\n\n\noffset: Used when the Tween is part of a Timeline\n\n\ncompleteDelay: The time the tween will wait before the onComplete event is dispatched once it has completed\n\n\nloop: The time the tween will pause before starting either a yoyo or returning to the start for a repeat\n\n\nloopDelay:\n\n\npaused: Does the tween start in a paused state, or playing?\n\n\nuseFrames: Use frames or milliseconds?\n\n\nprops: The properties being tweened by the tween\n\n\nonStart: callback which fired when tween task started\n\n\nonComplete: callback which fired when tween task done\n\n\nonYoyo: callback which fired when tween reversed (yoyo)\n\n\nonRepeat: callback which fired when repeat started\n\n\n\n\nEase equations\n\n\n\n\nPower0\n : Linear\n\n\nPower1\n : Quadratic.Out\n\n\nPower2\n : Cubic.Out\n\n\nPower3\n : Quartic.Out\n\n\nPower4\n : Quintic.Out\n\n\nLinear\n\n\nQuad\n : Quadratic.Out\n\n\nCubic\n : Cubic.Out\n\n\nQuart\n : Quartic.Out\n\n\nQuint\n : Quintic.Out\n\n\nSine\n : Sine.Out\n\n\nExpo\n : Expo.Out\n\n\nCirc\n : Circular.Out\n\n\nElastic\n : Elastic.Out\n\n\nBack\n : Back.Out\n\n\nBounce\n : Bounce.Out\n\n\nStepped\n\n\nQuad.easeIn\n\n\nCubic.easeIn\n\n\nQuart.easeIn\n\n\nQuint.easeIn\n\n\nSine.easeIn\n\n\nExpo.easeIn\n\n\nCirc.easeIn\n\n\nBack.easeIn\n\n\nBounce.easeIn\n\n\nQuad.easeOut\n\n\nCubic.easeOut\n\n\nQuart.easeOut\n\n\nQuint.easeOut\n\n\nSine.easeOut\n\n\nExpo.easeOut\n\n\nCirc.easeOut\n\n\nBack.easeOut\n\n\nBounce.easeOut\n\n\nQuad.easeInOut\n\n\nCubic.easeInOut\n\n\nQuart.easeInOut\n\n\nQuint.easeInOut\n\n\nSine.easeInOut\n\n\nExpo.easeInOut\n\n\nCirc.easeInOut\n\n\nBack.easeInOut\n\n\nBounce.easeInOut\n\n\n\n\nPause / Resume task\n\n\ntween\n.\npause\n();\n\n\n\n\n\ntween\n.\nresume\n();\n\n\n\n\n\nvar\n \nisPlaying\n \n=\n \ntween\n.\nisPlaying\n();\n\n\nvar\n \nisPaused\n \n=\n \ntween\n.\nisPaused\n();\n\n\n\n\n\nStop task\n\n\ntween\n.\nstop\n();\n\n\n\n\n\nPlay task\n\n\ntween\n.\nplay\n();\n\n\n\n\n\nRestart task\n\n\ntween\n.\nrestart\n();\n\n\n\n\n\nTime-scale\n\n\ntween\n.\nsetTimeScale\n(\nv\n);\n\n\n// tween.timeScale = timescale;\n\n\n\n\n\nvar\n \ntimeScale\n \n=\n \ntween\n.\ngetTimeScale\n();\n\n\n// var timeScale = tween.timeScale;\n\n\n\n\n\nGlobal time-scale\n\n\nvar\n \ntimeScale\n \n=\n \nscene\n.\ntweens\n.\ntimeScale\n;\n\n\n\n\n\nscene\n.\ntweens\n.\ntimeScale\n \n=\n \ntimescale\n;\n\n\n\n\n\nTween value\n\n\nvar\n \ntween\n \n=\n \nscene\n.\ntweens\n.\naddCounter\n({\n\n    \n// from: 0,\n\n    \n// to: 1,\n\n    \n// delay: 0,\n\n    \n// duration: 1000,\n\n    \n// easeParams: null,\n\n    \n// ease: \nPower0\n,\n\n    \n// hold: 0,\n\n    \n// repeat: 0,\n\n    \n// repeatDelay: 0,\n\n    \n// yoyo: false,\n\n\n    \n// offset: null,\n\n    \n// completeDelay: 0,\n\n    \n// loop: 0,\n\n    \n// loopDelay: 0,\n\n    \n// paused: false,\n\n    \n// useFrames: false,\n\n\n    \n// callbackScope: timeline,\n\n\n    \n// onStart: function () {},\n\n    \n// onStartScope: callbackScope,\n\n\n    \n// onUpdate: function () {},\n\n    \n// onUpdateScope: callbackScope,\n\n\n    \n// onComplete: function () {},\n\n    \n// onCompleteScope: callbackScope,\n\n\n    \n// onYoyo: function () {},\n\n    \n// onYoyoScope: callbackScope,\n\n\n    \n// onRepeat: function () {},\n\n    \n// onRepeatScope: callbackScope\n\n\n});\n\n\n\n\n\nCustom ease function\n\n\nvar\n \ntween\n \n=\n \nscene\n.\ntweens\n.\nadd\n({\n\n    \ntargets\n:\n \ngameobject\n,\n\n    \n// ...\n\n    \nease\n:\n \nfunction\n \n(\nt\n)\n \n{\n  \n// t: 0~1\n\n        \nreturn\n \nvalue\n;\n     \n// value: 0~1\n\n    \n},\n\n    \n// ...\n\n\n});", 
            "title": "Tween"
        }, 
        {
            "location": "/tween/index.html#introduction", 
            "text": "Change properties by tween equations, built-in object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/tween/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/tween/index.html#create-tween-task", 
            "text": "var   tween   =   scene . tweens . add ({ \n     targets :   gameobject , \n     // delay: 0, \n     // duration: 1000, \n     // ease:  Power0 , \n     // easeParams: null, \n     // hold: 0, \n     // repeat: 0, \n     // repeatDelay: 0, \n     // yoyo: false, \n     // flipX: false, \n     // flipY: false, \n\n     // offset: null, \n     // completeDelay: 0, \n     // loop: 0 \n     // loopDelay: 0, \n     // paused: false, \n     // useFrames: false, \n\n     // properties: \n     // x:  +=600 ,        // start from current value \n     // y: 500, \n     // rotation: ... \n     // angle: ... \n     // alpha: ... \n     // ... \n\n     // or \n     // props: { \n     //     x: { value:  +=600 , duration: 3000, ease:  Power2  }, \n     //     y: { value:  500 , duration: 1500, ease:  Bounce.easeOut  } \n     // }, \n\n     // or      \n     // props: { \n     //    x: { \n     //        duration: 400, \n     //        yoyo: true, \n     //        repeat: 8, \n     //        ease:  Sine.easeInOut , \n     //        value: { \n     //            getEnd: function (target, key, value) \n     //            { \n     //                destX -= 30; \n     //                return destX; \n     //            }, \n     //            getStart: function (target, key, value) \n     //            { \n     //                return value + 30; \n     //            } \n     //        } \n     //    }, \n     //    .... \n     // }, \n\n     // callbackScope: timeline, \n\n     // onStart: function () {}, \n     // onStartScope: callbackScope, \n\n     // onUpdate: function () {}, \n     // onUpdateScope: callbackScope, \n\n     // onComplete: function () {}, \n     // onCompleteScope: callbackScope, \n\n     // onYoyo: function () {}, \n     // onYoyoScope: callbackScope, \n\n     // onRepeat: function () {}, \n     // onRepeatScope: callbackScope  });    targets: The targets the tween is updating.  delay: The time the tween will wait before it first starts  duration: The duration of the tween  ease: The ease function used by the tween  easeParams: The parameters to go with the ease function (if any)  hold: The time the tween will pause before running a yoyo  repeat: The number of times the tween will repeat itself (a value of 1 means the tween will play twice, as it repeated once)  repeatDelay: The time the tween will pause for before starting a repeat. The tween holds in the start state.  yoyo: boolean - Does the tween reverse itself (yoyo) when it reaches the end?  flipX: flip X the GameObject on tween end  flipY: flip Y the GameObject on tween end  offset: Used when the Tween is part of a Timeline  completeDelay: The time the tween will wait before the onComplete event is dispatched once it has completed  loop: The time the tween will pause before starting either a yoyo or returning to the start for a repeat  loopDelay:  paused: Does the tween start in a paused state, or playing?  useFrames: Use frames or milliseconds?  props: The properties being tweened by the tween  onStart: callback which fired when tween task started  onComplete: callback which fired when tween task done  onYoyo: callback which fired when tween reversed (yoyo)  onRepeat: callback which fired when repeat started", 
            "title": "Create tween task"
        }, 
        {
            "location": "/tween/index.html#ease-equations", 
            "text": "Power0  : Linear  Power1  : Quadratic.Out  Power2  : Cubic.Out  Power3  : Quartic.Out  Power4  : Quintic.Out  Linear  Quad  : Quadratic.Out  Cubic  : Cubic.Out  Quart  : Quartic.Out  Quint  : Quintic.Out  Sine  : Sine.Out  Expo  : Expo.Out  Circ  : Circular.Out  Elastic  : Elastic.Out  Back  : Back.Out  Bounce  : Bounce.Out  Stepped  Quad.easeIn  Cubic.easeIn  Quart.easeIn  Quint.easeIn  Sine.easeIn  Expo.easeIn  Circ.easeIn  Back.easeIn  Bounce.easeIn  Quad.easeOut  Cubic.easeOut  Quart.easeOut  Quint.easeOut  Sine.easeOut  Expo.easeOut  Circ.easeOut  Back.easeOut  Bounce.easeOut  Quad.easeInOut  Cubic.easeInOut  Quart.easeInOut  Quint.easeInOut  Sine.easeInOut  Expo.easeInOut  Circ.easeInOut  Back.easeInOut  Bounce.easeInOut", 
            "title": "Ease equations"
        }, 
        {
            "location": "/tween/index.html#pause-resume-task", 
            "text": "tween . pause ();   tween . resume ();   var   isPlaying   =   tween . isPlaying ();  var   isPaused   =   tween . isPaused ();", 
            "title": "Pause / Resume task"
        }, 
        {
            "location": "/tween/index.html#stop-task", 
            "text": "tween . stop ();", 
            "title": "Stop task"
        }, 
        {
            "location": "/tween/index.html#play-task", 
            "text": "tween . play ();", 
            "title": "Play task"
        }, 
        {
            "location": "/tween/index.html#restart-task", 
            "text": "tween . restart ();", 
            "title": "Restart task"
        }, 
        {
            "location": "/tween/index.html#time-scale", 
            "text": "tween . setTimeScale ( v );  // tween.timeScale = timescale;   var   timeScale   =   tween . getTimeScale ();  // var timeScale = tween.timeScale;", 
            "title": "Time-scale"
        }, 
        {
            "location": "/tween/index.html#global-time-scale", 
            "text": "var   timeScale   =   scene . tweens . timeScale ;   scene . tweens . timeScale   =   timescale ;", 
            "title": "Global time-scale"
        }, 
        {
            "location": "/tween/index.html#tween-value", 
            "text": "var   tween   =   scene . tweens . addCounter ({ \n     // from: 0, \n     // to: 1, \n     // delay: 0, \n     // duration: 1000, \n     // easeParams: null, \n     // ease:  Power0 , \n     // hold: 0, \n     // repeat: 0, \n     // repeatDelay: 0, \n     // yoyo: false, \n\n     // offset: null, \n     // completeDelay: 0, \n     // loop: 0, \n     // loopDelay: 0, \n     // paused: false, \n     // useFrames: false, \n\n     // callbackScope: timeline, \n\n     // onStart: function () {}, \n     // onStartScope: callbackScope, \n\n     // onUpdate: function () {}, \n     // onUpdateScope: callbackScope, \n\n     // onComplete: function () {}, \n     // onCompleteScope: callbackScope, \n\n     // onYoyo: function () {}, \n     // onYoyoScope: callbackScope, \n\n     // onRepeat: function () {}, \n     // onRepeatScope: callbackScope  });", 
            "title": "Tween value"
        }, 
        {
            "location": "/tween/index.html#custom-ease-function", 
            "text": "var   tween   =   scene . tweens . add ({ \n     targets :   gameobject , \n     // ... \n     ease :   function   ( t )   {    // t: 0~1 \n         return   value ;       // value: 0~1 \n     }, \n     // ...  });", 
            "title": "Custom ease function"
        }, 
        {
            "location": "/fadeoutdestroy/index.html", 
            "text": "Introduction\n\n\nFade out game object then destroy it.\n\n\n\n\nAuthor: Rex\n\n\nMethod only\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nfadeOutDestroy\n(\ngameobject\n,\n \nduration\n);", 
            "title": "Fade out destroy"
        }, 
        {
            "location": "/fadeoutdestroy/index.html#introduction", 
            "text": "Fade out game object then destroy it.   Author: Rex  Method only", 
            "title": "Introduction"
        }, 
        {
            "location": "/fadeoutdestroy/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/fadeoutdestroy/index.html#usage", 
            "text": "Sample code  fadeOutDestroy ( gameobject ,   duration );", 
            "title": "Usage"
        }, 
        {
            "location": "/arcade/index.html", 
            "text": "Introduction\n\n\nArcade physics engine in phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nConfiguration\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nphysics\n:\n \n{\n\n        \ndefault\n:\n \narcade\n,\n\n        \narcade\n:\n \n{\n\n        \n//    x: 0,\n\n        \n//    y: 0,\n\n        \n//    width: scene.sys.game.config.width,\n\n        \n//    height: scene.sys.game.config.height,\n\n        \n//    gravity: {\n\n        \n//        x: 0,\n\n        \n//        y: 0\n\n        \n//    },\n\n        \n//    checkCollision: {\n\n        \n//        up: true,\n\n        \n//        down: true,\n\n        \n//        left: true,\n\n        \n//        right: true\n\n        \n//    },\n\n        \n//    overlapBias: 4,\n\n        \n//    tileBias: 16,\n\n        \n//    forceX: false,\n\n        \n//    isPaused: false,\n\n        \n//    debug: false,\n\n        \n//    debugShowBody: true,\n\n        \n//    debugShowStaticBody: true,\n\n        \n//    debugShowVelocity: true,\n\n        \n//    debugBodyColor: 0xff00ff,\n\n        \n//    debugStaticBodyColor: 0x0000ff,\n\n        \n//    debugVelocityColor: 0x00ff00,\n\n        \n//    maxEntries: 16\n\n        \n}\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nPause / Resume\n\n\nscene\n.\nphysics\n.\npause\n();\n\n\n\n\n\nscene\n.\nphysics\n.\nresume\n();\n\n\n\n\n\nAdd physics object\n\n\nImage object\n\n\nStatic object\n\n\nvar\n \nimage\n \n=\n \nscene\n.\nphysics\n.\nadd\n.\nstaticImage\n(\nx\n,\n \ny\n,\n \nkey\n);\n\n\n\n\n\nDynamic object\n\n\nvar\n \nimage\n \n=\n \nscene\n.\nphysics\n.\nadd\n.\nimage\n(\nx\n,\n \ny\n,\n \nkey\n);\n\n\n\n\n\nSprite object\n\n\nStatic object\n\n\nvar\n \nimage\n \n=\n \nscene\n.\nphysics\n.\nadd\n.\nstaticSprite\n(\nx\n,\n \ny\n,\n \nkey\n,\n \nframe\n);\n\n\n\n\n\nDynamic object\n\n\nvar\n \nimage\n \n=\n \nscene\n.\nphysics\n.\nadd\n.\nsprite\n(\nx\n,\n \ny\n,\n \nkey\n,\n \nframe\n);\n\n\n\n\n\nGroup\n\n\nStatic sprite objects\n\n\nvar\n \ngroup\n \n=\n \nscene\n.\nphysics\n.\nadd\n.\nstaticGroup\n(\nchildren\n,\n \nconfig\n);\n\n\n// var group = scene.physics.add.staticGroup(config);\n\n\n\n\n\nDynamic sprite objects\n\n\nvar\n \ngroup\n \n=\n \nscene\n.\nphysics\n.\nadd\n.\ngroup\n(\nchildren\n,\n \nconfig\n);\n\n\n// var group = scene.physics.add.staticGroup(config);\n\n\n\n\n\nConfiugration\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \nsetCollideWorldBounds\n:\n \nfalse\n,\n\n    \nsetAccelerationX\n:\n \n0\n,\n\n    \nsetAccelerationY\n:\n \n0\n,\n\n    \nallowDrag\n:\n \ntrue\n,\n\n    \nallowGravity\n:\n \ntrue\n,\n\n    \nallowRotation\n:\n \ntrue\n\n    \nsetBounceX\n:\n \n0\n,\n\n    \nsetBounceY\n:\n \n0\n,\n\n    \nsetDragX\n:\n \n0\n,\n\n    \nsetDragY\n:\n \n0\n,\n\n    \nsetGravityX\n:\n \n0\n,\n\n    \nsetGravityY\n:\n \n0\n,\n\n    \nsetFrictionX\n:\n \n0\n,\n\n    \nsetFrictionY\n:\n \n0\n,\n\n    \nsetVelocityX\n:\n \n0\n,\n\n    \nsetVelocityY\n:\n \n0\n,\n\n    \nsetAngularVelocity\n:\n \n0\n,\n\n    \nsetAngularAcceleration\n:\n \n0\n,\n\n    \nsetAngularDrag\n:\n \n0\n,\n\n    \nsetMass\n:\n \n1\n,\n\n    \nsetImmovable\n:\n \nfalse\n\n\n};\n\n\n\n\n\nDestroy object\n\n\ngameobject\n.\ndestroy\n();\n\n\n\n\n\nCollision\n\n\nvar\n \ncollider\n \n=\n \nscene\n.\nphysics\n.\nadd\n.\ncollider\n(\nobjectsA\n,\n \nobjectsB\n,\n \ncollideCallback\n,\n \nprocessCallback\n,\n \ncallbackContext\n);\n\n\n// var collider = scene.physics.add.addOverlap(objectsA, objectsB, collideCallback, processCallback, callbackContext);\n\n\n\n\n\n\n\nobjectsA, objectsB\n\n\na game object\n\n\ngame objects in array\n\n\ngroup\n\n\n\n\n\n\ncollideCallback:\n    \nfunction\n(\ngameobject1\n,\n \ngameobject2\n){}\n\n\n\n\nprocessCallback: fired when gameobject1 intersects gameobject2\n    \nfunction\n(\ngameobject1\n,\n \ngameobject2\n){\n\n    \nreturn\n \ntrue\n;\n  \n// return false will discard remaining collision checking\n\n\n}\n\n\n\n\n\n\nMethods of game object\n\n\nSize\n\n\ngameobject\n.\nsetSize\n(\nwidth\n,\n \nheight\n,\n \nisCenter\n);\n  \n// isCenter: boolean\n\n\n\n\n\ngameobject\n.\nsetCircle\n(\nradius\n,\n \noffsetX\n,\n \noffsetY\n);\n\n\n\n\n\ngameobject\n.\nsetOffset\n(\nx\n,\n \ny\n);\n\n\n\n\n\nSync body\n\n\nSyncs the Bodies position and size in static game object.\n\n\ngameobject\n.\nrefreshBody\n();\n\n\n\n\n\nVelocity\n\n\ngameobject\n.\nsetVelocity\n(\nx\n,\n \ny\n);\n\n\n\n\n\ngameobject\n.\nsetVelocityX\n(\nx\n);\n\n\n\n\n\ngameobject\n.\nsetVelocityY\n(\nx\n);\n\n\n\n\n\ngameobject\n.\nsetMaxVelocity\n(\ny\n);\n\n\n\n\n\nRotation\n\n\nbody\n.\nsetAllowRotation\n(\nvalue\n);\n  \n// true to allow rotation on this body (default:true)\n\n\n\n\n\nMass\n\n\ngameobject\n.\nsetMass\n(\nv\n);\n\n\n\n\n\nAcceleration\n\n\ngameobject\n.\nsetAcceleration\n(\nx\n,\n \ny\n);\n\n\n\n\n\ngameobject\n.\nsetAccelerationX\n(\nx\n);\n\n\n\n\n\ngameobject\n.\nsetAccelerationY\n(\ny\n);\n\n\n\n\n\nGravity\n\n\ngameobject\n.\nsetGravity\n(\nx\n,\n \ny\n);\n\n\n\n\n\ngameobject\n.\nsetGravityX\n(\nx\n);\n\n\n\n\n\ngameobject\n.\nsetGravityY\n(\ny\n);\n\n\n\n\n\nFriction\n\n\ngameobject\n.\nsetFriction\n(\nx\n,\n \ny\n);\n\n\n\n\n\ngameobject\n.\nsetFrictionX\n(\nx\n);\n\n\n\n\n\ngameobject\n.\nsetFrictionY\n(\ny\n);\n\n\n\n\n\nDrag\n\n\ngameobject\n.\nsetDrag\n(\nx\n,\n \ny\n);\n\n\n\n\n\ngameobject\n.\nsetDragX\n(\nx\n);\n\n\n\n\n\ngameobject\n.\nsetDragY\n(\ny\n);\n\n\n\n\n\nbody\n.\nsetAllowDrag\n(\nvalue\n);\n  \n// true to allow drag on this body (default:true)\n\n\n\n\n\nAngular\n\n\ngameobject\n.\nsetAngularVelocity\n(\nv\n);\n\n\n\n\n\ngameobject\n.\nsetAngularAcceleration\n(\nv\n);\n\n\n\n\n\ngameobject\n.\nsetAngularDrag\n(\nv\n);\n\n\n\n\n\nBounce\n\n\ngameobject\n.\nsetBounce\n(\nx\n,\n \ny\n);\n\n\n\n\n\ngameobject\n.\nsetBounceX\n(\nx\n);\n\n\n\n\n\ngameobject\n.\nsetBounceY\n(\ny\n);\n\n\n\n\n\ngameobject\n.\nsetCollideWorldBounds\n(\nboolean\n);\n\n\n\n\n\nImmovable\n\n\ngameobject\n.\nsetImmovable\n(\nboolean\n);\n\n\n\n\n\nMethods of group\n\n\ngroup\n.\nsetVelocity\n(\nx\n,\n \ny\n,\n \nstep\n);\n\n\n\n\n\ngroup\n.\nsetVelocityX\n(\nvalue\n,\n \nstep\n);\n\n\n\n\n\ngroup\n.\nsetVelocityY\n(\nvalue\n,\n \nstep\n);\n\n\n\n\n\ngroup\n.\nrefresh\n();\n  \n// call this method when position of game objects were changed in static object group\n\n\n\n\n\nAdd a game object to physics world\n\n\nscene\n.\nphysics\n.\nexisting\n(\ngameObject\n,\n \nisStatic\n);\n\n\n// var body = gameObject.body;\n\n\n\n\n\nGet physics body\n\n\nvar\n \nbody\n \n=\n \ngameObject\n.\nbody\n;\n\n\n\n\n\nSize\n\n\nbody\n.\nsetSize\n(\nwidth\n,\n \nheight\n,\n \ncenter\n);\n\n\n\n\n\nbody\n.\nsetCircle\n(\nradius\n,\n \noffsetX\n,\n \noffsetY\n);\n\n\n\n\n\nbody\n.\nsetOffset\n(\nx\n,\n \ny\n);\n\n\n\n\n\nReset position\n\n\nbody\n.\nreset\n(\nx\n,\n \ny\n);\n\n\n\n\n\nVelocity\n\n\nbody\n.\nvelocity\n.\nset\n(\nx\n,\n \ny\n);\n\n\n\n\n\nbody\n.\nvelocity\n.\nx\n \n=\n \nx\n;\n\n\n\n\n\nbody\n.\nvelocity\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\nbody\n.\nmaxVelocity\n.\nset\n(\nx\n,\n \ny\n);\n\n\n\n\n\nMass\n\n\nbody\n.\nmass\n \n=\n \nv\n;\n\n\n\n\n\nAcceleration\n\n\nbody\n.\nacceleration\n.\nset\n(\nx\n,\n \ny\n);\n\n\n\n\n\nbody\n.\nacceleration\n.\nx\n \n=\n \nx\n;\n\n\n\n\n\nbody\n.\nacceleration\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\nGravity\n\n\nbody\n.\ngravity\n.\nset\n(\nx\n,\n \ny\n);\n\n\n\n\n\nbody\n.\ngravity\n.\nx\n \n=\n \nx\n;\n\n\n\n\n\nbody\n.\ngravity\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\nbody\n.\nsetAllowGravity\n(\nvalue\n);\n  \n// true to allow gravity on this body (default:true)\n\n\n\n\n\nFriction\n\n\nbody\n.\nfriction\n.\nset\n(\nx\n,\n \ny\n);\n\n\n\n\n\nbody\n.\nfriction\n.\nx\n \n=\n \nx\n;\n\n\n\n\n\nbody\n.\nfriction\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\nDrag\n\n\nbody\n.\ndrag\n.\nset\n(\nx\n,\n \ny\n);\n\n\n\n\n\nbody\n.\ndrag\n.\nx\n \n=\n \nx\n;\n\n\n\n\n\nbody\n.\ndrag\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\nAngular\n\n\nbody\n.\nangularVelocity\n \n=\n \nv\n;\n\n\n\n\n\nbody\n.\nangularAcceleration\n \n=\n \nv\n;\n\n\n\n\n\nbody\n.\nangularDrag\n \n=\n \nv\n;\n\n\n\n\n\nBounce\n\n\nbody\n.\nbounce\n.\nset\n(\nx\n,\n \ny\n);\n\n\n\n\n\nbody\n.\nbounce\n.\nx\n \n=\n \nx\n;\n\n\n\n\n\nbody\n.\nbounce\n.\ny\n \n=\n \ny\n;\n\n\n\n\n\nbody\n.\ncollideWorldBounds\n \n=\n \nboolean\n;\n\n\n\n\n\nImmovable\n\n\nbody\n.\nimmovable\n \n=\n \nboolean\n;\n\n\n\n\n\nMethods of World\n\n\nWrap\n\n\nscene\n.\nphysics\n.\nworld\n.\nwrap\n(\ngameobject\n,\n \npadding\n);\n\n\n\n\n\n\n\ngameobject:\n\n\ngame object (image, sprite)\n\n\ngroup\n\n\narray of game objects", 
            "title": "Physics"
        }, 
        {
            "location": "/arcade/index.html#introduction", 
            "text": "Arcade physics engine in phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/arcade/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/arcade/index.html#configuration", 
            "text": "var   config   =   { \n     // ... \n     physics :   { \n         default :   arcade , \n         arcade :   { \n         //    x: 0, \n         //    y: 0, \n         //    width: scene.sys.game.config.width, \n         //    height: scene.sys.game.config.height, \n         //    gravity: { \n         //        x: 0, \n         //        y: 0 \n         //    }, \n         //    checkCollision: { \n         //        up: true, \n         //        down: true, \n         //        left: true, \n         //        right: true \n         //    }, \n         //    overlapBias: 4, \n         //    tileBias: 16, \n         //    forceX: false, \n         //    isPaused: false, \n         //    debug: false, \n         //    debugShowBody: true, \n         //    debugShowStaticBody: true, \n         //    debugShowVelocity: true, \n         //    debugBodyColor: 0xff00ff, \n         //    debugStaticBodyColor: 0x0000ff, \n         //    debugVelocityColor: 0x00ff00, \n         //    maxEntries: 16 \n         } \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Configuration"
        }, 
        {
            "location": "/arcade/index.html#pause-resume", 
            "text": "scene . physics . pause ();   scene . physics . resume ();", 
            "title": "Pause / Resume"
        }, 
        {
            "location": "/arcade/index.html#add-physics-object", 
            "text": "", 
            "title": "Add physics object"
        }, 
        {
            "location": "/arcade/index.html#image-object", 
            "text": "Static object  var   image   =   scene . physics . add . staticImage ( x ,   y ,   key );   Dynamic object  var   image   =   scene . physics . add . image ( x ,   y ,   key );", 
            "title": "Image object"
        }, 
        {
            "location": "/arcade/index.html#sprite-object", 
            "text": "Static object  var   image   =   scene . physics . add . staticSprite ( x ,   y ,   key ,   frame );   Dynamic object  var   image   =   scene . physics . add . sprite ( x ,   y ,   key ,   frame );", 
            "title": "Sprite object"
        }, 
        {
            "location": "/arcade/index.html#group", 
            "text": "Static sprite objects  var   group   =   scene . physics . add . staticGroup ( children ,   config );  // var group = scene.physics.add.staticGroup(config);   Dynamic sprite objects  var   group   =   scene . physics . add . group ( children ,   config );  // var group = scene.physics.add.staticGroup(config);   Confiugration  var   config   =   { \n     setCollideWorldBounds :   false , \n     setAccelerationX :   0 , \n     setAccelerationY :   0 , \n     allowDrag :   true , \n     allowGravity :   true , \n     allowRotation :   true \n     setBounceX :   0 , \n     setBounceY :   0 , \n     setDragX :   0 , \n     setDragY :   0 , \n     setGravityX :   0 , \n     setGravityY :   0 , \n     setFrictionX :   0 , \n     setFrictionY :   0 , \n     setVelocityX :   0 , \n     setVelocityY :   0 , \n     setAngularVelocity :   0 , \n     setAngularAcceleration :   0 , \n     setAngularDrag :   0 , \n     setMass :   1 , \n     setImmovable :   false  };", 
            "title": "Group"
        }, 
        {
            "location": "/arcade/index.html#destroy-object", 
            "text": "gameobject . destroy ();", 
            "title": "Destroy object"
        }, 
        {
            "location": "/arcade/index.html#collision", 
            "text": "var   collider   =   scene . physics . add . collider ( objectsA ,   objectsB ,   collideCallback ,   processCallback ,   callbackContext );  // var collider = scene.physics.add.addOverlap(objectsA, objectsB, collideCallback, processCallback, callbackContext);    objectsA, objectsB  a game object  game objects in array  group    collideCallback:\n     function ( gameobject1 ,   gameobject2 ){}   processCallback: fired when gameobject1 intersects gameobject2\n     function ( gameobject1 ,   gameobject2 ){ \n     return   true ;    // return false will discard remaining collision checking  }", 
            "title": "Collision"
        }, 
        {
            "location": "/arcade/index.html#methods-of-game-object", 
            "text": "", 
            "title": "Methods of game object"
        }, 
        {
            "location": "/arcade/index.html#size", 
            "text": "gameobject . setSize ( width ,   height ,   isCenter );    // isCenter: boolean   gameobject . setCircle ( radius ,   offsetX ,   offsetY );   gameobject . setOffset ( x ,   y );", 
            "title": "Size"
        }, 
        {
            "location": "/arcade/index.html#sync-body", 
            "text": "Syncs the Bodies position and size in static game object.  gameobject . refreshBody ();", 
            "title": "Sync body"
        }, 
        {
            "location": "/arcade/index.html#velocity", 
            "text": "gameobject . setVelocity ( x ,   y );   gameobject . setVelocityX ( x );   gameobject . setVelocityY ( x );   gameobject . setMaxVelocity ( y );", 
            "title": "Velocity"
        }, 
        {
            "location": "/arcade/index.html#rotation", 
            "text": "body . setAllowRotation ( value );    // true to allow rotation on this body (default:true)", 
            "title": "Rotation"
        }, 
        {
            "location": "/arcade/index.html#mass", 
            "text": "gameobject . setMass ( v );", 
            "title": "Mass"
        }, 
        {
            "location": "/arcade/index.html#acceleration", 
            "text": "gameobject . setAcceleration ( x ,   y );   gameobject . setAccelerationX ( x );   gameobject . setAccelerationY ( y );", 
            "title": "Acceleration"
        }, 
        {
            "location": "/arcade/index.html#gravity", 
            "text": "gameobject . setGravity ( x ,   y );   gameobject . setGravityX ( x );   gameobject . setGravityY ( y );", 
            "title": "Gravity"
        }, 
        {
            "location": "/arcade/index.html#friction", 
            "text": "gameobject . setFriction ( x ,   y );   gameobject . setFrictionX ( x );   gameobject . setFrictionY ( y );", 
            "title": "Friction"
        }, 
        {
            "location": "/arcade/index.html#drag", 
            "text": "gameobject . setDrag ( x ,   y );   gameobject . setDragX ( x );   gameobject . setDragY ( y );   body . setAllowDrag ( value );    // true to allow drag on this body (default:true)", 
            "title": "Drag"
        }, 
        {
            "location": "/arcade/index.html#angular", 
            "text": "gameobject . setAngularVelocity ( v );   gameobject . setAngularAcceleration ( v );   gameobject . setAngularDrag ( v );", 
            "title": "Angular"
        }, 
        {
            "location": "/arcade/index.html#bounce", 
            "text": "gameobject . setBounce ( x ,   y );   gameobject . setBounceX ( x );   gameobject . setBounceY ( y );   gameobject . setCollideWorldBounds ( boolean );", 
            "title": "Bounce"
        }, 
        {
            "location": "/arcade/index.html#immovable", 
            "text": "gameobject . setImmovable ( boolean );", 
            "title": "Immovable"
        }, 
        {
            "location": "/arcade/index.html#methods-of-group", 
            "text": "group . setVelocity ( x ,   y ,   step );   group . setVelocityX ( value ,   step );   group . setVelocityY ( value ,   step );   group . refresh ();    // call this method when position of game objects were changed in static object group", 
            "title": "Methods of group"
        }, 
        {
            "location": "/arcade/index.html#add-a-game-object-to-physics-world", 
            "text": "scene . physics . existing ( gameObject ,   isStatic );  // var body = gameObject.body;", 
            "title": "Add a game object to physics world"
        }, 
        {
            "location": "/arcade/index.html#get-physics-body", 
            "text": "var   body   =   gameObject . body ;", 
            "title": "Get physics body"
        }, 
        {
            "location": "/arcade/index.html#size_1", 
            "text": "body . setSize ( width ,   height ,   center );   body . setCircle ( radius ,   offsetX ,   offsetY );   body . setOffset ( x ,   y );", 
            "title": "Size"
        }, 
        {
            "location": "/arcade/index.html#reset-position", 
            "text": "body . reset ( x ,   y );", 
            "title": "Reset position"
        }, 
        {
            "location": "/arcade/index.html#velocity_1", 
            "text": "body . velocity . set ( x ,   y );   body . velocity . x   =   x ;   body . velocity . y   =   y ;   body . maxVelocity . set ( x ,   y );", 
            "title": "Velocity"
        }, 
        {
            "location": "/arcade/index.html#mass_1", 
            "text": "body . mass   =   v ;", 
            "title": "Mass"
        }, 
        {
            "location": "/arcade/index.html#acceleration_1", 
            "text": "body . acceleration . set ( x ,   y );   body . acceleration . x   =   x ;   body . acceleration . y   =   y ;", 
            "title": "Acceleration"
        }, 
        {
            "location": "/arcade/index.html#gravity_1", 
            "text": "body . gravity . set ( x ,   y );   body . gravity . x   =   x ;   body . gravity . y   =   y ;   body . setAllowGravity ( value );    // true to allow gravity on this body (default:true)", 
            "title": "Gravity"
        }, 
        {
            "location": "/arcade/index.html#friction_1", 
            "text": "body . friction . set ( x ,   y );   body . friction . x   =   x ;   body . friction . y   =   y ;", 
            "title": "Friction"
        }, 
        {
            "location": "/arcade/index.html#drag_1", 
            "text": "body . drag . set ( x ,   y );   body . drag . x   =   x ;   body . drag . y   =   y ;", 
            "title": "Drag"
        }, 
        {
            "location": "/arcade/index.html#angular_1", 
            "text": "body . angularVelocity   =   v ;   body . angularAcceleration   =   v ;   body . angularDrag   =   v ;", 
            "title": "Angular"
        }, 
        {
            "location": "/arcade/index.html#bounce_1", 
            "text": "body . bounce . set ( x ,   y );   body . bounce . x   =   x ;   body . bounce . y   =   y ;   body . collideWorldBounds   =   boolean ;", 
            "title": "Bounce"
        }, 
        {
            "location": "/arcade/index.html#immovable_1", 
            "text": "body . immovable   =   boolean ;", 
            "title": "Immovable"
        }, 
        {
            "location": "/arcade/index.html#methods-of-world", 
            "text": "", 
            "title": "Methods of World"
        }, 
        {
            "location": "/arcade/index.html#wrap", 
            "text": "scene . physics . world . wrap ( gameobject ,   padding );    gameobject:  game object (image, sprite)  group  array of game objects", 
            "title": "Wrap"
        }, 
        {
            "location": "/audio/index.html", 
            "text": "Introduction\n\n\nPlay sounds, built-in object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nConfiguration\n\n\nWeb audio\n\n\nWeb audio is the default audio context.\n\n\nHtml5 audio\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ....\n\n    \naudio\n:\n \n{\n\n        \ndisableWebAudio\n:\n \ntrue\n\n    \n}\n\n    \n// ....\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nNo audio\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ....\n\n    \naudio\n:\n \n{\n\n        \nnoAudio\n:\n \ntrue\n\n    \n}\n\n    \n// ....\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nLoad audio file\n\n\nscene\n.\nload\n.\naudio\n(\nkey\n,\n \nurls\n);\n  \n// urls: an array of file url\n\n\n\n\n\nSee \nloader\n\n\nPlay sound\n\n\nSound instance will be destroyed when playback ends.\n\n\nscene\n.\nsound\n.\nplay\n(\nkey\n);\n\n\n\n\n\nSound instance\n\n\nCreate sound instance\n\n\nvar\n \nmusic\n \n=\n \nthis\n.\nsound\n.\nadd\n(\nkey\n);\n\n\n\n\n\nvar\n \nmusic\n \n=\n \nthis\n.\nsound\n.\nadd\n(\nkey\n,\n \nconfig\n);\n\n\n\n\n\nConfiguration\n\n\n{\n\n    \nmute\n:\n \nfalse\n,\n\n    \nvolume\n:\n \n1\n,\n\n    \nrate\n:\n \n1\n,\n\n    \ndetune\n:\n \n0\n,\n\n    \nseek\n:\n \n0\n,\n\n    \nloop\n:\n \nfalse\n,\n\n    \ndelay\n:\n \n0\n\n\n}\n\n\n\n\n\nPlay sound instance\n\n\n\n\nStart playing\n    \nmusic\n.\nplay\n();\n\n\n\n\nStart playing with configuration\n    \nmusic\n.\nplay\n(\nconfig\n);\n\n\n\n\nconfig\n\n\n\n\n\n\nStop\n    \nmusic\n.\nstop\n();\n\n\n\n\nPause\n    \nmusic\n.\npause\n();\n\n\n\n\nResume\n    \nmusic\n.\nresume\n();\n\n\n\n\n\n\nMethods\n\n\nMute\n\n\n\n\nSet mute\n    \nmusic\n.\nsetMute\n(\nmute\n);\n \n// mute: true/false\n\n\n// music.mute = mute;\n\n\n\n\nGet mute\n    \nvar\n \nmute\n \n=\n \nmusic\n.\nmute\n;\n\n\n\n\n\n\nVolume\n\n\n\n\nSet volume\n    \nmusic\n.\nsetVolume\n(\nvolume\n);\n \n// volume: 0 to 1\n\n\n// music.volume = volume;\n\n\n\n\nGet volume\n    \nvar\n \nvolume\n \n=\n \nmusic\n.\nvolume\n;\n\n\n\n\n\n\nDetune\n\n\n\n\nSet detune\n    \nmusic\n.\nsetDetune\n(\ndetune\n);\n \n// detune: -1200 to 1200\n\n\n// music.detune = detune;\n\n\n\n\nGet detune\n    \nvar\n \ndetune\n \n=\n \nmusic\n.\ndetune\n;\n\n\n\n\n\n\nPlay-rate\n\n\n\n\nSet play-rate\n    \nmusic\n.\nsetRate\n(\nrate\n);\n \n// rate: 1.0(normal speed), 0.5(half speed), 2.0(double speed)\n\n\n// music.rate = rate;\n\n\n\n\nGet play-rate\n    \nvar\n \nrate\n \n=\n \nmusic\n.\nrate\n;\n\n\n\n\n\n\nSeek to\n\n\n\n\nSeek to\n    \nmusic\n.\nsetSeek\n(\ntime\n);\n \n// seek: playback time\n\n\n// music.seek = seek;\n\n\n\n\nGet current playback time\n    \nvar\n \ntime\n \n=\n \nmusic\n.\nseek\n;\n  \n// return 0 when playback ends\n\n\n\n\n\n\nLoop\n\n\n\n\nSet loop\n    \nmusic\n.\nsetLoop\n(\nloop\n);\n \n// loop: true/false\n\n\n// music.loop = loop;\n\n\n\n\nGet loop\n    \nvar\n \nloop\n \n=\n \nmusic\n.\nloop\n;\n\n\n\n\n\n\nProperties\n\n\n\n\nDuration : duration of this sound\n    \nvar\n \nduratuin\n \n=\n \nmusic\n.\nduration\n;\n\n\n\n\nIs playing\n    \nvar\n \nisPlaying\n \n=\n \nmusic\n.\nisPlaying\n;\n\n\n\n\nIs paused\n    \nvar\n \nisPaused\n \n=\n \nmusic\n.\nisPaused\n;\n\n\n\n\n\n\nEvents\n\n\n\n\nStart playing\n    \nmusic\n.\nonce\n(\nplay\n,\n \nfunction\n(\nmusic\n){});\n\n\n\n\nPlayback end\n    \nmusic\n.\nonce\n(\nended\n,\n \nfunction\n(\nmusic\n){});\n\n\n\n\nLooping\n    \nmusic\n.\nonce\n(\nlooped\n,\n \nfunction\n(\nmusic\n){});\n\n\n\n\nPause\n    \nmusic\n.\nonce\n(\npause\n,\n \nfunction\n(\nmusic\n){});\n\n\n\n\nResume\n    \nmusic\n.\nonce\n(\nresume\n,\n \nfunction\n(\nmusic\n){});\n\n\n\n\nStop\n    \nmusic\n.\nonce\n(\nstop\n,\n \nfunction\n(\nmusic\n){});\n\n\n\n\nSet mute\n    \nmusic\n.\nonce\n(\nmute\n,\n \nfunction\n(\nmusic\n,\n \nmute\n){});\n\n\n\n\nSet volume\n    \nmusic\n.\nonce\n(\nvolume\n,\n \nfunction\n(\nmusic\n,\n \nvolume\n){});\n\n\n\n\nSet detune\n    \nmusic\n.\nonce\n(\ndetune\n,\n \nfunction\n(\nmusic\n,\n \ndetune\n){});\n\n\n\n\nSet play-rate\n    \nmusic\n.\nonce\n(\nrate\n,\n \nfunction\n(\nmusic\n,\n \nrate\n){});\n\n\n\n\nSeek to\n    \nmusic\n.\nonce\n(\nseek\n,\n \nfunction\n(\nmusic\n,\n \ntime\n){});\n\n\n\n\nset loop\n    \nmusic\n.\nonce\n(\nloop\n,\n \nfunction\n(\nmusic\n,\n \nloop\n){});\n\n\n\n\n\n\nPlay marked sound\n\n\nSound instance will be destroyed when playback ends.\n\n\nscene\n.\nsound\n.\nplay\n(\nkey\n,\n \nmarker\n);\n\n\n\n\n\nMarker\n\n\n{\n\n    \nname\n:\n \n,\n\n    \nstart\n:\n \n0\n,\n\n    \nduration\n:\n \nmusic\n.\nduration\n,\n\n    \nconfig\n:\n \n{\n\n        \nmute\n:\n \nfalse\n,\n\n        \nvolume\n:\n \n1\n,\n\n        \nrate\n:\n \n1\n,\n\n        \ndetune\n:\n \n0\n,\n\n        \nseek\n:\n \n0\n,\n\n        \nloop\n:\n \nfalse\n,\n\n        \ndelay\n:\n \n0\n\n    \n}\n\n\n}\n\n\n\n\n\nMarkers in sound instance\n\n\nAdd marker\n\n\nmusic\n.\naddMarker\n(\nmarker\n);\n\n\n\n\n\nMarker\n\n\nPlay marked sound\n\n\nmusic\n.\nplay\n(\nmarkerName\n);\n\n\n\n\n\nmusic\n.\nplay\n(\nmarkerName\n,\n \nconfig\n);\n\n\n\n\n\nconfig\n\n\nAudio sprite\n\n\nLoad audio sprite\n\n\nscene\n.\nload\n.\naudioSprite\n(\nkey\n,\n \nurls\n,\n \nmarkersConfig\n,\n \nconfig\n);\n\n\n\n\n\nSee \nloader\n\n\nFormat of markersConfig\n\n{\n\n    \nresources\n:\n \nurls\n,\n \n// an array of audio files\n\n    \nspritemap\n:\n \n{\n\n        \nmarkerName0\n:\n \n{\n\n            \nstart\n:\n \n0\n,\n\n            \nend\n:\n \n0\n\n        \n},\n\n        \nmarkerName1\n:\n \n{\n\n            \nstart\n:\n \n0\n,\n\n            \nend\n:\n \n0\n\n        \n}\n\n        \n// ...\n\n    \n}\n\n\n}\n\n\n\n\nPlay sound\n\n\nCreate a sound instance then play the marked section, this sound instance will be destroyed when playback ends.\n\n\nscene\n.\nsound\n.\nplayAudioSprite\n(\nkey\n,\n \nmarkerName\n,\n \nconfig\n);\n\n\n\n\n\nconfig\n\n\nSound instance\n\n\nCreate a sound instance with markers.\n\n\nvar\n \nmusic\n \n=\n \nscene\n.\nsound\n.\naddAudioSprite\n(\nkey\n,\n \nconfig\n);\n\n\n\n\n\nconfig\n\n\nPlay sound instance\n\n\nmusic\n.\nplay\n(\nmarkerName\n);\n\n\n\n\n\nmusic\n.\nplay\n(\nmarkerName\n,\n \nconfig\n);\n\n\n\n\n\nconfig\n\n\nSound manager\n\n\nMethods\n\n\nMute\n\n\n\n\nSet mute\n    \nscene\n.\nsound\n.\nsetMute\n(\nmute\n);\n \n// mute: true/false\n\n\n// scene.sound.mute = mute;\n\n\n\n\nGet mute\n    \nvar\n \nmute\n \n=\n \nscene\n.\nsound\n.\nmute\n;\n\n\n\n\n\n\nVolume\n\n\n\n\nSet volume\n    \nscene\n.\nsound\n.\nsetVolume\n(\nvolume\n);\n \n// volume: 0 to 1\n\n\n// scene.sound.volume = volume;\n\n\n\n\nGet volume\n    \nvar\n \nvolume\n \n=\n \nscene\n.\nsound\n.\nvolume\n;\n\n\n\n\n\n\nDetune\n\n\n\n\nSet detune\n    \nscene\n.\nsound\n.\nsetDetune\n(\ndetune\n);\n \n// detune: -1200 to 1200\n\n\n// scene.sound.detune = detune;\n\n\n\n\nGet detune\n    \nvar\n \ndetune\n \n=\n \nscene\n.\nsound\n.\ndetune\n;\n\n\n\n\n\n\nPlay-rate\n\n\n\n\nSet play-rate\n    \nscene\n.\nsound\n.\nsetRate\n(\nrate\n);\n \n// rate: 1.0(normal speed), 0.5(half speed), 2.0(double speed)\n\n\n// scene.sound.rate = rate;\n\n\n\n\nGet play-rate\n    \nvar\n \nrate\n \n=\n \nscene\n.\nsound\n.\nrate\n;", 
            "title": "Audio"
        }, 
        {
            "location": "/audio/index.html#introduction", 
            "text": "Play sounds, built-in object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/audio/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/audio/index.html#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/audio/index.html#web-audio", 
            "text": "Web audio is the default audio context.", 
            "title": "Web audio"
        }, 
        {
            "location": "/audio/index.html#html5-audio", 
            "text": "var   config   =   { \n     // .... \n     audio :   { \n         disableWebAudio :   true \n     } \n     // ....  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Html5 audio"
        }, 
        {
            "location": "/audio/index.html#no-audio", 
            "text": "var   config   =   { \n     // .... \n     audio :   { \n         noAudio :   true \n     } \n     // ....  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "No audio"
        }, 
        {
            "location": "/audio/index.html#load-audio-file", 
            "text": "scene . load . audio ( key ,   urls );    // urls: an array of file url   See  loader", 
            "title": "Load audio file"
        }, 
        {
            "location": "/audio/index.html#play-sound", 
            "text": "Sound instance will be destroyed when playback ends.  scene . sound . play ( key );", 
            "title": "Play sound"
        }, 
        {
            "location": "/audio/index.html#sound-instance", 
            "text": "", 
            "title": "Sound instance"
        }, 
        {
            "location": "/audio/index.html#create-sound-instance", 
            "text": "var   music   =   this . sound . add ( key );   var   music   =   this . sound . add ( key ,   config );", 
            "title": "Create sound instance"
        }, 
        {
            "location": "/audio/index.html#configuration_1", 
            "text": "{ \n     mute :   false , \n     volume :   1 , \n     rate :   1 , \n     detune :   0 , \n     seek :   0 , \n     loop :   false , \n     delay :   0  }", 
            "title": "Configuration"
        }, 
        {
            "location": "/audio/index.html#play-sound-instance", 
            "text": "Start playing\n     music . play ();   Start playing with configuration\n     music . play ( config );   config    Stop\n     music . stop ();   Pause\n     music . pause ();   Resume\n     music . resume ();", 
            "title": "Play sound instance"
        }, 
        {
            "location": "/audio/index.html#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/audio/index.html#mute", 
            "text": "Set mute\n     music . setMute ( mute );   // mute: true/false  // music.mute = mute;   Get mute\n     var   mute   =   music . mute ;", 
            "title": "Mute"
        }, 
        {
            "location": "/audio/index.html#volume", 
            "text": "Set volume\n     music . setVolume ( volume );   // volume: 0 to 1  // music.volume = volume;   Get volume\n     var   volume   =   music . volume ;", 
            "title": "Volume"
        }, 
        {
            "location": "/audio/index.html#detune", 
            "text": "Set detune\n     music . setDetune ( detune );   // detune: -1200 to 1200  // music.detune = detune;   Get detune\n     var   detune   =   music . detune ;", 
            "title": "Detune"
        }, 
        {
            "location": "/audio/index.html#play-rate", 
            "text": "Set play-rate\n     music . setRate ( rate );   // rate: 1.0(normal speed), 0.5(half speed), 2.0(double speed)  // music.rate = rate;   Get play-rate\n     var   rate   =   music . rate ;", 
            "title": "Play-rate"
        }, 
        {
            "location": "/audio/index.html#seek-to", 
            "text": "Seek to\n     music . setSeek ( time );   // seek: playback time  // music.seek = seek;   Get current playback time\n     var   time   =   music . seek ;    // return 0 when playback ends", 
            "title": "Seek to"
        }, 
        {
            "location": "/audio/index.html#loop", 
            "text": "Set loop\n     music . setLoop ( loop );   // loop: true/false  // music.loop = loop;   Get loop\n     var   loop   =   music . loop ;", 
            "title": "Loop"
        }, 
        {
            "location": "/audio/index.html#properties", 
            "text": "Duration : duration of this sound\n     var   duratuin   =   music . duration ;   Is playing\n     var   isPlaying   =   music . isPlaying ;   Is paused\n     var   isPaused   =   music . isPaused ;", 
            "title": "Properties"
        }, 
        {
            "location": "/audio/index.html#events", 
            "text": "Start playing\n     music . once ( play ,   function ( music ){});   Playback end\n     music . once ( ended ,   function ( music ){});   Looping\n     music . once ( looped ,   function ( music ){});   Pause\n     music . once ( pause ,   function ( music ){});   Resume\n     music . once ( resume ,   function ( music ){});   Stop\n     music . once ( stop ,   function ( music ){});   Set mute\n     music . once ( mute ,   function ( music ,   mute ){});   Set volume\n     music . once ( volume ,   function ( music ,   volume ){});   Set detune\n     music . once ( detune ,   function ( music ,   detune ){});   Set play-rate\n     music . once ( rate ,   function ( music ,   rate ){});   Seek to\n     music . once ( seek ,   function ( music ,   time ){});   set loop\n     music . once ( loop ,   function ( music ,   loop ){});", 
            "title": "Events"
        }, 
        {
            "location": "/audio/index.html#play-marked-sound", 
            "text": "Sound instance will be destroyed when playback ends.  scene . sound . play ( key ,   marker );", 
            "title": "Play marked sound"
        }, 
        {
            "location": "/audio/index.html#marker", 
            "text": "{ \n     name :   , \n     start :   0 , \n     duration :   music . duration , \n     config :   { \n         mute :   false , \n         volume :   1 , \n         rate :   1 , \n         detune :   0 , \n         seek :   0 , \n         loop :   false , \n         delay :   0 \n     }  }", 
            "title": "Marker"
        }, 
        {
            "location": "/audio/index.html#markers-in-sound-instance", 
            "text": "", 
            "title": "Markers in sound instance"
        }, 
        {
            "location": "/audio/index.html#add-marker", 
            "text": "music . addMarker ( marker );   Marker", 
            "title": "Add marker"
        }, 
        {
            "location": "/audio/index.html#play-marked-sound_1", 
            "text": "music . play ( markerName );   music . play ( markerName ,   config );   config", 
            "title": "Play marked sound"
        }, 
        {
            "location": "/audio/index.html#audio-sprite", 
            "text": "", 
            "title": "Audio sprite"
        }, 
        {
            "location": "/audio/index.html#load-audio-sprite", 
            "text": "scene . load . audioSprite ( key ,   urls ,   markersConfig ,   config );   See  loader  Format of markersConfig { \n     resources :   urls ,   // an array of audio files \n     spritemap :   { \n         markerName0 :   { \n             start :   0 , \n             end :   0 \n         }, \n         markerName1 :   { \n             start :   0 , \n             end :   0 \n         } \n         // ... \n     }  }", 
            "title": "Load audio sprite"
        }, 
        {
            "location": "/audio/index.html#play-sound_1", 
            "text": "Create a sound instance then play the marked section, this sound instance will be destroyed when playback ends.  scene . sound . playAudioSprite ( key ,   markerName ,   config );   config", 
            "title": "Play sound"
        }, 
        {
            "location": "/audio/index.html#sound-instance_1", 
            "text": "Create a sound instance with markers.  var   music   =   scene . sound . addAudioSprite ( key ,   config );   config", 
            "title": "Sound instance"
        }, 
        {
            "location": "/audio/index.html#play-sound-instance_1", 
            "text": "music . play ( markerName );   music . play ( markerName ,   config );   config", 
            "title": "Play sound instance"
        }, 
        {
            "location": "/audio/index.html#sound-manager", 
            "text": "", 
            "title": "Sound manager"
        }, 
        {
            "location": "/audio/index.html#methods_1", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/audio/index.html#mute_1", 
            "text": "Set mute\n     scene . sound . setMute ( mute );   // mute: true/false  // scene.sound.mute = mute;   Get mute\n     var   mute   =   scene . sound . mute ;", 
            "title": "Mute"
        }, 
        {
            "location": "/audio/index.html#volume_1", 
            "text": "Set volume\n     scene . sound . setVolume ( volume );   // volume: 0 to 1  // scene.sound.volume = volume;   Get volume\n     var   volume   =   scene . sound . volume ;", 
            "title": "Volume"
        }, 
        {
            "location": "/audio/index.html#detune_1", 
            "text": "Set detune\n     scene . sound . setDetune ( detune );   // detune: -1200 to 1200  // scene.sound.detune = detune;   Get detune\n     var   detune   =   scene . sound . detune ;", 
            "title": "Detune"
        }, 
        {
            "location": "/audio/index.html#play-rate_1", 
            "text": "Set play-rate\n     scene . sound . setRate ( rate );   // rate: 1.0(normal speed), 0.5(half speed), 2.0(double speed)  // scene.sound.rate = rate;   Get play-rate\n     var   rate   =   scene . sound . rate ;", 
            "title": "Play-rate"
        }, 
        {
            "location": "/fadevolume/index.html", 
            "text": "Introduction\n\n\nFade-in/fade-out volume of sound.\n\n\n\n\nAuthor: Rex\n\n\nMethod only\n\n\n\n\nSource code\n\n\n\n\nFade-in\n\n\nFade-out\n\n\n\n\nUsage\n\n\nSample code\n\n\n\n\nPlay and fade in voluem\n    \nvar\n \nsound\n \n=\n \nsoundFadeIn\n(\nscene\n,\n \nsound\n,\n \nduration\n);\n  \n// sound: sound instance, or a key of audio cache\n\n\n// var sound = soundFadeIn(scene, sound, duration, endVolume, startVolume);\n\n\n\n\nFade out volume then destroy it\n    \nsoundFadeOut\n(\nscene\n,\n \nsound\n,\n \nduration\n);\n  \n// sound: sound instance\n\n\n\n\nFade out volume then stop it\n    \nsoundFadeOut\n(\nscene\n,\n \nsound\n,\n \nduration\n,\n \nfalse\n);\n  \n// sound: sound instance", 
            "title": "Volume fading"
        }, 
        {
            "location": "/fadevolume/index.html#introduction", 
            "text": "Fade-in/fade-out volume of sound.   Author: Rex  Method only", 
            "title": "Introduction"
        }, 
        {
            "location": "/fadevolume/index.html#source-code", 
            "text": "Fade-in  Fade-out", 
            "title": "Source code"
        }, 
        {
            "location": "/fadevolume/index.html#usage", 
            "text": "Sample code   Play and fade in voluem\n     var   sound   =   soundFadeIn ( scene ,   sound ,   duration );    // sound: sound instance, or a key of audio cache  // var sound = soundFadeIn(scene, sound, duration, endVolume, startVolume);   Fade out volume then destroy it\n     soundFadeOut ( scene ,   sound ,   duration );    // sound: sound instance   Fade out volume then stop it\n     soundFadeOut ( scene ,   sound ,   duration ,   false );    // sound: sound instance", 
            "title": "Usage"
        }, 
        {
            "location": "/datamanager/index.html", 
            "text": "Introduction\n\n\nStore data in key-value pairs, built-inobject of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nSet value\n\n\nparent\n.\ndata\n.\nset\n(\nkey\n,\n \nvalue\n);\n\n\nparent\n.\ndata\n.\nmerge\n(\ndata\n);\n     \n// {}\n\n\n\n\n\nPop key\n\n\nvar\n \nvalue\n \n=\n \nparent\n.\ndata\n.\npop\n(\nkey\n);\n\n\n\n\n\nGet and remove that key.\n\n\nRemove key\n\n\nparent\n.\ndata\n.\nremove\n(\nkey\n);\n\n\n\n\n\nGet value\n\n\nvar\n \nvalue\n \n=\n \nparent\n.\ndata\n.\nget\n(\nkey\n);\n\n\nvar\n \nallValues\n \n=\n \nparent\n.\ndata\n.\ngetAll\n();\n  \n// return a copy of data\n\n\n\n\n\nQuery\n\n\nUsing \nstring.match()\n to pick matched keys.\n\n\nvar\n \nresult\n \n=\n \nparent\n.\ndata\n.\nquery\n(\nrgExp\n);\n\n\n\n\n\nFreeze\n\n\nvar\n \nisFrozen\n \n=\n \nparent\n.\ndata\n.\nfreeze\n;\n\n\nparent\n.\ndata\n.\nfreeze\n \n=\n \ntrue\n;\n\n\n\n\n\nNo changes can be written to it.\n\n\nHas key\n\n\nvar\n \nhasKey\n \n=\n \nparent\n.\ndata\n.\nhas\n(\nkey\n);\n\n\n\n\n\nFor each key\n\n\nparent\n.\ndata\n.\neach\n(\nfunction\n(\nparent\n,\n \nkey\n,\n \nvalue\n){\n\n    \n/* ... */\n\n\n},\n \nscope\n);\n\n\n\n\n\nCount of data\n\n\nvar\n \ncnt\n \n=\n \nparent\n.\ndata\n.\ncount\n;\n\n\n\n\n\nReset\n\n\nReset status and clean all keys.\n\n\nparent\n.\ndata\n.\nreset\n()\n\n\n\n\n\nEvent of changing data\n\n\nEvent 'setdata', 'changedata' will be fired when invoking \nparent.data.set(key, value)\n.\n\n\nparent\n.\ndata\n.\nevent\n.\non\n(\nsetdata\n,\n \nfunction\n(\nparent\n,\n \nkey\n,\n \nvalue\n){\n\n    \n/* ... */\n\n\n},\n \nscope\n);\n\n\n\n\n\nparent\n.\ndata\n.\nevent\n.\non\n(\nchangedata\n,\n \nfunction\n(\nparent\n,\n \nkey\n,\n \nvalue\n,\n \nresetValue\n){\n\n    \n// resetValue(newValue);  // overwrite value to newValue\n\n\n},\n \nscope\n);", 
            "title": "Data manager"
        }, 
        {
            "location": "/datamanager/index.html#introduction", 
            "text": "Store data in key-value pairs, built-inobject of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/datamanager/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/datamanager/index.html#set-value", 
            "text": "parent . data . set ( key ,   value );  parent . data . merge ( data );       // {}", 
            "title": "Set value"
        }, 
        {
            "location": "/datamanager/index.html#pop-key", 
            "text": "var   value   =   parent . data . pop ( key );   Get and remove that key.", 
            "title": "Pop key"
        }, 
        {
            "location": "/datamanager/index.html#remove-key", 
            "text": "parent . data . remove ( key );", 
            "title": "Remove key"
        }, 
        {
            "location": "/datamanager/index.html#get-value", 
            "text": "var   value   =   parent . data . get ( key );  var   allValues   =   parent . data . getAll ();    // return a copy of data", 
            "title": "Get value"
        }, 
        {
            "location": "/datamanager/index.html#query", 
            "text": "Using  string.match()  to pick matched keys.  var   result   =   parent . data . query ( rgExp );", 
            "title": "Query"
        }, 
        {
            "location": "/datamanager/index.html#freeze", 
            "text": "var   isFrozen   =   parent . data . freeze ;  parent . data . freeze   =   true ;   No changes can be written to it.", 
            "title": "Freeze"
        }, 
        {
            "location": "/datamanager/index.html#has-key", 
            "text": "var   hasKey   =   parent . data . has ( key );", 
            "title": "Has key"
        }, 
        {
            "location": "/datamanager/index.html#for-each-key", 
            "text": "parent . data . each ( function ( parent ,   key ,   value ){ \n     /* ... */  },   scope );", 
            "title": "For each key"
        }, 
        {
            "location": "/datamanager/index.html#count-of-data", 
            "text": "var   cnt   =   parent . data . count ;", 
            "title": "Count of data"
        }, 
        {
            "location": "/datamanager/index.html#reset", 
            "text": "Reset status and clean all keys.  parent . data . reset ()", 
            "title": "Reset"
        }, 
        {
            "location": "/datamanager/index.html#event-of-changing-data", 
            "text": "Event 'setdata', 'changedata' will be fired when invoking  parent.data.set(key, value) .  parent . data . event . on ( setdata ,   function ( parent ,   key ,   value ){ \n     /* ... */  },   scope );   parent . data . event . on ( changedata ,   function ( parent ,   key ,   value ,   resetValue ){ \n     // resetValue(newValue);  // overwrite value to newValue  },   scope );", 
            "title": "Event of changing data"
        }, 
        {
            "location": "/array/index.html", 
            "text": "Introduction\n\n\nBuilt-in javascript object.\n\n\n\n\nAuthor: Built-in javascript function\n\n\n\n\nUsage\n\n\nFilter elements\n\n\nCreates a new array with all elements that pass the test function. \nReference\n\n\n// var elems = [...]\n\n\nvar\n \nresult\n \n=\n \nelems\n.\nfilter\n(\nfunction\n(\nel\n){\n\n    \nreturn\n \n(\nel\n.\nx\n \n \n400\n);\n\n\n});", 
            "title": "Array"
        }, 
        {
            "location": "/array/index.html#introduction", 
            "text": "Built-in javascript object.   Author: Built-in javascript function", 
            "title": "Introduction"
        }, 
        {
            "location": "/array/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/array/index.html#filter-elements", 
            "text": "Creates a new array with all elements that pass the test function.  Reference  // var elems = [...]  var   result   =   elems . filter ( function ( el ){ \n     return   ( el . x     400 );  });", 
            "title": "Filter elements"
        }, 
        {
            "location": "/csvtoarray/index.html", 
            "text": "Introduction\n\n\nGenerate array from csv string.\n\n\n\n\nAuthor: \nBen\n\n\nMethod only\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nGenerate array\n\n\nvar\n \narr\n \n=\n \nCSVToArray\n(\ncsv\n,\n \n{\n\n    \n// delimiter: \n,\n,\n\n    \n// convert: true,\n\n    \n// convertCallback: undefined\n\n    \n// convertCallbackScope: undefined\n\n\n});\n\n\n\n\n\nValues will be converted to \nnumber\n, \nboolean\n, \nnull\n, or \nstring\n, if \nconvert\n is \ntrue\n, or assign your convert function by \nconvertCallback\n and \nconvertCallbackScope\n.", 
            "title": "CSV to array"
        }, 
        {
            "location": "/csvtoarray/index.html#introduction", 
            "text": "Generate array from csv string.   Author:  Ben  Method only", 
            "title": "Introduction"
        }, 
        {
            "location": "/csvtoarray/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/csvtoarray/index.html#usage", 
            "text": "Sample code", 
            "title": "Usage"
        }, 
        {
            "location": "/csvtoarray/index.html#generate-array", 
            "text": "var   arr   =   CSVToArray ( csv ,   { \n     // delimiter:  , , \n     // convert: true, \n     // convertCallback: undefined \n     // convertCallbackScope: undefined  });   Values will be converted to  number ,  boolean ,  null , or  string , if  convert  is  true , or assign your convert function by  convertCallback  and  convertCallbackScope .", 
            "title": "Generate array"
        }, 
        {
            "location": "/csvtohashtable/index.html", 
            "text": "Introduction\n\n\nHash table indexed by (col-key, row-key) from csv string.\n\n\n\n\nAuthor: Rex\n\n\nMember of scene\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nCreate instance\n\n\nvar\n \ntable\n \n=\n \nnew\n \nHashTable\n(\nthis\n);\n\n\n\n\n\nLoad table from csv string\n\n\ntable\n.\nloadCSV\n(\ncsvString\n,\n \n{\n\n    \n// delimiter: \n,\n,\n\n    \n// convertCallback: true\n\n    \n// convertCallbackScope: undefined\n\n\n});\n\n\n\n\n\nFor exameple, csv string\n\n\nname,hp,mp\n\n\nRex,100,20\n\n\nAlice,300,40\n\n\n\n\n\nwill be converted to \n\n\n{\n\n    \nAlice\n:\n \n{\n\n        \nname\n:\n \nAlice\n,\n\n        \nhp\n:\n \n300\n,\n\n        \nmp\n:\n \n40\n\n    \n},\n\n    \nRex\n:\n \n{\n\n        \nname\n:\n \nRex\n,\n\n        \nhp\n:\n \n100\n,\n\n        \nmp\n:\n \n20\n\n    \n}\n\n\n}\n\n\n\n\n\nThen get value by\n\n\nvar\n \nvalue\n \n=\n \ntable\n.\nget\n(\nRex\n,\n \nhp\n);\n\n\n\n\n\nConvert value type\n\n\nValues will be converted to \nnumber\n, \nboolean\n, \nnull\n, or \nstring\n, if \nconvertCallback\n is \ntrue\n, or assign your convert function by \nconvertCallback\n and \nconvertCallbackScope\n when loading table (\ntable.loadCSV(...)\n).\n\n\nvar\n \nconvertCallback\n \n=\n \nfunction\n(\ntable\n,\n \nrowKey\n,\n \ncolKey\n,\n \nvalue\n)\n \n{\n\n    \n// value = ...\n\n    \nreturn\n \nvalue\n;\n\n\n};\n\n\n\n\n\nOr uses these metheds to convert columns or rows.\n\n\n\n\nconvert values in column\n    \ntable\n.\nconvertCol\n(\ncolKey\n);\n  \n// colKey: a colKey, or an array of colKeys\n\n\n// table.convertCol(colKey, convertCallback, convertCallbackScope);\n\n\n\n\nconvert values in row\n    \ntable\n.\nconvertRow\n(\nrowKey\n);\n  \n// rowKey: a rowKey, or an array of rowKeys\n\n\n// table.convertRow(rowKey, convertCallback, convertCallbackScope);\n\n\n\n\n\n\nGet value\n\n\nvar\n \nval\n \n=\n \ntable\n.\nget\n(\nrowKey\n,\n \ncolKey\n);\n\n\n\n\n\nSet value\n\n\ntable\n.\nset\n(\nrowKey\n,\n \ncolKey\n,\n \nvalue\n);\n\n\n\n\n\ntable\n.\nadd\n(\nrowKey\n,\n \ncolKey\n,\n \nvalue\n);\n\n\n// equal to table.set(rowKey, colKey, table.get(rowKey, colKey) + value);\n\n\n\n\n\nHas column/row key\n\n\nvar\n \nhasRow\n \n=\n \ntable\n.\nhasRowKey\n(\nrowKey\n);\n\n\n\n\n\nvar\n \nhasCol\n \n=\n \ntable\n.\nhasColKey\n(\ncolKey\n);\n\n\n\n\n\nvar\n \nhasCell\n \n=\n \ntable\n.\nhasKey\n(\nrowKey\n,\n \ncolKey\n);\n\n\n\n\n\nValue in column or row\n\n\nvar\n \nexisted\n \n=\n \ntable\n.\nisValueInRol\n(\nrowKey\n,\n \ndata\n);\n\n\n\n\n\nvar\n \nexisted\n \n=\n \ntable\n.\nisValueInCol\n(\ncolKey\n,\n \ndata\n);\n\n\n\n\n\nCreate table\n\n\nClean table\n\n\ntable\n.\nclean\n();\n\n\n\n\n\nAppend a column\n\n\ntable\n.\nappendCol\n(\ncolKey\n,\n \ninitValue\n);\n\n\n// table.appendCol(colKey, callback, scope);  // get initValue from callback\n\n\n\n\n\nCallback\n\n\nvar\n \ncallback\n \n=\n \nfunction\n \n(\ntable\n,\n \nrowKey\n,\n \ncolKey\n)\n \n{\n \n    \n// value = ...\n\n    \nreturn\n \nvalue\n;\n\n\n};\n\n\n\n\n\nAppend a row\n\n\ntable\n.\nappendRow\n(\ncolKey\n,\n \ninitValue\n);\n\n\n// table.appendRow(colKey, callback, scope);  // get initValue from callback\n\n\n\n\n\nCallback\n\n\nvar\n \ncallback\n \n=\n \nfunction\n \n(\ntable\n,\n \nrowKey\n,\n \ncolKey\n)\n \n{\n \n    \n// value = ...\n\n    \nreturn\n \nvalue\n;\n\n\n};\n\n\n\n\n\nRemove a row\n\n\ntable\n.\nremoveRol\n(\ncolKey\n);\n\n\n\n\n\nRemove a column\n\n\ntable\n.\nremoveCol\n(\ncolKey\n);\n\n\n\n\n\nSort column or row\n\n\ntable\n.\nsortCol\n(\ncolKey\n,\n \nmode\n);\n\n\n// table.sortCol(callback, scope);  // sort column by callback\n\n\n\n\n\ntable\n.\nsortRow\n(\nrowKey\n,\n \nmode\n);\n\n\n// table.sortRow(callback, scope);  // sort column by callback\n\n\n\n\n\nMode:\n\n\n\n\n'ascending'\n, or \n0\n\n\n'descending'\n, or \n1\n\n\n'logical ascending'\n, or \n2\n\n\n'logical descending'\n, or \n3\n\n\n\n\nSorting callback\n\n\nvar\n \ncallback\n \n=\n \nfunction\n(\nrowKeyA\n,\n \nrowKeyB\n)\n \n{\n\n    \nreturn\n \nresult\n;\n \n// 1, -1, or 0\n\n\n};\n\n\n\n\n\nRetrieve columns or rows\n\n\ntable\n.\neachCol\n(\nrowKey\n,\n \ncallback\n,\n \nscope\n);\n\n\n\n\n\ntable\n.\neachRow\n(\ncolKey\n,\n \ncallback\n,\n \nscope\n);\n\n\n\n\n\nCallback\n\n\nvar\n \ncallback\n \n=\n \nfunction\n(\ntable\n,\n \nrowKey\n,\n \ncolKey\n,\n \nvalue\n)\n \n{\n\n    \n// ...\n\n\n};", 
            "title": "CSV to hash table"
        }, 
        {
            "location": "/csvtohashtable/index.html#introduction", 
            "text": "Hash table indexed by (col-key, row-key) from csv string.   Author: Rex  Member of scene", 
            "title": "Introduction"
        }, 
        {
            "location": "/csvtohashtable/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/csvtohashtable/index.html#usage", 
            "text": "Sample code", 
            "title": "Usage"
        }, 
        {
            "location": "/csvtohashtable/index.html#create-instance", 
            "text": "var   table   =   new   HashTable ( this );", 
            "title": "Create instance"
        }, 
        {
            "location": "/csvtohashtable/index.html#load-table-from-csv-string", 
            "text": "table . loadCSV ( csvString ,   { \n     // delimiter:  , , \n     // convertCallback: true \n     // convertCallbackScope: undefined  });   For exameple, csv string  name,hp,mp  Rex,100,20  Alice,300,40   will be converted to   { \n     Alice :   { \n         name :   Alice , \n         hp :   300 , \n         mp :   40 \n     }, \n     Rex :   { \n         name :   Rex , \n         hp :   100 , \n         mp :   20 \n     }  }   Then get value by  var   value   =   table . get ( Rex ,   hp );", 
            "title": "Load table from csv string"
        }, 
        {
            "location": "/csvtohashtable/index.html#convert-value-type", 
            "text": "Values will be converted to  number ,  boolean ,  null , or  string , if  convertCallback  is  true , or assign your convert function by  convertCallback  and  convertCallbackScope  when loading table ( table.loadCSV(...) ).  var   convertCallback   =   function ( table ,   rowKey ,   colKey ,   value )   { \n     // value = ... \n     return   value ;  };   Or uses these metheds to convert columns or rows.   convert values in column\n     table . convertCol ( colKey );    // colKey: a colKey, or an array of colKeys  // table.convertCol(colKey, convertCallback, convertCallbackScope);   convert values in row\n     table . convertRow ( rowKey );    // rowKey: a rowKey, or an array of rowKeys  // table.convertRow(rowKey, convertCallback, convertCallbackScope);", 
            "title": "Convert value type"
        }, 
        {
            "location": "/csvtohashtable/index.html#get-value", 
            "text": "var   val   =   table . get ( rowKey ,   colKey );", 
            "title": "Get value"
        }, 
        {
            "location": "/csvtohashtable/index.html#set-value", 
            "text": "table . set ( rowKey ,   colKey ,   value );   table . add ( rowKey ,   colKey ,   value );  // equal to table.set(rowKey, colKey, table.get(rowKey, colKey) + value);", 
            "title": "Set value"
        }, 
        {
            "location": "/csvtohashtable/index.html#has-columnrow-key", 
            "text": "var   hasRow   =   table . hasRowKey ( rowKey );   var   hasCol   =   table . hasColKey ( colKey );   var   hasCell   =   table . hasKey ( rowKey ,   colKey );", 
            "title": "Has column/row key"
        }, 
        {
            "location": "/csvtohashtable/index.html#value-in-column-or-row", 
            "text": "var   existed   =   table . isValueInRol ( rowKey ,   data );   var   existed   =   table . isValueInCol ( colKey ,   data );", 
            "title": "Value in column or row"
        }, 
        {
            "location": "/csvtohashtable/index.html#create-table", 
            "text": "", 
            "title": "Create table"
        }, 
        {
            "location": "/csvtohashtable/index.html#clean-table", 
            "text": "table . clean ();", 
            "title": "Clean table"
        }, 
        {
            "location": "/csvtohashtable/index.html#append-a-column", 
            "text": "table . appendCol ( colKey ,   initValue );  // table.appendCol(colKey, callback, scope);  // get initValue from callback   Callback  var   callback   =   function   ( table ,   rowKey ,   colKey )   {  \n     // value = ... \n     return   value ;  };", 
            "title": "Append a column"
        }, 
        {
            "location": "/csvtohashtable/index.html#append-a-row", 
            "text": "table . appendRow ( colKey ,   initValue );  // table.appendRow(colKey, callback, scope);  // get initValue from callback   Callback  var   callback   =   function   ( table ,   rowKey ,   colKey )   {  \n     // value = ... \n     return   value ;  };", 
            "title": "Append a row"
        }, 
        {
            "location": "/csvtohashtable/index.html#remove-a-row", 
            "text": "table . removeRol ( colKey );", 
            "title": "Remove a row"
        }, 
        {
            "location": "/csvtohashtable/index.html#remove-a-column", 
            "text": "table . removeCol ( colKey );", 
            "title": "Remove a column"
        }, 
        {
            "location": "/csvtohashtable/index.html#sort-column-or-row", 
            "text": "table . sortCol ( colKey ,   mode );  // table.sortCol(callback, scope);  // sort column by callback   table . sortRow ( rowKey ,   mode );  // table.sortRow(callback, scope);  // sort column by callback   Mode:   'ascending' , or  0  'descending' , or  1  'logical ascending' , or  2  'logical descending' , or  3   Sorting callback  var   callback   =   function ( rowKeyA ,   rowKeyB )   { \n     return   result ;   // 1, -1, or 0  };", 
            "title": "Sort column or row"
        }, 
        {
            "location": "/csvtohashtable/index.html#retrieve-columns-or-rows", 
            "text": "table . eachCol ( rowKey ,   callback ,   scope );   table . eachRow ( colKey ,   callback ,   scope );   Callback  var   callback   =   function ( table ,   rowKey ,   colKey ,   value )   { \n     // ...  };", 
            "title": "Retrieve columns or rows"
        }, 
        {
            "location": "/eventemitter3/index.html", 
            "text": "Introduction\n\n\nEvent emitter\n.\n\n\nUsage\n\n\nGet event emitter\n\n\n\n\nScene: \n    \nvar\n \nee\n \n=\n \nscene\n.\nsys\n.\nevents\n;\n\n\n\n\nGame object:\n    \nvar\n \nee\n \n=\n \ngameobject\n;\n\n\n\n\n\n\nAttach listener\n\n\nee\n.\non\n(\neventName\n,\n \ncallback\n,\n \ncallbackScope\n);\n\n\nee\n.\nonce\n(\neventName\n,\n \ncallback\n,\n \ncallbackScope\n);\n  \n// only fire listeners one time\n\n\n\n\n\nAlias\n\n\nee\n.\naddListener\n(\neventName\n,\n \ncallback\n,\n \ncallbackScope\n);\n\n\nee\n.\naddListener\n(\neventName\n,\n \ncallback\n,\n \ncallbackScope\n,\n \ntrue\n);\n  \n// only fire listeners one time\n\n\n\n\n\nFire event\n\n\nee\n.\nemit\n(\neventName\n);\n\n\n\n\n\nRemove listeners\n\n\nee\n.\noff\n(\neventName\n,\n \ncallback\n,\n \ncallbackScope\n);\n\n\nee\n.\noff\n(\neventName\n,\n \ncallback\n,\n \ncallbackScope\n,\n \ntrue\n);\n   \n// only remove one-time listeners\n\n\n\n\n\nAlias\n\n\nee\n.\nremoveListener\n(\neventName\n,\n \ncallback\n,\n \ncallbackScope\n);\n \n\nee\n.\nremoveListener\n(\neventName\n,\n \ncallback\n,\n \ncallbackScope\n,\n \ntrue\n);\n  \n// only remove one-time listeners\n\n\n\n\n\nRemove all listeners\n\n\nee\n.\nremoveAllListeners\n();\n\n\n\n\n\nGet listeners count\n\n\nvar\n \ncount\n \n=\n \nee\n.\nlistenerCount\n(\neventName\n);\n\n\n//var noListener = (ee.listenerCount(eventName) === 0);\n\n\n\n\n\nGet listeners\n\n\nvar\n \nlisteners\n \n=\n \nee\n.\nlisteners\n(\neventName\n);\n\n\n\n\n\nListener\n\n\n{\n\n    \nfn\n:\n \ncallback\n,\n\n    \ncontext\n:\n \ncallbackScope\n,\n\n    \nonce\n:\n \nonce\n\n\n}", 
            "title": "Event emitter"
        }, 
        {
            "location": "/eventemitter3/index.html#introduction", 
            "text": "Event emitter .", 
            "title": "Introduction"
        }, 
        {
            "location": "/eventemitter3/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/eventemitter3/index.html#get-event-emitter", 
            "text": "Scene: \n     var   ee   =   scene . sys . events ;   Game object:\n     var   ee   =   gameobject ;", 
            "title": "Get event emitter"
        }, 
        {
            "location": "/eventemitter3/index.html#attach-listener", 
            "text": "ee . on ( eventName ,   callback ,   callbackScope );  ee . once ( eventName ,   callback ,   callbackScope );    // only fire listeners one time   Alias  ee . addListener ( eventName ,   callback ,   callbackScope );  ee . addListener ( eventName ,   callback ,   callbackScope ,   true );    // only fire listeners one time", 
            "title": "Attach listener"
        }, 
        {
            "location": "/eventemitter3/index.html#fire-event", 
            "text": "ee . emit ( eventName );", 
            "title": "Fire event"
        }, 
        {
            "location": "/eventemitter3/index.html#remove-listeners", 
            "text": "ee . off ( eventName ,   callback ,   callbackScope );  ee . off ( eventName ,   callback ,   callbackScope ,   true );     // only remove one-time listeners   Alias  ee . removeListener ( eventName ,   callback ,   callbackScope );   ee . removeListener ( eventName ,   callback ,   callbackScope ,   true );    // only remove one-time listeners", 
            "title": "Remove listeners"
        }, 
        {
            "location": "/eventemitter3/index.html#remove-all-listeners", 
            "text": "ee . removeAllListeners ();", 
            "title": "Remove all listeners"
        }, 
        {
            "location": "/eventemitter3/index.html#get-listeners-count", 
            "text": "var   count   =   ee . listenerCount ( eventName );  //var noListener = (ee.listenerCount(eventName) === 0);", 
            "title": "Get listeners count"
        }, 
        {
            "location": "/eventemitter3/index.html#get-listeners", 
            "text": "var   listeners   =   ee . listeners ( eventName );", 
            "title": "Get listeners"
        }, 
        {
            "location": "/eventemitter3/index.html#listener", 
            "text": "{ \n     fn :   callback , \n     context :   callbackScope , \n     once :   once  }", 
            "title": "Listener"
        }, 
        {
            "location": "/runcommands/index.html", 
            "text": "Introduction\n\n\nRun commands in array.\n\n\n\n\nAuthor: Rex\n\n\nMethod only\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nRun commands\n\n\nrunCommands\n(\ncommands\n,\n \nscope\n);\n\n\n\n\n\n\n\nFormat of command :\n    \n[\nfnName\n,\n \nparam0\n,\n \nparam1\n,\n \n...]\n\n\n\n\nCommands in nested array :\n    \n[\n\n    \ncommand0\n,\n\n    \ncommand1\n\n    \n[\n\n        \ncommand2\n,\n\n        \ncommand3\n\n    \n]\n\n\n]\n\n\n\n\nRun command :\n    \nscope\n[\nfnName\n].\ncall\n(\nscope\n,\n \nparam0\n,\n \nparam1\n \n...)", 
            "title": "Run commands"
        }, 
        {
            "location": "/runcommands/index.html#introduction", 
            "text": "Run commands in array.   Author: Rex  Method only", 
            "title": "Introduction"
        }, 
        {
            "location": "/runcommands/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/runcommands/index.html#usage", 
            "text": "Sample code", 
            "title": "Usage"
        }, 
        {
            "location": "/runcommands/index.html#run-commands", 
            "text": "runCommands ( commands ,   scope );    Format of command :\n     [ fnName ,   param0 ,   param1 ,   ...]   Commands in nested array :\n     [ \n     command0 , \n     command1 \n     [ \n         command2 , \n         command3 \n     ]  ]   Run command :\n     scope [ fnName ]. call ( scope ,   param0 ,   param1   ...)", 
            "title": "Run commands"
        }, 
        {
            "location": "/sequence/index.html", 
            "text": "Introduction\n\n\nRun sequence commands in array.\n\n\n\n\nAuthor: Rex\n\n\nObject\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nSequence\n \nfrom\n \n./plugins/sequence.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nSequencePlugin\n \nfrom\n \n./plugins/sequence-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexSequence\n,\n\n            \nplugin\n:\n \nSequencePlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate sequence instance\n\n\nvar\n \nseq\n \n=\n \nthis\n.\nplugins\n.\nget\n(\nrexSequence\n).\nadd\n({\n\n    \n// yoyo: false  // reverse sequence when it reaches the end\n\n    \n// repeat: 0,   // repeat count\n\n    \n// loop: false  // repeat forever\n\n\n});\n\n\n\n\n\nLoad commands\n\n\nseq\n.\nload\n(\ncommands\n,\n \nactionScope\n);\n\n\n\n\n\n\n\nFormat of command :\n    \n[\nfnName\n,\n \nparam0\n,\n \nparam1\n,\n \n...]\n\n\n\n\nCommands in nested array :\n    \n[\n\n    \ncommand0\n,\n\n    \ncommand1\n\n    \n[\n\n        \ncommand2\n,\n\n        \ncommand3\n\n    \n]\n\n\n]\n\n\n\n\nActionScope\n\n\n\n\nFormat of command is the same as \nrun-command\n.\n\n\nRun commands\n\n\nseq\n.\nstart\n();\n\n\n\n\n\n\n\nRun command :\n    \nvar\n \neventEmitter\n \n=\n \nactionScope\n[\nfnName\n].\ncall\n(\nactionScope\n,\n \nparam0\n,\n \nparam1\n \n...);\n\n\n\n        - Return an \nevent emitter\n to pause the sequence, otherwise run next command\n\n        - Sequence will continue when that event emitter fires \ncomplete\n event\n\n\n\n\nEvents\n\n\n\n\nOn sequence completed :\n\n\n\n\nseq\n.\non\n(\ncomplete\n,\n \nfunction\n(){});\n\n\n\n\n\nAction of commands\n\n\nAction of commands, extended from \nPhaser.Events.EventEmitter\n.\n\n\nclass\n \nActionKlass\n \nextends\n \nPhaser\n.\nEvents\n.\nEventEmitter\n \n{\n\n    \nconstructor\n(\nscene\n)\n \n{\n\n        \nsuper\n();\n\n\n        \nthis\n.\nscene\n \n=\n \nscene\n;\n\n        \nthis\n.\nmyConsole\n \n=\n \nscene\n.\nadd\n.\ntext\n(\n100\n,\n \n100\n,\n \n);\n\n\n        \nthis\n[\nwait-click\n]\n \n=\n \nthis\n.\nwaitClick\n;\n\n        \nthis\n[\nwait-time\n]\n \n=\n \nthis\n.\nwaitTime\n;\n\n    \n}\n\n\n    \n// callbacks\n\n    \nprint\n(\nmsg\n)\n \n{\n\n        \nthis\n.\nmyConsole\n.\nsetText\n(\nmsg\n);\n\n        \n// return undefined to run next command\n\n    \n}\n\n\n    \nwaitClick\n()\n \n{\n\n        \nthis\n.\nscene\n.\ninput\n.\nonce\n(\npointerup\n,\n \nthis\n.\ncomplete\n,\n \nthis\n);\n\n        \nreturn\n \nthis\n;\n  \n// return eventEmitter to pause the sequence\n\n    \n}\n\n\n    \nwaitTime\n(\ndelay\n)\n \n{\n\n        \nthis\n.\nscene\n.\ntime\n.\ndelayedCall\n(\ndelay\n \n*\n \n1000\n,\n \nthis\n.\ncomplete\n,\n \n[],\n \nthis\n);\n\n        \nreturn\n \nthis\n;\n  \n// return eventEmitter to pause the sequence\n\n    \n}\n\n\n    \ncomplete\n()\n \n{\n\n        \nthis\n.\nemit\n(\ncomplete\n);\n  \n// resume sequence\n\n    \n}\n\n\n}\n\n\nvar\n \nactionScope\n \n=\n \nnew\n \nActionKlass\n(\nscene\n);\n\n\n\n\n\nNow this scope supports 3 commands\n\n\n\n\nprint(msg): \n['print', msg]\n\n\nwaitClick(): \n['wait-click']\n\n\nwaitTime(delay): \n['wait-time', delay]", 
            "title": "Sequence"
        }, 
        {
            "location": "/sequence/index.html#introduction", 
            "text": "Run sequence commands in array.   Author: Rex  Object", 
            "title": "Introduction"
        }, 
        {
            "location": "/sequence/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/sequence/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/sequence/index.html#import-class", 
            "text": "import   Sequence   from   ./plugins/sequence.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/sequence/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   SequencePlugin   from   ./plugins/sequence-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexSequence , \n             plugin :   SequencePlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/sequence/index.html#create-sequence-instance", 
            "text": "var   seq   =   this . plugins . get ( rexSequence ). add ({ \n     // yoyo: false  // reverse sequence when it reaches the end \n     // repeat: 0,   // repeat count \n     // loop: false  // repeat forever  });", 
            "title": "Create sequence instance"
        }, 
        {
            "location": "/sequence/index.html#load-commands", 
            "text": "seq . load ( commands ,   actionScope );    Format of command :\n     [ fnName ,   param0 ,   param1 ,   ...]   Commands in nested array :\n     [ \n     command0 , \n     command1 \n     [ \n         command2 , \n         command3 \n     ]  ]   ActionScope   Format of command is the same as  run-command .", 
            "title": "Load commands"
        }, 
        {
            "location": "/sequence/index.html#run-commands", 
            "text": "seq . start ();    Run command :\n     var   eventEmitter   =   actionScope [ fnName ]. call ( actionScope ,   param0 ,   param1   ...);  \n        - Return an  event emitter  to pause the sequence, otherwise run next command \n        - Sequence will continue when that event emitter fires  complete  event", 
            "title": "Run commands"
        }, 
        {
            "location": "/sequence/index.html#events", 
            "text": "On sequence completed :   seq . on ( complete ,   function (){});", 
            "title": "Events"
        }, 
        {
            "location": "/sequence/index.html#action-of-commands", 
            "text": "Action of commands, extended from  Phaser.Events.EventEmitter .  class   ActionKlass   extends   Phaser . Events . EventEmitter   { \n     constructor ( scene )   { \n         super (); \n\n         this . scene   =   scene ; \n         this . myConsole   =   scene . add . text ( 100 ,   100 ,   ); \n\n         this [ wait-click ]   =   this . waitClick ; \n         this [ wait-time ]   =   this . waitTime ; \n     } \n\n     // callbacks \n     print ( msg )   { \n         this . myConsole . setText ( msg ); \n         // return undefined to run next command \n     } \n\n     waitClick ()   { \n         this . scene . input . once ( pointerup ,   this . complete ,   this ); \n         return   this ;    // return eventEmitter to pause the sequence \n     } \n\n     waitTime ( delay )   { \n         this . scene . time . delayedCall ( delay   *   1000 ,   this . complete ,   [],   this ); \n         return   this ;    // return eventEmitter to pause the sequence \n     } \n\n     complete ()   { \n         this . emit ( complete );    // resume sequence \n     }  }  var   actionScope   =   new   ActionKlass ( scene );   Now this scope supports 3 commands   print(msg):  ['print', msg]  waitClick():  ['wait-click']  waitTime(delay):  ['wait-time', delay]", 
            "title": "Action of commands"
        }, 
        {
            "location": "/csvscenario/index.html", 
            "text": "Introduction\n\n\nRun script in csv format. Csv could be edited by excel or google document.\n\n\n\n\nAuthor: Rex\n\n\nMember of scene\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nrexCSVScenario\n \nfrom\n \n./plugins/csvscenario.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nCSVScenarioPlugin\n \nfrom\n \n./plugins/csvscenario-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexCSVScenario\n,\n\n            \nplugin\n:\n \nCSVScenarioPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n}\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate instance\n\n\nvar\n \nscenario\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexCSVScenario\n).\nadd\n(\nscene\n);\n\n\n\n\n\nLoad csv script\n\n\nscenario\n.\nload\n(\ncsvString\n,\n \nscope\n,\n \n{\n\n    \n// timeUnit: 0,        // \nms\n|0|\ns\n|\nsec\n|1\n\n    \n// prefix: /^#([a-zA-Z]+)/\n\n    \n// argsConvert: true,\n\n    \n// argsConvertScope: undefined\n\n\n})\n\n\n\n\n\nProperties\n\n\n\n\ntimeUnit: time-unit of dt, for \ndelay-execution\n\n\n'ms'\n, or \n0\n : dt in millisecond\n\n\n's'\n, \n'sec'\n, or 1 : dt in second\n\n\n\n\n\n\nprefix: regex of picking control instructions\n\n\nargsConvert: a callback to convert parameters of \nrun-custom-function\n, or \ntrue\n to use default convert function\n\n\nargsConvertScope: scope of argsConvert\n\n\n\n\nStart running instructions\n\n\nscenario\n.\nstart\n({\n\n    \n// label: \n,\n\n    \n// offset: 0\n\n\n})\n\n\n\n\n\nProperties\n\n\n\n\nlabel: Go to the label and execute. '' label is starting from 1\nst\n instruction\n\n\noffset: Offset time\n\n\n\n\nEvents\n\n\n\n\nComplete\n    \nscenario\n.\non\n(\ncomplete\n,\n \nfunction\n(){});\n\n\n\n\nLabel has changed\n    \nscenario\n.\non\n(\nlabelchange\n,\n \nfunction\n(){});\n\n\n\n\nDump execution log\n    \nscenario\n.\non\n(\nlog\n,\n \nfunction\n(){});\n\n\n\n\nNotify error\n    \nscenario\n.\non\n(\nerror\n,\n \nfunction\n(){});\n\n\n\n\n\n\nTypes of instructions\n\n\nEach row in csv table is an instruction.\n\n\nRun custom function\n\n\nRun custom function of \nscope\n, which passed from \nscenario.load(...)\n\n\nFormat:\n\n\n-,fnName,param0,param1,...\n\n\n\n\n\n\n\n1\nst\n column of instruction: \n-\n\n\nParameters will be converted to number, boolean, null, or string by default.\n\n\n\n\nDelay execution\n\n\nRun custom function after a delay.\n\n\nFormat:\n\n\ntime,fnName,param0,param1,...\n\n\n\n\n\n\n\n1\nst\n column of instruction: a number\n\n\ntime-unit of delay is set from \nscenario.load(...)\n\n\nParameters will be converted to number, boolean, null, or string by default.\n\n\n\n\nWait then execution\n\n\nRun custom function until \nscenario.continue(eventName)\n\n\nFormat:\n\n\neventName,fnName,param0,param1,...\n\n\n\n\n\n\n\n1\nst\n column of instruction: not a number, not a string start from \n#\n\n\nExecution will be hang until \nscenario.continue(eventName)\n is called\n\n\nParameters will be converted to number, boolean, null, or string by default.\n\n\n\n\nTask\n\n\nSample code\n\n\nScenario will be paused if custom function return an \nevent emitter\n, resumed when that evnt emitter fires \ncomplete\n event.\n\n\nSee also: \nSequence\n\n\nLabel\n\n\nSample code\n\n\nA label for \n#GOTO\n or \n#IF\n instructions.\n\n\nFormat:\n\n\n#LABEL,label\n\n\n\n\n\n\n\n1\nst\n column of instruction: \n#LABEL\n, case insensitive.\n\n\nLabel \n''\n is reserved, don't use \n''\n for label name.\n\n\n\n\nExample: A label named 'AA'\n\n\n#LABEL,AA\n\n\n\n\n\nExit\n\n\nExit current execution.\n\n\nFormat:\n\n\n#EXIT\n\n\n\n\n\n\n\n1\nst\n column of instruction: \n#EXIT\n, case insensitive.\n\n\n\n\nGoto\n\n\nSample code\n\n\nGo to \nlabel\n and execute.\n\n\nFormat:\n\n\n#GOTO,label\n\n\n\n\n\n\n\n1\nst\n column of instruction: \n#GOTO\n, case insensitive.\n\n\nAn \nerror\n event will be fired if label is not found.\n\n\n\n\nExample: Goto label 'AA'\n\n\n#GOTO,AA\n\n\n\n\n\nIf-goto\n\n\nSample code\n\n\nGo to \ntrueLabel\n if condition is true, otherwise go to \nfalseLabel\n.\n\n\nFormat:\n\n\n#IF,condition,trueLabel,falseLabel\n\n\n\n\n\n\n\n1\nst\n column of instruction: \n#IF\n, case insensitive.\n\n\nconditon: boolean equation\n\n\nthis\n is the \nscope\n passed from \nscenario.load(...)\n\n\n\n\n\n\ntrueLabel/falseLabel: go to this label if condition is true/false\n\n\nrun next instruction if label is \n''\n\n\nAn \nerror\n event will be fired if label is not found.\n\n\n\n\n\n\n\n\nExample: Goto label 'AA' if (this.coin \n 100), else run next instruction\n\n\n#IF,this.coin \n 100,AA\n\n\n\n\n\nWait\n\n\nRun next instruction after a delay time, or \nscenario.continue(eventName)\n.\n\n\nFormat:\n\n\n#WAIT,time\n\n\n\n\n\n#WAIT,eventName\n\n\n\n\n\n\n\n1\nst\n column of instruction: \n#WAIT\n, case insensitive.\n\n\n2\nnd\n colume of instruction:\n\n\na number: a delay time\n\n\ntime-unit of delay is set from \nscenario.load(...)\n\n\n\n\n\n\na string: an event name for \nscenario.continue(eventName)\n\n\n\n\n\n\n\n\nExample: \n\n\n\n\nWait 1 time-unit\n    \n#WAIT,1\n\n\n\n\nWait until 'click'\n    \n#WAIT,click\n\n\n\n    \nscenario\n.\ncontinue\n(\nclick\n)\n\n\n\n\n\n\nOther methods\n\n\nPause\n\n\nscenario\n.\npause\n()\n\n\n\n\n\nResume\n\n\nscenario\n.\nresume\n()", 
            "title": "CSV scenario"
        }, 
        {
            "location": "/csvscenario/index.html#introduction", 
            "text": "Run script in csv format. Csv could be edited by excel or google document.   Author: Rex  Member of scene", 
            "title": "Introduction"
        }, 
        {
            "location": "/csvscenario/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/csvscenario/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/csvscenario/index.html#import-class", 
            "text": "import   rexCSVScenario   from   ./plugins/csvscenario.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/csvscenario/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   CSVScenarioPlugin   from   ./plugins/csvscenario-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexCSVScenario , \n             plugin :   CSVScenarioPlugin , \n             start :   true \n         } \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/csvscenario/index.html#create-instance", 
            "text": "var   scenario   =   scene . plugins . get ( rexCSVScenario ). add ( scene );", 
            "title": "Create instance"
        }, 
        {
            "location": "/csvscenario/index.html#load-csv-script", 
            "text": "scenario . load ( csvString ,   scope ,   { \n     // timeUnit: 0,        //  ms |0| s | sec |1 \n     // prefix: /^#([a-zA-Z]+)/ \n     // argsConvert: true, \n     // argsConvertScope: undefined  })   Properties   timeUnit: time-unit of dt, for  delay-execution  'ms' , or  0  : dt in millisecond  's' ,  'sec' , or 1 : dt in second    prefix: regex of picking control instructions  argsConvert: a callback to convert parameters of  run-custom-function , or  true  to use default convert function  argsConvertScope: scope of argsConvert", 
            "title": "Load csv script"
        }, 
        {
            "location": "/csvscenario/index.html#start-running-instructions", 
            "text": "scenario . start ({ \n     // label:  , \n     // offset: 0  })   Properties   label: Go to the label and execute. '' label is starting from 1 st  instruction  offset: Offset time", 
            "title": "Start running instructions"
        }, 
        {
            "location": "/csvscenario/index.html#events", 
            "text": "Complete\n     scenario . on ( complete ,   function (){});   Label has changed\n     scenario . on ( labelchange ,   function (){});   Dump execution log\n     scenario . on ( log ,   function (){});   Notify error\n     scenario . on ( error ,   function (){});", 
            "title": "Events"
        }, 
        {
            "location": "/csvscenario/index.html#types-of-instructions", 
            "text": "Each row in csv table is an instruction.", 
            "title": "Types of instructions"
        }, 
        {
            "location": "/csvscenario/index.html#run-custom-function", 
            "text": "Run custom function of  scope , which passed from  scenario.load(...)  Format:  -,fnName,param0,param1,...    1 st  column of instruction:  -  Parameters will be converted to number, boolean, null, or string by default.", 
            "title": "Run custom function"
        }, 
        {
            "location": "/csvscenario/index.html#delay-execution", 
            "text": "Run custom function after a delay.  Format:  time,fnName,param0,param1,...    1 st  column of instruction: a number  time-unit of delay is set from  scenario.load(...)  Parameters will be converted to number, boolean, null, or string by default.", 
            "title": "Delay execution"
        }, 
        {
            "location": "/csvscenario/index.html#wait-then-execution", 
            "text": "Run custom function until  scenario.continue(eventName)  Format:  eventName,fnName,param0,param1,...    1 st  column of instruction: not a number, not a string start from  #  Execution will be hang until  scenario.continue(eventName)  is called  Parameters will be converted to number, boolean, null, or string by default.", 
            "title": "Wait then execution"
        }, 
        {
            "location": "/csvscenario/index.html#task", 
            "text": "Sample code  Scenario will be paused if custom function return an  event emitter , resumed when that evnt emitter fires  complete  event.  See also:  Sequence", 
            "title": "Task"
        }, 
        {
            "location": "/csvscenario/index.html#label", 
            "text": "Sample code  A label for  #GOTO  or  #IF  instructions.  Format:  #LABEL,label    1 st  column of instruction:  #LABEL , case insensitive.  Label  ''  is reserved, don't use  ''  for label name.   Example: A label named 'AA'  #LABEL,AA", 
            "title": "Label"
        }, 
        {
            "location": "/csvscenario/index.html#exit", 
            "text": "Exit current execution.  Format:  #EXIT    1 st  column of instruction:  #EXIT , case insensitive.", 
            "title": "Exit"
        }, 
        {
            "location": "/csvscenario/index.html#goto", 
            "text": "Sample code  Go to  label  and execute.  Format:  #GOTO,label    1 st  column of instruction:  #GOTO , case insensitive.  An  error  event will be fired if label is not found.   Example: Goto label 'AA'  #GOTO,AA", 
            "title": "Goto"
        }, 
        {
            "location": "/csvscenario/index.html#if-goto", 
            "text": "Sample code  Go to  trueLabel  if condition is true, otherwise go to  falseLabel .  Format:  #IF,condition,trueLabel,falseLabel    1 st  column of instruction:  #IF , case insensitive.  conditon: boolean equation  this  is the  scope  passed from  scenario.load(...)    trueLabel/falseLabel: go to this label if condition is true/false  run next instruction if label is  ''  An  error  event will be fired if label is not found.     Example: Goto label 'AA' if (this.coin   100), else run next instruction  #IF,this.coin   100,AA", 
            "title": "If-goto"
        }, 
        {
            "location": "/csvscenario/index.html#wait", 
            "text": "Run next instruction after a delay time, or  scenario.continue(eventName) .  Format:  #WAIT,time   #WAIT,eventName    1 st  column of instruction:  #WAIT , case insensitive.  2 nd  colume of instruction:  a number: a delay time  time-unit of delay is set from  scenario.load(...)    a string: an event name for  scenario.continue(eventName)     Example:    Wait 1 time-unit\n     #WAIT,1   Wait until 'click'\n     #WAIT,click  \n     scenario . continue ( click )", 
            "title": "Wait"
        }, 
        {
            "location": "/csvscenario/index.html#other-methods", 
            "text": "", 
            "title": "Other methods"
        }, 
        {
            "location": "/csvscenario/index.html#pause", 
            "text": "scenario . pause ()", 
            "title": "Pause"
        }, 
        {
            "location": "/csvscenario/index.html#resume", 
            "text": "scenario . resume ()", 
            "title": "Resume"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html", 
            "text": "Introduction\n\n\nRecorder of \nT\n ime-\nC\n ommand-\nR\n ecorder-\nP\n layer, to store commands with time.\n\n\n\n\nAuthor: Rex\n\n\nMember of scene\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nrexTCRP\n \nfrom\n \n./plugins/tcrp.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nTCRPPlugin\n \nfrom\n \n./plugins/tcrp-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexTCRP\n,\n\n            \nplugin\n:\n \nTCRPPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate instance\n\n\nvar\n \nrecorder\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexTextTyping\n).\naddRecorder\n(\nscene\n);\n\n\n\n\n\nStart recording\n\n\nrecorder\n.\nstart\n();\n\n\n// recorder.start(startAt);  // start-at time in ms\n\n\n\n\n\nPush commands\n\n\nrecorder\n.\naddCommand\n([\nfnName\n,\n \nparam0\n,\n \nparam1\n,\n \n...]);\n\n\n// recorder.addCommand([command0, command1, ...]);\n\n\n// recorder.addCommand([fnName, param0, param1, ...], offset);  // time-offset in ms\n\n\n\n\n\nSee also \nRun commands\n\n\nGet commands\n\n\nvar\n \ncommands\n \n=\n \nrecorder\n.\ngetCommands\n();\n        \n// get a shallow copy of commands\n\n\n// var commands = recorder.getCommands(true); // get reference of commands\n\n\n\n\n\nFormat of return commands:\n\n\n[\n\n    \n[\ndt\n,\n \n[\ncommand\n]],\n\n    \n[\ndt\n,\n \n[\ncommand0\n,\ncommand1\n]],\n\n    \n...\n\n\n]\n\n\n\n\n\nPause, Resume, stop recording\n\n\nrecorder\n.\npause\n();\n\n\nrecorder\n.\nresume\n();\n\n\nrecorder\n.\nstop\n();\n\n\n\n\n\nSeek elapsed time\n\n\nrecorder\n.\nseek\n(\ntime\n);\n   \n// elapsed time in ms\n\n\n\n\n\nState of recorder\n\n\nvar\n \nisRecording\n \n=\n \nrecorder\n.\nisRecording\n;\n\n\nvar\n \nnow\n \n=\n \nrecorder\n.\nnow\n;\n\n\n\n\n\nTime-scale\n\n\nvar\n \ntimeScale\n \n=\n \nrecorder\n.\ntimeScale\n;\n\n\nrecorder\n.\ntimeScale\n \n=\n \n0.5\n;", 
            "title": "Recoder"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#introduction", 
            "text": "Recorder of  T  ime- C  ommand- R  ecorder- P  layer, to store commands with time.   Author: Rex  Member of scene", 
            "title": "Introduction"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#import-class", 
            "text": "import   rexTCRP   from   ./plugins/tcrp.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   TCRPPlugin   from   ./plugins/tcrp-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexTCRP , \n             plugin :   TCRPPlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#create-instance", 
            "text": "var   recorder   =   scene . plugins . get ( rexTextTyping ). addRecorder ( scene );", 
            "title": "Create instance"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#start-recording", 
            "text": "recorder . start ();  // recorder.start(startAt);  // start-at time in ms", 
            "title": "Start recording"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#push-commands", 
            "text": "recorder . addCommand ([ fnName ,   param0 ,   param1 ,   ...]);  // recorder.addCommand([command0, command1, ...]);  // recorder.addCommand([fnName, param0, param1, ...], offset);  // time-offset in ms   See also  Run commands", 
            "title": "Push commands"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#get-commands", 
            "text": "var   commands   =   recorder . getCommands ();          // get a shallow copy of commands  // var commands = recorder.getCommands(true); // get reference of commands   Format of return commands:  [ \n     [ dt ,   [ command ]], \n     [ dt ,   [ command0 , command1 ]], \n     ...  ]", 
            "title": "Get commands"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#pause-resume-stop-recording", 
            "text": "recorder . pause ();  recorder . resume ();  recorder . stop ();", 
            "title": "Pause, Resume, stop recording"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#seek-elapsed-time", 
            "text": "recorder . seek ( time );     // elapsed time in ms", 
            "title": "Seek elapsed time"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#state-of-recorder", 
            "text": "var   isRecording   =   recorder . isRecording ;  var   now   =   recorder . now ;", 
            "title": "State of recorder"
        }, 
        {
            "location": "/tcrprecoderplugin/index.html#time-scale", 
            "text": "var   timeScale   =   recorder . timeScale ;  recorder . timeScale   =   0.5 ;", 
            "title": "Time-scale"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html", 
            "text": "Introduction\n\n\nPlayer of \nT\n ime-\nC\n ommand-\nR\n ecorder-\nP\n layer, to run commands on time.\n\n\n\n\nAuthor: Rex\n\n\nMember of scene\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nrexTCRP\n \nfrom\n \n./plugins/tcrp.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nTCRPPlugin\n \nfrom\n \n./plugins/tcrp-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexTCRP\n,\n\n            \nplugin\n:\n \nTCRPPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate instance\n\n\nvar\n \nplayer\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexTextTyping\n).\naddPlayer\n(\nscene\n,\n \n{\n\n    \n// timeUnit: 0,        // \nms\n|0|\ns\n|\nsec\n|1\n\n    \n// dtMode: 0,          // \nabs\n|\nabsolute\n|0|\ninc\n|\nincrement\n|1\n\n    \n// commands: [],       // [[dt, command], [dt, command], ...]\n\n    \n// scope: undefined\n\n\n});\n\n\n\n\n\nProperties\n\n\n\n\ntimeUnit: see \nnext section\n\n\ndtMode: see \nnext section\n\n\ncommands: see \nnext section\n\n\n\n\nLoad commands\n\n\nplayer\n.\nload\n(\ncommands\n,\n \nscope\n,\n \n{\n\n    \n// timeUnit: 0,        // \nms\n|0|\ns\n|\nsec\n|1\n\n    \n// dtMode: 0           // \nabs\n|\nabsolute\n|0|\ninc\n|\nincrement\n|1\n\n\n});\n\n\n\n\n\n\n\nCommands : see also \nRun commands\n\n    \n[\n\n    \n[\ndt\n,\n \ncommand\n],\n\n    \n[\ndt\n,\n \ncommand\n],\n\n    \n...\n\n\n]\n\n\n\n\nFormat of each row :\n    \n[\ndt\n,\n \nfnName\n,\n \nparam0\n,\n \nparam1\n,\n \n...]\n\n\n\n    \n[\ndt\n,\n \n[\nfnName\n,\n \nparam0\n,\n \nparam1\n,\n \n...]]\n\n\n\n    \n[\ndt\n,\n \n[\ncommand0\n,\n \ncommand1\n,\n \n...]]\n\n\n\n\n\n\n\n\ntimeUnit: time-unit of dt\n\n\n'ms'\n, or \n0\n : dt in millisecond\n\n\n's'\n, \n'sec'\n, or 1 : dt in second\n\n\n\n\n\n\ndtMode: mode of counting dt\n\n\n'abs'\n, \n'absolute'\n, or \n0\n : timeout = dt\n\n\n'inc'\n, \n'increment'\n, \n1\n : timeout = dt + previous-timeout\n\n\n\n\n\n\n\n\nStart playing\n\n\nplayer\n.\nstart\n();\n\n\n// player.start(startAt);  // start-at time in ms\n\n\n\n\n\nEvents\n\n\n\n\nComplete\n    \nplayer\n.\non\n(\ncomplete\n,\n \nfunction\n(){});\n\n\n\n\nRun command\n    \nplayer\n.\non\n(\nruncommand\n,\n \nfunction\n(\ncommands\n,\n \nscope\n){});\n\n\n\n\n\n\nPause, Resume, stop playing\n\n\nplayer\n.\npause\n();\n\n\nplayer\n.\nresume\n();\n\n\nplayer\n.\nstop\n();\n\n\n\n\n\nSeek elapsed time\n\n\nplayer\n.\nseek\n(\ntime\n);\n   \n// elapsed time in ms\n\n\n\n\n\nState of player\n\n\nvar\n \nisPlaying\n \n=\n \nplayer\n.\nisPlaying\n;\n\n\nvar\n \nisComplete\n \n=\n \nplayer\n.\nisComplate\n;\n\n\nvar\n \nnow\n \n=\n \nplayer\n.\nnow\n;\n\n\n\n\n\nTime-scale\n\n\nvar\n \ntimeScale\n \n=\n \nplayer\n.\ntimeScale\n;\n\n\nplayer\n.\ntimeScale\n \n=\n \n0.5\n;", 
            "title": "Player"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#introduction", 
            "text": "Player of  T  ime- C  ommand- R  ecorder- P  layer, to run commands on time.   Author: Rex  Member of scene", 
            "title": "Introduction"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#import-class", 
            "text": "import   rexTCRP   from   ./plugins/tcrp.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   TCRPPlugin   from   ./plugins/tcrp-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexTCRP , \n             plugin :   TCRPPlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#create-instance", 
            "text": "var   player   =   scene . plugins . get ( rexTextTyping ). addPlayer ( scene ,   { \n     // timeUnit: 0,        //  ms |0| s | sec |1 \n     // dtMode: 0,          //  abs | absolute |0| inc | increment |1 \n     // commands: [],       // [[dt, command], [dt, command], ...] \n     // scope: undefined  });   Properties   timeUnit: see  next section  dtMode: see  next section  commands: see  next section", 
            "title": "Create instance"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#load-commands", 
            "text": "player . load ( commands ,   scope ,   { \n     // timeUnit: 0,        //  ms |0| s | sec |1 \n     // dtMode: 0           //  abs | absolute |0| inc | increment |1  });    Commands : see also  Run commands \n     [ \n     [ dt ,   command ], \n     [ dt ,   command ], \n     ...  ]   Format of each row :\n     [ dt ,   fnName ,   param0 ,   param1 ,   ...]  \n     [ dt ,   [ fnName ,   param0 ,   param1 ,   ...]]  \n     [ dt ,   [ command0 ,   command1 ,   ...]]     timeUnit: time-unit of dt  'ms' , or  0  : dt in millisecond  's' ,  'sec' , or 1 : dt in second    dtMode: mode of counting dt  'abs' ,  'absolute' , or  0  : timeout = dt  'inc' ,  'increment' ,  1  : timeout = dt + previous-timeout", 
            "title": "Load commands"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#start-playing", 
            "text": "player . start ();  // player.start(startAt);  // start-at time in ms", 
            "title": "Start playing"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#events", 
            "text": "Complete\n     player . on ( complete ,   function (){});   Run command\n     player . on ( runcommand ,   function ( commands ,   scope ){});", 
            "title": "Events"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#pause-resume-stop-playing", 
            "text": "player . pause ();  player . resume ();  player . stop ();", 
            "title": "Pause, Resume, stop playing"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#seek-elapsed-time", 
            "text": "player . seek ( time );     // elapsed time in ms", 
            "title": "Seek elapsed time"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#state-of-player", 
            "text": "var   isPlaying   =   player . isPlaying ;  var   isComplete   =   player . isComplate ;  var   now   =   player . now ;", 
            "title": "State of player"
        }, 
        {
            "location": "/tcrpplayerplugin/index.html#time-scale", 
            "text": "var   timeScale   =   player . timeScale ;  player . timeScale   =   0.5 ;", 
            "title": "Time-scale"
        }, 
        {
            "location": "/camera/index.html", 
            "text": "Introduction\n\n\nCamera to display game objects, built-in object of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nGet camera\n\n\nEach scene has one or more cameras.\n\n\n\n\nMain camera\n    \nvar\n \ncamera\n \n=\n \nscene\n.\ncameras\n.\nmain\n;\n\n\n\n\n\n\nAdd new camera\n    \nvar\n \ncamera\n \n=\n \nscene\n.\ncameras\n.\nadd\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n);\n\n\n\n\n\n\n\n\nAdd existed camera\n    \nscene\n.\ncameras\n.\naddExisting\n(\ncamera\n);\n\n\n\n\n\n\n\n\nRemove camera\n\n\nscene\n.\ncameras\n.\nremove\n(\ncamera\n);\n\n\n\n\n\nDestroy camera\n\n\ncamera\n.\ndestroy\n();\n\n\n\n\n\nSet view port\n\n\ncamera\n.\nsetViewport\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n);\n\n\n\n\n\ncamera\n.\nsetPosition\n(\nx\n,\n \ny\n);\n\n\n// camera.x = x;\n\n\n// camera.y = y;\n\n\n// var x = camera.x;\n\n\n// var y = camera.y;\n\n\n\n\n\ncamera\n.\nsetSize\n(\nwidth\n,\n \nheight\n);\n\n\n// camera.width = width;\n\n\n// camera.height = height;\n\n\n// var width = camera.width;\n\n\n// var height = camera.height;\n\n\n\n\n\nScroll camera\n\n\ncamera\n.\nsetScroll\n(\nx\n,\n \ny\n)\n\n\n\n\n\ncamera\n.\nscrollX\n \n=\n \nscrollX\n;\n\n\ncamera\n.\nscrollY\n \n=\n \nscrollY\n;\n\n\n\n\n\ncamera\n.\ncenterToBounds\n();\n\n\n\n\n\ncamera\n.\ncenterToSize\n();\n\n\n\n\n\nFollow game object\n\n\n\n\nStart following\n    \ncamera\n.\nstartFollow\n(\ngameobject\n);\n\n\n// camera.startFollow(gameobject, roundPx, lerpX, lerpY, offsetX, offsetY);  // \n\n\n\n    roundPx : set true to round the camera position to integers\n\n\nStop following\n    \ncamera\n.\nstopFollow\n();\n\n\n\n\nSet follow offset\n    \ncamera\n.\nsetFollowOffset\n(\nx\n,\n \ny\n);\n\n\n\n\nSet lerp\n    \ncamera\n.\nsetLerp\n(\nx\n,\n \ny\n);\n\n\n\n\n\n\nScroll factor\n\n\nSee \nScroll factor\n in game object.\n\n\nSet bounds\n\n\ncamera\n.\nsetBounds\n(\nx\n,\n \ny\n,\n \nwidth\n,\n \nheight\n)\n\n\n\n\n\nZoom\n\n\ncamera\n.\nsetZoom\n(\nv\n);\n\n\n// camera.zoom = v;\n\n\n// var zoom = camera.zoom;\n\n\n\n\n\nRotation\n\n\nSpin camera around center.\n\n\ncamera\n.\nsetRotation\n(\nrad\n);\n\n\n// camera.setAngle(degree);\n\n\n// camera.rotation = rad;\n\n\n\n\n\nEffects\n\n\nFade-in / fade-out\n\n\ncamera\n.\nfadeIn\n(\nduration\n);\n   \n// duration in ms\n\n\n// camera.fadeIn(duration, red, green, blue, callback, context);\n\n\n// red/green/blue: the value to fade the red/green/blue channel from. A value between 0 and 255.\n\n\n\n\n\ncamera\n.\nfadeOut\n(\nduration\n);\n   \n// duration in ms\n\n\n// camera.fadeOut(duration, red, green, blue, callback, context);\n\n\n\n\n\nEvents\n\n\ncamera\n.\non\n(\ncamerafadeincomplete\n,\n \ncamera\n,\n \nfade\n);\n\n\n\n\n\ncamera\n.\non\n(\ncamerafadeoutcomplete\n,\n \ncamera\n,\n \nfade\n);\n\n\n\n\n\nFlash\n\n\ncamera\n.\nflash\n(\nduration\n);\n   \n// duration in ms\n\n\n// camera.flash(duration, red, green, blue, force, callback, context);\n\n\n\n\n\nEvents\n\n\ncamera\n.\non\n(\ncameraflashstart\n,\n \ncamera\n,\n \nflash\n,\n \nduration\n,\n \nred\n,\n \ngreen\n,\n \nblue\n);\n\n\n\n\n\ncamera\n.\non\n(\ncameraflashcomplete\n,\n \ncamera\n,\n \nflash\n);\n\n\n\n\n\nShake\n\n\ncamera\n.\nshake\n(\nduration\n);\n   \n// duration in ms\n\n\n// camera.shake(duration, intensity, force, callback, context);  // callback: invoked when completed\n\n\n\n\n\nEvents\n\n\ncamera\n.\non\n(\ncamerashakestart\n,\n \ncamera\n,\n \nshake\n,\n \nduration\n,\n \nintensity\n);\n\n\n\n\n\ncamera\n.\non\n(\ncamerashakecomplete\n,\n \ncamera\n,\n \nshake\n);\n\n\n\n\n\nSet background color\n\n\ncamera\n.\nsetBackgroundColor\n(\ncolor\n);\n\n\n\n\n\nIgnore game object\n\n\nIgnored game objects won't show at that camera.\n\n\ncamera\n.\nignore\n(\ngameobject\n);\n  \n// a game object, or an array of game objects\n\n\n\n\n\nCamera Controllor\n\n\nCreate controllor\n\n\n// var cursors = scene.input.keyboard.createCursorKeys();\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \ncamera\n:\n \ncamera\n,\n\n\n    \nleft\n:\n \ncursors\n.\nleft\n,\n    \n// { isDown, isUp }\n\n    \nright\n:\n \ncursors\n.\nright\n,\n  \n// { isDown, isUp }\n\n    \nup\n:\n \ncursors\n.\nup\n,\n        \n// { isDown, isUp }\n\n    \ndown\n:\n \ncursors\n.\ndown\n,\n    \n// { isDown, isUp }\n\n    \nzoomIn\n:\n \nnull\n,\n          \n// { isDown, isUp }\n\n    \nzoomOut\n:\n \nnull\n,\n         \n// { isDown, isUp }\n\n\n    \nzoomSpeed\n:\n \n0.01\n,\n\n\n    \nacceleration\n:\n \nnull\n,\n\n    \n// acceleration: {\n\n    \n//    x: 0,\n\n    \n//    y: 0\n\n    \n// }\n\n\n    \ndrag\n:\n \nnull\n,\n\n    \n// drag: {\n\n    \n//    x: 0,\n\n    \n//    y: 0\n\n    \n// }\n\n\n    \nmaxSpeed\n:\n \nnull\n\n    \n// maxSpeed: {\n\n    \n//    x: 0,\n\n    \n//    y: 0\n\n    \n// }\n\n\n};\n\n\nvar\n \ncontrols\n \n=\n \nnew\n \nPhaser\n.\nCameras\n.\nControls\n.\nSmoothed\n(\nconfig\n);\n\n\n\n\n\nUpdate\n\n\nscene\n.\nupdate\n \n=\n \nfunction\n \n(\ntime\n,\n \ndelta\n)\n \n{\n\n    \ncontrols\n.\nupdate\n(\ndelta\n);\n\n\n}\n\n\n\n\n\nStart / stop\n\n\ncontrols\n.\nstart\n();\n\n\n\n\n\ncontrols\n.\nstop\n();\n\n\n\n\n\nOther methods\n\n\ncontrols\n.\nsetCamera\n(\ncamera\n);", 
            "title": "Camera"
        }, 
        {
            "location": "/camera/index.html#introduction", 
            "text": "Camera to display game objects, built-in object of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/camera/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/camera/index.html#get-camera", 
            "text": "Each scene has one or more cameras.   Main camera\n     var   camera   =   scene . cameras . main ;    Add new camera\n     var   camera   =   scene . cameras . add ( x ,   y ,   width ,   height );     Add existed camera\n     scene . cameras . addExisting ( camera );", 
            "title": "Get camera"
        }, 
        {
            "location": "/camera/index.html#remove-camera", 
            "text": "scene . cameras . remove ( camera );", 
            "title": "Remove camera"
        }, 
        {
            "location": "/camera/index.html#destroy-camera", 
            "text": "camera . destroy ();", 
            "title": "Destroy camera"
        }, 
        {
            "location": "/camera/index.html#set-view-port", 
            "text": "camera . setViewport ( x ,   y ,   width ,   height );   camera . setPosition ( x ,   y );  // camera.x = x;  // camera.y = y;  // var x = camera.x;  // var y = camera.y;   camera . setSize ( width ,   height );  // camera.width = width;  // camera.height = height;  // var width = camera.width;  // var height = camera.height;", 
            "title": "Set view port"
        }, 
        {
            "location": "/camera/index.html#scroll-camera", 
            "text": "camera . setScroll ( x ,   y )   camera . scrollX   =   scrollX ;  camera . scrollY   =   scrollY ;   camera . centerToBounds ();   camera . centerToSize ();", 
            "title": "Scroll camera"
        }, 
        {
            "location": "/camera/index.html#follow-game-object", 
            "text": "Start following\n     camera . startFollow ( gameobject );  // camera.startFollow(gameobject, roundPx, lerpX, lerpY, offsetX, offsetY);  //   \n    roundPx : set true to round the camera position to integers  Stop following\n     camera . stopFollow ();   Set follow offset\n     camera . setFollowOffset ( x ,   y );   Set lerp\n     camera . setLerp ( x ,   y );", 
            "title": "Follow game object"
        }, 
        {
            "location": "/camera/index.html#scroll-factor", 
            "text": "See  Scroll factor  in game object.", 
            "title": "Scroll factor"
        }, 
        {
            "location": "/camera/index.html#set-bounds", 
            "text": "camera . setBounds ( x ,   y ,   width ,   height )", 
            "title": "Set bounds"
        }, 
        {
            "location": "/camera/index.html#zoom", 
            "text": "camera . setZoom ( v );  // camera.zoom = v;  // var zoom = camera.zoom;", 
            "title": "Zoom"
        }, 
        {
            "location": "/camera/index.html#rotation", 
            "text": "Spin camera around center.  camera . setRotation ( rad );  // camera.setAngle(degree);  // camera.rotation = rad;", 
            "title": "Rotation"
        }, 
        {
            "location": "/camera/index.html#effects", 
            "text": "", 
            "title": "Effects"
        }, 
        {
            "location": "/camera/index.html#fade-in-fade-out", 
            "text": "camera . fadeIn ( duration );     // duration in ms  // camera.fadeIn(duration, red, green, blue, callback, context);  // red/green/blue: the value to fade the red/green/blue channel from. A value between 0 and 255.   camera . fadeOut ( duration );     // duration in ms  // camera.fadeOut(duration, red, green, blue, callback, context);", 
            "title": "Fade-in / fade-out"
        }, 
        {
            "location": "/camera/index.html#events", 
            "text": "camera . on ( camerafadeincomplete ,   camera ,   fade );   camera . on ( camerafadeoutcomplete ,   camera ,   fade );", 
            "title": "Events"
        }, 
        {
            "location": "/camera/index.html#flash", 
            "text": "camera . flash ( duration );     // duration in ms  // camera.flash(duration, red, green, blue, force, callback, context);", 
            "title": "Flash"
        }, 
        {
            "location": "/camera/index.html#events_1", 
            "text": "camera . on ( cameraflashstart ,   camera ,   flash ,   duration ,   red ,   green ,   blue );   camera . on ( cameraflashcomplete ,   camera ,   flash );", 
            "title": "Events"
        }, 
        {
            "location": "/camera/index.html#shake", 
            "text": "camera . shake ( duration );     // duration in ms  // camera.shake(duration, intensity, force, callback, context);  // callback: invoked when completed", 
            "title": "Shake"
        }, 
        {
            "location": "/camera/index.html#events_2", 
            "text": "camera . on ( camerashakestart ,   camera ,   shake ,   duration ,   intensity );   camera . on ( camerashakecomplete ,   camera ,   shake );", 
            "title": "Events"
        }, 
        {
            "location": "/camera/index.html#set-background-color", 
            "text": "camera . setBackgroundColor ( color );", 
            "title": "Set background color"
        }, 
        {
            "location": "/camera/index.html#ignore-game-object", 
            "text": "Ignored game objects won't show at that camera.  camera . ignore ( gameobject );    // a game object, or an array of game objects", 
            "title": "Ignore game object"
        }, 
        {
            "location": "/camera/index.html#camera-controllor", 
            "text": "", 
            "title": "Camera Controllor"
        }, 
        {
            "location": "/camera/index.html#create-controllor", 
            "text": "// var cursors = scene.input.keyboard.createCursorKeys();  var   config   =   { \n     camera :   camera , \n\n     left :   cursors . left ,      // { isDown, isUp } \n     right :   cursors . right ,    // { isDown, isUp } \n     up :   cursors . up ,          // { isDown, isUp } \n     down :   cursors . down ,      // { isDown, isUp } \n     zoomIn :   null ,            // { isDown, isUp } \n     zoomOut :   null ,           // { isDown, isUp } \n\n     zoomSpeed :   0.01 , \n\n     acceleration :   null , \n     // acceleration: { \n     //    x: 0, \n     //    y: 0 \n     // } \n\n     drag :   null , \n     // drag: { \n     //    x: 0, \n     //    y: 0 \n     // } \n\n     maxSpeed :   null \n     // maxSpeed: { \n     //    x: 0, \n     //    y: 0 \n     // }  };  var   controls   =   new   Phaser . Cameras . Controls . Smoothed ( config );", 
            "title": "Create controllor"
        }, 
        {
            "location": "/camera/index.html#update", 
            "text": "scene . update   =   function   ( time ,   delta )   { \n     controls . update ( delta );  }", 
            "title": "Update"
        }, 
        {
            "location": "/camera/index.html#start-stop", 
            "text": "controls . start ();   controls . stop ();", 
            "title": "Start / stop"
        }, 
        {
            "location": "/camera/index.html#other-methods", 
            "text": "controls . setCamera ( camera );", 
            "title": "Other methods"
        }, 
        {
            "location": "/random/index.html", 
            "text": "Introduction\n\n\nGet random value, built-in methods of phaser.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nGet random integer between (min, max)\n\n\nvar\n \nvalue\n \n=\n \nPhaser\n.\nMath\n.\nBetween\n(\nmin\n,\n \nmax\n);\n\n\n\n\n\nGet random vector\n\n\nvar\n \nvec\n \n=\n \nPhaser\n.\nMath\n.\nRandomXY\n(\nvec\n);\n    \n// return vec {x, y}\n\n\n// var vec = Phaser.Math.RandomXY(vec, scale);\n\n\n\n\n\nGet random item\n\n\nvar\n \nitem\n \n=\n \nPhaser\n.\nUtils\n.\nArray\n.\nGetRandom\n(\narray\n);\n\n\n// var item = Phaser.Utils.Array.GetRandom(array, startIndex, length);\n\n\n\n\n\nRemove random item\n\n\nvar\n \nitem\n \n=\n \nPhaser\n.\nUtils\n.\nArray\n.\nRemoveRandomElement\n(\narray\n);\n\n\n\n\n\nShuffle\n\n\nvar\n \narr\n \n=\n \nPhaser\n.\nUtils\n.\nArray\n.\nShuffle\n(\narray\n);", 
            "title": "Random number"
        }, 
        {
            "location": "/random/index.html#introduction", 
            "text": "Get random value, built-in methods of phaser.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/random/index.html#usage", 
            "text": "", 
            "title": "Usage"
        }, 
        {
            "location": "/random/index.html#get-random-integer-between-min-max", 
            "text": "var   value   =   Phaser . Math . Between ( min ,   max );", 
            "title": "Get random integer between (min, max)"
        }, 
        {
            "location": "/random/index.html#get-random-vector", 
            "text": "var   vec   =   Phaser . Math . RandomXY ( vec );      // return vec {x, y}  // var vec = Phaser.Math.RandomXY(vec, scale);", 
            "title": "Get random vector"
        }, 
        {
            "location": "/random/index.html#get-random-item", 
            "text": "var   item   =   Phaser . Utils . Array . GetRandom ( array );  // var item = Phaser.Utils.Array.GetRandom(array, startIndex, length);", 
            "title": "Get random item"
        }, 
        {
            "location": "/random/index.html#remove-random-item", 
            "text": "var   item   =   Phaser . Utils . Array . RemoveRandomElement ( array );", 
            "title": "Remove random item"
        }, 
        {
            "location": "/random/index.html#shuffle", 
            "text": "var   arr   =   Phaser . Utils . Array . Shuffle ( array );", 
            "title": "Shuffle"
        }, 
        {
            "location": "/gashapon/index.html", 
            "text": "Introduction\n\n\nPick random item from box.\n\n\n\n\nAuthor: Rex\n\n\nMember of scene, or game object\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nrexGashapon\n \nfrom\n \n./plugins/gashapon.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nGashaponPlugin\n \nfrom\n \n./plugins/gashapon-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexGashapon\n,\n\n            \nplugin\n:\n \nGashaponPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate instance\n\n\nvar\n \ngashapon\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexGashapon\n).\nadd\n({\n\n    \nmode\n:\n \nshuffle\n,\n  \n// 0|\nshuffle\n|1|\nrandom\n\n    \nitems\n:\n \n{\n  \n// name:count\n\n        \na\n:\n1\n,\n \n        \nb\n:\n2\n,\n \n        \nc\n:\n3\n \n    \n},\n\n    \nreload\n:\n \ntrue\n,\n     \n// true|false\n\n\n});\n\n\n\n\n\nProperties\n\n\n\n\nmode : \n\n\n'shuffle'\n, or \n0\n : pick item from box without put it back.\n\n\n'random'\n, or \n1\n : pick item from box then put it back.\n\n\n\n\n\n\nreload : set \ntrue\n to reload items when box is empty for \nshuffle\n mode.\n\n\nitems : initial items in box\n\n\n\n\nPick item\n\n\nPick a random item\n\n\nvar\n \nitem\n \n=\n \ngashapon\n.\nnext\n();\n\n\n\n\n\n\n\nreturn \nnull\n if pick nothing\n\n\n\n\nPick specific item\n\n\nvar\n \nitem\n \n=\n \ngashapon\n.\nnext\n(\na\n);\n\n\n\n\n\n\n\nreturn \nnull\n if pick nothing\n\n\n\n\nLast picked item\n\n\nvar\n \nitem\n \n=\n \ngashapon\n.\nresult\n;\n\n\n\n\n\nSet item\n\n\nSet item\n\n\ngashapon\n.\nsetItem\n(\na\n,\n \n1\n);\n\n\n// gashapon.setItem(\na\n, 1).setItem(\nb\n, 2).setItem(\nc\n, 3);\n\n\n\n\n\nAdd item\n\n\ngashapon\n.\naddItem\n(\na\n,\n1\n);\n\n\n\n\n\nRemove item\n\n\nRemove item\n\n\ngashapon\n.\nremoveItem\n(\na\n);\n\n\n// gashapon.removeItem(\nb\n).gashapon.removeItem(\nc\n);\n\n\n\n\n\nRemove all items\n\n\ngashapon\n.\nremoveAllItems\n();\n\n\n\n\n\nCurrent status\n\n\nGet current status\n\n\nvar\n \nstatus\n \n=\n \ngashapon\n.\ntoJSON\n();\n\n\n\n\n\nClone object\n\n\nvar\n \nstatus\n \n=\n \ngashapon\n.\ntoJSON\n();\n\n\nvar\n \ngashapon2\n \n=\n \nnew\n \nGashapon\n(\nstatus\n);\n\n\n\n\n\nOverwrite current status\n\n\nvar\n \nstatus\n \n=\n \ngashapon\n.\ntoJSON\n();\n\n\n// gashapon.next()...\n\n\ngashapon\n.\nresetFromJSON\n(\nstatus\n);\n\n\n\n\n\nGet items\n\n\nFor each item\n\n\ngashapon\n.\neachItem\n(\nfunction\n(\nname\n,\n \ncount\n){\n\n    \nconsole\n.\nlog\n(\nname\n \n+\n \n: \n \n+\n \ncount\n);\n\n\n});\n\n\n\n\n\nGet items\n\n\nvar\n \nitems\n \n=\n \ngashapon\n.\ngetItems\n();", 
            "title": "Gashapon"
        }, 
        {
            "location": "/gashapon/index.html#introduction", 
            "text": "Pick random item from box.   Author: Rex  Member of scene, or game object", 
            "title": "Introduction"
        }, 
        {
            "location": "/gashapon/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/gashapon/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/gashapon/index.html#import-class", 
            "text": "import   rexGashapon   from   ./plugins/gashapon.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/gashapon/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   GashaponPlugin   from   ./plugins/gashapon-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexGashapon , \n             plugin :   GashaponPlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/gashapon/index.html#create-instance", 
            "text": "var   gashapon   =   scene . plugins . get ( rexGashapon ). add ({ \n     mode :   shuffle ,    // 0| shuffle |1| random \n     items :   {    // name:count \n         a : 1 ,  \n         b : 2 ,  \n         c : 3  \n     }, \n     reload :   true ,       // true|false  });   Properties   mode :   'shuffle' , or  0  : pick item from box without put it back.  'random' , or  1  : pick item from box then put it back.    reload : set  true  to reload items when box is empty for  shuffle  mode.  items : initial items in box", 
            "title": "Create instance"
        }, 
        {
            "location": "/gashapon/index.html#pick-item", 
            "text": "", 
            "title": "Pick item"
        }, 
        {
            "location": "/gashapon/index.html#pick-a-random-item", 
            "text": "var   item   =   gashapon . next ();    return  null  if pick nothing", 
            "title": "Pick a random item"
        }, 
        {
            "location": "/gashapon/index.html#pick-specific-item", 
            "text": "var   item   =   gashapon . next ( a );    return  null  if pick nothing", 
            "title": "Pick specific item"
        }, 
        {
            "location": "/gashapon/index.html#last-picked-item", 
            "text": "var   item   =   gashapon . result ;", 
            "title": "Last picked item"
        }, 
        {
            "location": "/gashapon/index.html#set-item", 
            "text": "", 
            "title": "Set item"
        }, 
        {
            "location": "/gashapon/index.html#set-item_1", 
            "text": "gashapon . setItem ( a ,   1 );  // gashapon.setItem( a , 1).setItem( b , 2).setItem( c , 3);", 
            "title": "Set item"
        }, 
        {
            "location": "/gashapon/index.html#add-item", 
            "text": "gashapon . addItem ( a , 1 );", 
            "title": "Add item"
        }, 
        {
            "location": "/gashapon/index.html#remove-item", 
            "text": "", 
            "title": "Remove item"
        }, 
        {
            "location": "/gashapon/index.html#remove-item_1", 
            "text": "gashapon . removeItem ( a );  // gashapon.removeItem( b ).gashapon.removeItem( c );", 
            "title": "Remove item"
        }, 
        {
            "location": "/gashapon/index.html#remove-all-items", 
            "text": "gashapon . removeAllItems ();", 
            "title": "Remove all items"
        }, 
        {
            "location": "/gashapon/index.html#current-status", 
            "text": "", 
            "title": "Current status"
        }, 
        {
            "location": "/gashapon/index.html#get-current-status", 
            "text": "var   status   =   gashapon . toJSON ();", 
            "title": "Get current status"
        }, 
        {
            "location": "/gashapon/index.html#clone-object", 
            "text": "var   status   =   gashapon . toJSON ();  var   gashapon2   =   new   Gashapon ( status );", 
            "title": "Clone object"
        }, 
        {
            "location": "/gashapon/index.html#overwrite-current-status", 
            "text": "var   status   =   gashapon . toJSON ();  // gashapon.next()...  gashapon . resetFromJSON ( status );", 
            "title": "Overwrite current status"
        }, 
        {
            "location": "/gashapon/index.html#get-items", 
            "text": "", 
            "title": "Get items"
        }, 
        {
            "location": "/gashapon/index.html#for-each-item", 
            "text": "gashapon . eachItem ( function ( name ,   count ){ \n     console . log ( name   +   :    +   count );  });", 
            "title": "For each item"
        }, 
        {
            "location": "/gashapon/index.html#get-items_1", 
            "text": "var   items   =   gashapon . getItems ();", 
            "title": "Get items"
        }, 
        {
            "location": "/format/index.html", 
            "text": "Introduction\n\n\nFormat string with variables.\n\n\n\n\nAuthor: Richard Davey\n\n\n\n\nUsage\n\n\nReplace \n%x\n from an array. \nx\n starts from \n1\n.\n\n\n// const Format = Phaser.Utils.String.Format;\n\n\nvar\n \ntemplate\n \n=\n \nhello, %1\n;\n\n\nvar\n \nview\n \n=\n \n[\nrex\n];\n\n\nvar\n \nresult\n \n=\n \nFormat\n(\ntemplate\n,\n \nview\n);", 
            "title": "Format"
        }, 
        {
            "location": "/format/index.html#introduction", 
            "text": "Format string with variables.   Author: Richard Davey", 
            "title": "Introduction"
        }, 
        {
            "location": "/format/index.html#usage", 
            "text": "Replace  %x  from an array.  x  starts from  1 .  // const Format = Phaser.Utils.String.Format;  var   template   =   hello, %1 ;  var   view   =   [ rex ];  var   result   =   Format ( template ,   view );", 
            "title": "Usage"
        }, 
        {
            "location": "/mustache/index.html", 
            "text": "Introduction\n\n\nFormat string with variables.\n\n\nReference\n\n\nUsage\n\n\nvar\n \ntemplate\n \n=\n \nhello, {{name}}\n;\n\n\nvar\n \nview\n \n=\n \n{\n\n    \nname\n:\n \nrex\n\n\n};\n\n\nvar\n \nresult\n \n=\n \nMustache\n.\nrender\n(\ntemplate\n,\n \nview\n);", 
            "title": "Mustache"
        }, 
        {
            "location": "/mustache/index.html#introduction", 
            "text": "Format string with variables.  Reference", 
            "title": "Introduction"
        }, 
        {
            "location": "/mustache/index.html#usage", 
            "text": "var   template   =   hello, {{name}} ;  var   view   =   { \n     name :   rex  };  var   result   =   Mustache . render ( template ,   view );", 
            "title": "Usage"
        }, 
        {
            "location": "/lzstringplugin/index.html", 
            "text": "Introduction\n\n\nCompress string using LZ-based compression algorithm. \nReference\n\n\n\n\nAuthor: Rex\n\n\nMember of scene\n\n\n\n\nSource code\n\n\nLink\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nrexXOR\n \nfrom\n \n./plugins/xor.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nLZString\n \nfrom\n \n./plugins/lzstring-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexLZString\n,\n\n            \nplugin\n:\n \nLZString\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nCreate instance\n\n\nvar\n \nlzstring\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexLZString\n);\n\n\n\n\n\nCompression\n\n\nvar\n \ncompressionResult\n \n=\n \nlzstring\n.\ncompress\n(\nsrc\n);\n\n\n\n\n\nDecompression\n\n\nvar\n \ndecompressionResult\n \n=\n \nlzstring\n.\ndecompress\n(\ncompressionResult\n);\n\n\n\n\n\nSet encoding\n\n\nlzstring\n.\nsetEncoding\n(\nm\n);\n  \n// 0|\nnone\n|1|\nbase64\n|2|\nutf16\n|3|\nuri\n\n\n\n\n\n\n\nencoding mode : \n\n\n'none'\n, or \n0\n : no encoding.\n\n\n'base64'\n, or \n1\n : base64 encoding.\n\n\n'utf16'\n, or \n2\n : UTF16 encoding.\n\n\n'uri'\n, or \n3\n : URI encoding.", 
            "title": "LZ string"
        }, 
        {
            "location": "/lzstringplugin/index.html#introduction", 
            "text": "Compress string using LZ-based compression algorithm.  Reference   Author: Rex  Member of scene", 
            "title": "Introduction"
        }, 
        {
            "location": "/lzstringplugin/index.html#source-code", 
            "text": "Link", 
            "title": "Source code"
        }, 
        {
            "location": "/lzstringplugin/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/lzstringplugin/index.html#import-class", 
            "text": "import   rexXOR   from   ./plugins/xor.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/lzstringplugin/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   LZString   from   ./plugins/lzstring-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexLZString , \n             plugin :   LZString , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/lzstringplugin/index.html#create-instance", 
            "text": "var   lzstring   =   scene . plugins . get ( rexLZString );", 
            "title": "Create instance"
        }, 
        {
            "location": "/lzstringplugin/index.html#compression", 
            "text": "var   compressionResult   =   lzstring . compress ( src );", 
            "title": "Compression"
        }, 
        {
            "location": "/lzstringplugin/index.html#decompression", 
            "text": "var   decompressionResult   =   lzstring . decompress ( compressionResult );", 
            "title": "Decompression"
        }, 
        {
            "location": "/lzstringplugin/index.html#set-encoding", 
            "text": "lzstring . setEncoding ( m );    // 0| none |1| base64 |2| utf16 |3| uri    encoding mode :   'none' , or  0  : no encoding.  'base64' , or  1  : base64 encoding.  'utf16' , or  2  : UTF16 encoding.  'uri' , or  3  : URI encoding.", 
            "title": "Set encoding"
        }, 
        {
            "location": "/xor/index.html", 
            "text": "Introduction\n\n\nEncrypt or decrypt string by XOR algorithm.\n\n\n\n\nAuthor: Rex\n\n\nFunctions collection\n\n\n\n\nSource code\n\n\nEncrypt\n\n\nDecrypt\n\n\nUsage\n\n\nSample code\n\n\nUser could import class directly, or install it by global plugin.\n\n\nImport class\n\n\nimport\n \nrexXOR\n \nfrom\n \n./plugins/xor.js\n;\n\n\n\n\n\nInstall global plugin\n\n\nInstall plugin in \nconfiguration of game\n\n\nimport\n \nXORPlugin\n \nfrom\n \n./plugins/xor-plugin.js\n;\n\n\n\nvar\n \nconfig\n \n=\n \n{\n\n    \n// ...\n\n    \nplugins\n:\n \n{\n\n        \nglobal\n:\n \n[{\n\n            \nkey\n:\n \nrexXOR\n,\n\n            \nplugin\n:\n \nXORPlugin\n,\n\n            \nstart\n:\n \ntrue\n\n        \n},\n\n        \n// ...\n\n        \n]\n\n    \n}\n\n    \n// ...\n\n\n};\n\n\nvar\n \ngame\n \n=\n \nnew\n \nPhaser\n.\nGame\n(\nconfig\n);\n\n\n\n\n\nEncrypt\n\n\nvar\n \nencResult\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexXOR\n).\nEncrypt\n(\nsrc\n,\n \npwd\n);\n\n\n\n\n\nDecrypt\n\n\nvar\n \ndecResult\n \n=\n \nscene\n.\nplugins\n.\nget\n(\nrexXOR\n).\nDecrypt\n(\nencResult\n,\n \npwd\n);", 
            "title": "XOR"
        }, 
        {
            "location": "/xor/index.html#introduction", 
            "text": "Encrypt or decrypt string by XOR algorithm.   Author: Rex  Functions collection", 
            "title": "Introduction"
        }, 
        {
            "location": "/xor/index.html#source-code", 
            "text": "Encrypt  Decrypt", 
            "title": "Source code"
        }, 
        {
            "location": "/xor/index.html#usage", 
            "text": "Sample code  User could import class directly, or install it by global plugin.", 
            "title": "Usage"
        }, 
        {
            "location": "/xor/index.html#import-class", 
            "text": "import   rexXOR   from   ./plugins/xor.js ;", 
            "title": "Import class"
        }, 
        {
            "location": "/xor/index.html#install-global-plugin", 
            "text": "Install plugin in  configuration of game  import   XORPlugin   from   ./plugins/xor-plugin.js ;  var   config   =   { \n     // ... \n     plugins :   { \n         global :   [{ \n             key :   rexXOR , \n             plugin :   XORPlugin , \n             start :   true \n         }, \n         // ... \n         ] \n     } \n     // ...  };  var   game   =   new   Phaser . Game ( config );", 
            "title": "Install global plugin"
        }, 
        {
            "location": "/xor/index.html#encrypt", 
            "text": "var   encResult   =   scene . plugins . get ( rexXOR ). Encrypt ( src ,   pwd );", 
            "title": "Encrypt"
        }, 
        {
            "location": "/xor/index.html#decrypt", 
            "text": "var   decResult   =   scene . plugins . get ( rexXOR ). Decrypt ( encResult ,   pwd );", 
            "title": "Decrypt"
        }
    ]
}