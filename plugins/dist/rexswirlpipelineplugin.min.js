!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.rexswirlpipelineplugin=e():t.rexswirlpipelineplugin=e()}(window,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=78)}({78:function(t,e,n){"use strict";n.r(e);var r="\nprecision mediump float;\n\n// Scene buffer\nuniform sampler2D uMainSampler; \nvarying vec2 outTexCoord;\n\n// Currently not used in this demo!\nuniform float time; \n\n// GeeXLab built-in uniform, width of\n// the current render target\nuniform float rt_w; \n// GeeXLab built-in uniform, height of\n// the current render target\nuniform float rt_h; \n\n// Swirl effect parameters\nuniform float radius;\nuniform float angle;\nuniform float center_x; \nuniform float center_y;\n\nvec4 PostFX(sampler2D tex, vec2 uv, float time)\n{\n  vec2 texSize = vec2(rt_w, rt_h);\n  vec2 center = vec2(center_x, center_y);\n  vec2 tc = uv * texSize;\n  tc -= center;\n  float dist = length(tc);\n  if (dist < radius) \n  {\n    float percent = (radius - dist) / radius;\n    float theta = percent * percent * angle * 8.0;\n    float s = sin(theta);\n    float c = cos(theta);\n    tc = vec2(dot(tc, vec2(c, -s)), dot(tc, vec2(s, c)));\n  }\n  tc += center;\n  vec3 color = texture2D(tex, tc / texSize).rgb;\n  return vec4(color, 1.0);\n}\n\nvoid main (void)\n{\n  gl_FragColor = PostFX(uMainSampler, outTexCoord, time);\n}\n";const i=Phaser.Renderer.WebGL.Pipelines.TextureTintPipeline,o=Phaser.Math.DegToRad,s=Phaser.Math.RadToDeg;var a=class extends i{constructor(t,e){super({game:t,renderer:t.renderer,fragShader:r}),this._width=0,this._height=0,this._centerX=0,this._centerY=0,this._radius=0,this._rotation=0,this.setRadius(0),this.setRotation(0),this.setCenter(),t.renderer.addPipeline(e,this)}get radius(){return this._radius}set radius(t){this._radius=t,this.setFloat1("radius",t)}setRadius(t){return this.radius=t,this}get rotation(){return this._rotation}set rotation(t){this._rotation=t,this.setFloat1("angle",t)}setRotation(t){return this.rotation=t,this}get angle(){return s(this.rotation)}set angle(t){this.rotation=o(t)}setAngle(t){return this.angle=t,this}get centerX(){return this._centerX}set centerX(t){this._centerX=t,this.setFloat1("center_x",t*this.resolution)}get centerY(){return this._centerY}set centerY(t){this._centerY=t,this.setFloat1("center_y",t*this.resolution)}setCenter(t,e){return void 0===t&&(t=this._width/2,e=this._height/2),this.centerX=t,this.centerY=e,this}resize(t,e,n){return this._width=t,this._height=e,super.resize(t,e,n),this.setFloat1("rt_w",this.width),this.setFloat1("rt_h",this.height),this}};e.default=class extends Phaser.Plugins.BasePlugin{constructor(t){super(t)}start(){this.game.events.once("destroy",this.destroy,this)}add(t,e){return new a(t,e)}}}}).default});